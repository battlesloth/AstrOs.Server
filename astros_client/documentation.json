{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddModuleEvent",
            "id": "interface-AddModuleEvent-0dd25919acc2f3f3ea1191ee0fd20770a556946694f5d172498695d15b38ff003728f392a37343f89293f8a226a7ad1260dec10c1ea5d7c3803eab04eb7e7c56",
            "file": "src/app/components/esp-module/utility/module-events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModuleSubType, ModuleType } from 'astros-common';\n\nexport interface AddModuleEvent {\n  locationId: string;\n  module: ModuleType;\n}\n\nexport interface RemoveModuleEvent {\n  locationId: string;\n  id: string;\n  module: ModuleType;\n}\n\nexport interface ServoTestEvent {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n  channelId: string;\n}\n",
            "properties": [
                {
                    "name": "locationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AddModuleModalResponse",
            "id": "interface-AddModuleModalResponse-d780d122c75a1f062adc481f9de7091a3ce8e32c1c5c91237e7a74401844ac9e84df50fb71c631970343d3c7ebd081f765305845fc147155463493e209f83755",
            "file": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterContentInit, Component } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModuleType } from 'astros-common/dist/astros_enums';\nimport { ModuleSubType } from 'astros-common/dist/astros_enums';\nimport { NgForOf } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\n\nexport class AddModuleModalResources {\n  public static moduleType = 'moduleType';\n  public static locationId = 'locationId';\n  public static addEvent = 'add_module_addEvent';\n  public static closeEvent = 'add_module_closeEvent';\n}\n\nexport interface AddModuleModalResponse {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n}\n\nexport interface ModuleSubTypeSelection {\n  id: ModuleSubType;\n  value: string;\n}\n\n@Component({\n  selector: 'app-add-module-modal',\n  imports: [NgForOf, FormsModule],\n  templateUrl: './add-module-modal.component.html',\n  styleUrl: './add-module-modal.component.scss',\n})\nexport class AddModuleModalComponent\n  extends ModalBaseComponent\n  implements AfterContentInit\n{\n  options: ModuleSubTypeSelection[] = [];\n\n  locationId = \"0\";\n  moduleType: ModuleType = ModuleType.none;\n  selectedSubType: ModuleSubType = ModuleSubType.none;\n\n  moduleTypes: Map<ModuleType, string>;\n\n  moduleSubTypes: Map<ModuleType, ModuleSubTypeSelection[]>;\n\n  constructor() {\n    super();\n\n    this.moduleTypes = new Map<ModuleType, string>([\n      [ModuleType.uart, 'Serial'],\n      [ModuleType.i2c, 'I2C'],\n      [ModuleType.gpio, 'GPIO'],\n    ]);\n\n    this.moduleSubTypes = new Map<ModuleType, ModuleSubTypeSelection[]>([\n      [\n        ModuleType.uart,\n        [\n          { id: ModuleSubType.genericSerial, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsSerial,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.kangaroo, value: 'Kangaroo' },\n          { id: ModuleSubType.maestro, value: 'Maestro' },\n        ],\n      ],\n      [\n        ModuleType.i2c,\n        [\n          { id: ModuleSubType.genericI2C, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsI2C,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.pwmBoard, value: 'PWM Board' },\n        ],\n      ],\n    ]);\n  }\n\n  ngAfterContentInit(): void {\n    this.locationId = this.resources.get(\n      AddModuleModalResources.locationId,\n    ) as string;\n\n    this.moduleType = this.resources.get(\n      AddModuleModalResources.moduleType,\n    ) as ModuleType;\n\n    if (this.moduleSubTypes.has(this.moduleType)) {\n      this.options = this.moduleSubTypes.get(\n        this.moduleType,\n      ) as ModuleSubTypeSelection[];\n    }\n  }\n\n  modalChange($event: Event) {\n    this.selectedSubType = +($event.target as HTMLInputElement).value;\n  }\n\n  addModule() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.addEvent, {\n      locationId: this.locationId,\n      moduleType: this.moduleType,\n      moduleSubType: this.selectedSubType,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.closeEvent, {});\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "locationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "moduleSubType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleSubType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "moduleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AddressChangeEvent",
            "id": "interface-AddressChangeEvent-8a31ad039659bd399b79dde9bd0f6735d7f36e7da2b87964e302263603682a70fc90d4efda2f2c87c2c7441caa68d1997312e047782f58e021b339a67213f15c",
            "file": "src/app/components/esp-module/i2c/i2c-module/i2c-module.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from '@angular/material/expansion';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { I2cModule, I2cType, ModuleType } from 'astros-common';\nimport { RemoveModuleEvent } from '../../utility/module-events';\nimport { GenericI2cModuleComponent } from '../i2c-submodules/generic-i2c-module/generic-i2c-module.component';\nimport { Pca9685ModuleComponent } from '../i2c-submodules/pca9685-module/pca9685-module.component';\nimport { BaseI2cSubModuleComponent } from '../i2c-submodules/base-i2c-sub-module/base-i2c-sub-module.component';\n\nexport interface AddressChangeEvent {\n  old: number;\n  new: number;\n} \n\n@Component({\n  selector: 'app-i2c-module',\n  imports: [\n    MatExpansionPanel,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    FormsModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './i2c-module.component.html',\n  styleUrl: './i2c-module.component.scss',\n})\nexport class I2cModuleComponent implements AfterViewInit, AfterContentInit {\n  @ViewChild('i2cContainer', { read: ViewContainerRef })\n  i2cContainer!: ViewContainerRef;\n\n  @Input()\n  module!: I2cModule;\n\n  // here to trigger change detection for object property changes\n  @Input()\n  set updateTrigger(val: number) {\n    console.log('I2C Module Update Trigger: ', val);\n    this.setModule();\n   }\n  \n  @Output()\n  removeModuleEvent = new EventEmitter<RemoveModuleEvent>();\n\n  @Output()\n  i2cAddressChangedEvent = new EventEmitter<AddressChangeEvent>();\n\n  subtypeName = '';\n  removeIcon = faTimes;\n  component!: ComponentRef<unknown>;\n\n  nameClicked(evt: MouseEvent) {\n    evt.stopPropagation();\n  }\n\n  ngAfterViewInit(): void {\n    this.setModule();\n  }\n\n  ngAfterContentInit(): void {\n    switch (this.module.type) {\n      case I2cType.genericI2C:\n        this.subtypeName = 'Generic I2C';\n        break;\n      case I2cType.humanCyborgRelations:\n        this.subtypeName = 'Human Cyborg Relations';\n        break;\n      case I2cType.pwmBoard:\n        this.subtypeName = 'PCA9685 PWM Board';\n        break;\n      default:\n        break;\n    }\n  }\n\n  setModule() {\n    this.i2cContainer?.clear();\n\n    let component!: ComponentRef<BaseI2cSubModuleComponent>;\n\n    switch (this.module.type) {\n      case I2cType.genericI2C:\n\n        component = this.i2cContainer.createComponent(\n          GenericI2cModuleComponent,\n        ) as ComponentRef<GenericI2cModuleComponent>;\n        break;\n      case I2cType.humanCyborgRelations:\n      case I2cType.pwmBoard:\n        component = this.i2cContainer.createComponent(\n          Pca9685ModuleComponent\n        ) as ComponentRef<Pca9685ModuleComponent>;\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      component.instance.module = this.module;\n      component.instance.i2cAddressChangedEvent.subscribe((val: string) => {\n\n        console.log('I2C Address Changed: ', val);\n\n        this.i2cAddressChangedEvent.emit({\n          old: this.module.i2cAddress,\n          new: parseInt(val, 10),\n        });\n      });\n    }\n  }\n\n  removeModule(event: Event) {\n    event.stopPropagation();\n    this.removeModuleEvent.emit({\n      locationId: this.module.locationId,\n      id: this.module.id,\n      module: ModuleType.i2c,\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "new",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "old",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Caption",
            "id": "interface-Caption-182006d8469ab78687b5757a42731145b3d84539e98721c3acbf56de13dd8e9daeefc632984a3d3f19b4459be29029f367b2986afe26a5ced21db750f4f079d4",
            "file": "src/app/pages/modules/modules.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  MatExpansionPanel,\n  MatAccordion,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from '@angular/material/expansion';\nimport {\n  ControlModule,\n  ControllerStatus,\n  AstrOsLocationCollection,\n  ControllerLocation,\n  ModuleType,\n  UartType,\n  ModuleSubType,\n  UartModule,\n  HumanCyborgRelationsModule,\n  KangarooX2,\n  MaestroModule,\n  I2cModule,\n  I2cType,\n  AstrOsConstants,\n  MaestroBoard,\n  MaestroChannel,\n} from 'astros-common';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport {\n  AlertModalComponent,\n  AlertModalResources,\n  ConfirmModalComponent,\n  ConfirmModalResources,\n  ModalComponent,\n} from '@src/components/modals';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { NgIf, NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport {\n  AddModuleEvent,\n  RemoveModuleEvent,\n  ServoTestEvent,\n} from '@src/components/esp-module/utility/module-events';\nimport { EspModuleComponent } from '@src/components/esp-module';\nimport {\n  ControllerService,\n  ModalService,\n  SnackbarService,\n  StatusService,\n  WebsocketService,\n} from '@src/services';\nimport {\n  AddModuleModalComponent,\n  AddModuleModalResources,\n  LoadingModalComponent,\n  LoadingModalResources,\n  LoadingModalResponse,\n  ServoTestModalComponent,\n  ServoTestModalResources,\n  ServoTestMessage,\n  AddModuleModalResponse,\n} from '@src/components/modals/modules';\n\ninterface Caption {\n  str: string;\n}\n\n@Component({\n  selector: 'app-modules',\n  templateUrl: './modules.component.html',\n  styleUrls: ['./modules.component.scss'],\n  viewProviders: [MatExpansionPanel],\n  imports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    FontAwesomeModule,\n    NgIf,\n    FormsModule,\n    EspModuleComponent,\n    NgFor,\n    ModalComponent,\n  ],\n})\nexport class ModulesComponent implements AfterViewInit {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  isLoaded = false;\n\n  backgroundClickDisabled = '1';\n\n  possibleControllers: ControlModule[] = [];\n  availableDomeControllers: ControlModule[] = [];\n  availableCoreControllers: ControlModule[] = [];\n\n  coreWarning = faExclamationTriangle;\n  domeWarning = faExclamationTriangle;\n  bodyWarning = faExclamationTriangle;\n\n  @ViewChild('core', { static: false }) coreEl!: ElementRef;\n  @ViewChild('dome', { static: false }) domeEl!: ElementRef;\n  @ViewChild('body', { static: false }) bodyEl!: ElementRef;\n\n  coreLocation!: ControllerLocation;\n  domeLocation!: ControllerLocation;\n  bodyLocation!: ControllerLocation;\n\n  coreCaption: Caption = { str: 'Module Down' };\n  domeCaption: Caption = { str: 'Module Down' };\n  bodyCaption: Caption = { str: 'Module Down' };\n\n  private notSynced = 'Not Synced';\n  private moduleDown = 'Module Down';\n\n  constructor(\n    private controllerService: ControllerService,\n    private websocketService: WebsocketService,\n    private snackBar: SnackbarService,\n    private modalService: ModalService,\n    private renderer: Renderer2,\n    private status: StatusService,\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.openControllerSyncModal();\n  }\n\n  //#region Loading Modal\n\n  openControllerSyncModal() {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(LoadingModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.syncModalCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  syncModalCallback(evt: ModalCallbackEvent) {\n    if (evt.type !== LoadingModalResources.closeEvent) {\n      return;\n    }\n    const response = evt.value as LoadingModalResponse;\n\n    this.parseModules(response.locations);\n\n    // always filter out the master controller since it's always the body module\n    this.possibleControllers = response.controllers.filter(\n      (controller: ControlModule) => controller.id !== 1,\n    );\n\n    this.availableCoreControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.domeLocation.controller?.id,\n    );\n    this.availableDomeControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.coreLocation.controller?.id,\n    );\n\n    this.handleStatus(\n      this.status.getCoreStatus(),\n      this.coreEl,\n      this.coreCaption,\n    );\n    this.handleStatus(\n      this.status.getDomeStatus(),\n      this.domeEl,\n      this.domeCaption,\n    );\n    this.handleStatus(\n      this.status.getBodyStatus(),\n      this.bodyEl,\n      this.bodyCaption,\n    );\n\n    this.status.coreStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.coreEl, this.coreCaption),\n    );\n    this.status.domeStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.domeEl, this.domeCaption),\n    );\n    this.status.bodyStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.bodyEl, this.bodyCaption),\n    );\n\n    this.isLoaded = true;\n\n    this.modalService.close('modules-modal');\n  }\n  //#endregion\n\n  //#region Alert Modal\n  openAlertModal(message: string) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(AlertModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(AlertModalResources.message, message);\n\n    component.instance.modalCallback.subscribe((_: unknown) => {\n      this.modalService.close('modules-modal');\n    });\n\n    this.modalService.open('modules-modal');\n  }\n  //#endregion\n\n  //#region Module Modals\n  addModule(value: AddModuleEvent) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(AddModuleModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(\n      AddModuleModalResources.locationId,\n      value.locationId,\n    );\n    component.instance.resources.set(\n      AddModuleModalResources.moduleType,\n      value.module,\n    );\n\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.addModalCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  addModalCallback(evt: ModalCallbackEvent) {\n    if (evt.type === AddModuleModalResources.closeEvent) {\n      this.modalService.close('modules-modal');\n      this.container.clear();\n      return;\n    }\n\n    if (evt.type !== AddModuleModalResources.addEvent) {\n      return;\n    }\n\n    const response = evt.value as AddModuleModalResponse;\n    this.doAddModule(response);\n\n    this.modalService.close('modules-modal');\n    this.container.clear();\n  }\n\n  removeModule(event: RemoveModuleEvent) {\n    this.container.clear();\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(\n      ConfirmModalResources.action,\n      'Remove Module',\n    );\n    component.instance.resources.set(\n      ConfirmModalResources.message,\n      'Are you sure you want to remove this module?',\n    );\n    component.instance.resources.set(ConfirmModalResources.confirmEvent, event);\n\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.removeModuleCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  removeModuleCallback(evt: ModalCallbackEvent) {\n    console.log('evt', evt);\n    if (evt.type === ConfirmModalResources.closeEvent) {\n      this.modalService.close('modules-modal');\n      this.container.clear();\n      return;\n    }\n\n    if (evt.type !== ConfirmModalResources.confirmEvent) {\n      return;\n    }\n    const response = evt.value as RemoveModuleEvent;\n\n    switch (response.module) {\n      case ModuleType.uart:\n        this.removeUartModule(response.locationId, response.id);\n        break;\n      case ModuleType.i2c:\n        this.removeI2CModule(response.locationId, response.id);\n        break;\n      case ModuleType.gpio:\n        this.removeGPIOchannel(response.locationId, response.id);\n        break;\n    }\n\n    this.modalService.close('modules-modal');\n    this.container.clear();\n  }\n\n  //#endregion\n\n  //#region Module logic\n\n  doAddModule(response: AddModuleModalResponse) {\n    switch (response.moduleType) {\n      case ModuleType.uart:\n        this.addUartModule(response.locationId, response.moduleSubType);\n        break;\n      case ModuleType.i2c:\n        this.addI2CModule(response.locationId, response.moduleSubType);\n        break;\n      case ModuleType.gpio:\n        this.addGPIOchannel(response.locationId, response.moduleSubType);\n        break;\n    }\n  }\n\n  //#region Serial Modules\n  addUartModule(location: string, subType: ModuleSubType) {\n    const controller = this.getControllerLocation(location);\n\n    const defaultChannel = location === AstrOsConstants.BODY ? 2 : 1;\n    const uartType = this.subtypeToUartType(subType);\n\n    const module = new UartModule(\n      crypto.randomUUID(),\n      'New Serial Module',\n      location,\n      uartType,\n      defaultChannel,\n      9600,\n    );\n\n    switch (uartType) {\n      case UartType.humanCyborgRelations:\n        module.subModule = new HumanCyborgRelationsModule();\n        break;\n      case UartType.kangaroo:\n        module.subModule = new KangarooX2(\n          crypto.randomUUID(),\n          'Channel 1',\n          'Channel 2',\n        );\n        break;\n      case UartType.maestro:\n        module.subModule = this.generateMaestroModule();\n        break;\n    }\n\n    controller.uartModules.push(module);\n  }\n\n\n  generateMaestroModule() {\n\n    const subModule = new MaestroModule();\n\n    subModule.boards = [\n      new MaestroBoard(\n        crypto.randomUUID(),\n        0,\n        'Board 1',\n        24\n      )\n    ]\n\n    for (let i = 0; i < 24; i++) {\n     \n      const idx = i + 1;\n      subModule.boards[0].channels.push(\n        new MaestroChannel(\n          idx,\n          `Channel ${i + idx}`,\n          false,\n          subModule.boards[0].id,\n          true,\n          500,\n          2500,\n          1250,\n          false,\n          0,\n          0,\n        )\n      );\n    }\n\n    return subModule;\n  }\n\n  removeUartModule(location: string, moduleId: string) {\n    const controller = this.getControllerLocation(location);\n\n    controller.uartModules = controller.uartModules\n      .filter((module: UartModule) => module.id !== moduleId)\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  //#endregion\n\n  //#region I2C Modules\n\n  addI2CModule(location: string, subType: ModuleSubType) {\n    const controller = this.getControllerLocation(location);\n    const i2cType = this.subtypeToI2cType(subType);\n    const nextAddress = this.getNextI2CAddress(controller.i2cModules);\n\n    if (nextAddress === -1) {\n      this.openAlertModal('All I2C addresses are in use.');\n      return;\n    }\n\n    const module = new I2cModule(\n      crypto.randomUUID(),\n      'New I2C Module',\n      location,\n      nextAddress,\n      i2cType,\n    );\n\n    switch (i2cType) {\n      case I2cType.genericI2C:\n        break;\n      case I2cType.humanCyborgRelations:\n        break;\n      case I2cType.pwmBoard:\n        break;\n    }\n\n    controller.i2cModules.push(module);\n  }\n\n  removeI2CModule(location: string, moduleId: string) {\n    const controller = this.getControllerLocation(location);\n\n    controller.i2cModules = controller.i2cModules\n      .filter((module: I2cModule) => module.id !== moduleId)\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  //#endregion\n\n  addGPIOchannel(location: string, gpioType: ModuleSubType) {}\n\n  removeGPIOchannel(location: string, channelId: string) {\n    const controller = this.getControllerLocation(location);\n\n    /*controller.gpioChannels = controller.gpioChannels.filter(\n      (channel: string) => channel !== channelId,\n    );\n    */\n  }\n\n  //#endregion\n\n  //#region Controller Selection\n\n  controllerSelectChanged(_: unknown) {\n    this.availableCoreControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.domeLocation.controller?.id,\n    );\n    this.availableDomeControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.coreLocation.controller?.id,\n    );\n  }\n\n  //#endregion\n  //#region Data Persistence\n\n  saveModuleSettings() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('module settings saved!');\n            this.snackBar.okToast('Module settings saved!');\n          } else {\n            console.log('module settings save failed!');\n            this.snackBar.okToast('Module settings save failed!');\n          }\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Module settings save failed!');\n      },\n    };\n\n    this.controllerService\n      .saveLocations(\n        new AstrOsLocationCollection(\n          this.coreLocation,\n          this.domeLocation,\n          this.bodyLocation,\n        ),\n      )\n      .subscribe(observer);\n\n    this.status.resetStatus();\n  }\n\n  syncModuleSettings() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('module sync queued!');\n            this.snackBar.okToast('Module sync queued!');\n          } else {\n            console.log('module sync failed to queue');\n            this.snackBar.okToast(`Module sync failed to queue.`);\n          }\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Module sync failed!');\n      },\n    };\n\n    this.controllerService.syncLocationConfig().subscribe(observer);\n  }\n\n  //#endregion\n\n  //#region Servo Test\n\n  openServoTestModal(value: ServoTestEvent) {\n    if (!value.locationId) {\n      this.openAlertModal('Location for this servo is not set.');\n      return;\n    }\n\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(ServoTestModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(\n      ServoTestModalResources.controllerId,\n      value.locationId,\n    );\n    component.instance.resources.set(\n      ServoTestModalResources.servoId,\n      value.channelId,\n    );\n\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.servoTestModalCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  servoTestModalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ServoTestModalResources.sendServoMove: {\n        const servoTest = evt.value as ServoTestMessage;\n        this.websocketService.sendMessage({\n          msgType: 'SERVO_TEST',\n          data: {\n            controllerId: servoTest.controllerId,\n            servoId: servoTest.servoId,\n            value: servoTest.value,\n          },\n        });\n        break;\n      }\n      case ServoTestModalResources.closeEvent: {\n        this.modalService.close('modules-modal');\n        this.container.clear();\n        break;\n      }\n    }\n  }\n\n  //#endregion\n\n  //#region Helper Functions\n\n  private parseModules(locations: AstrOsLocationCollection) {\n    console.log(locations);\n    try {\n      this.coreLocation = locations.coreModule ?? this.coreLocation;\n      this.domeLocation = locations.domeModule ?? this.domeLocation;\n      this.bodyLocation = locations.bodyModule ?? this.bodyLocation;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  private handleStatus(\n    status: ControllerStatus,\n    el: ElementRef,\n    caption: Caption,\n  ) {\n    switch (status) {\n      case ControllerStatus.up:\n        caption.str = '';\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'hidden');\n        break;\n      case ControllerStatus.needsSynced:\n        caption.str = this.notSynced;\n        this.renderer.setStyle(el.nativeElement, 'color', 'yellow');\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\n        break;\n      case ControllerStatus.down:\n        caption.str = this.moduleDown;\n        this.renderer.setStyle(el.nativeElement, 'color', 'red');\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\n        break;\n    }\n  }\n\n  private getControllerLocation(locationId: string): ControllerLocation {\n    switch (locationId) {\n      case AstrOsConstants.BODY:\n        return this.bodyLocation;\n      case AstrOsConstants.CORE:\n        return this.coreLocation;\n      case AstrOsConstants.DOME:\n        return this.domeLocation;\n    }\n    return this.bodyLocation;\n  }\n\n  private subtypeToUartType(subtype: ModuleSubType): UartType {\n    switch (subtype) {\n      case ModuleSubType.genericSerial:\n        return UartType.genericSerial;\n      case ModuleSubType.humanCyborgRelationsSerial:\n        return UartType.humanCyborgRelations;\n      case ModuleSubType.kangaroo:\n        return UartType.kangaroo;\n      case ModuleSubType.maestro:\n        return UartType.maestro;\n    }\n    return UartType.genericSerial;\n  }\n\n  private subtypeToI2cType(subtype: ModuleSubType): I2cType {\n    switch (subtype) {\n      case ModuleSubType.genericI2C:\n        return I2cType.genericI2C;\n      case ModuleSubType.humanCyborgRelationsI2C:\n        return I2cType.humanCyborgRelations;\n      case ModuleSubType.pwmBoard:\n        return I2cType.pwmBoard;\n    }\n    return I2cType.genericI2C;\n  }\n\n  private getNextI2CAddress(modules: I2cModule[]): number {\n    const addresses = modules.map((module: I2cModule) => module.i2cAddress);\n    for (let i = 0; i < 128; i++) {\n      if (!addresses.includes(i)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n\n//#endregion\n",
            "properties": [
                {
                    "name": "str",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Caption",
            "id": "interface-Caption-ee5d5106f5a72e27d964d7484465be88aa5569b43d7b4859d088d03053a68e282a9cb1cb5ac4890d581a8eee78536d4d16f830a1275132bdecc03cadb1978ae1-1",
            "file": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  ScriptResponse,\n  TransmissionStatus,\n  TransmissionType,\n} from 'astros-common';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\n\ninterface Caption {\n  str: string;\n}\n\nexport class ScriptTestModalResources {\n  public static scriptId = 'scriptId';\n  public static locations = 'locations';\n}\n\n@Component({\n  selector: 'app-script-test-modal',\n  templateUrl: './script-test-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './script-test-modal.component.scss',\n  ],\n  standalone: true,\n})\nexport class ScriptTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uploadInProgress = true;\n  runDisabled = true;\n\n  coreUpload: TransmissionStatus = TransmissionStatus.sending;\n  domeUpload: TransmissionStatus = TransmissionStatus.sending;\n  bodyUpload: TransmissionStatus = TransmissionStatus.sending;\n\n  coreCaption: Caption = { str: 'Uploading' };\n  domeCaption: Caption = { str: 'Uploading' };\n  bodyCaption: Caption = { str: 'Uploading' };\n\n  status: string;\n\n  scriptId = '';\n\n  constructor(\n    private socket: WebsocketService,\n    private scriptService: ScriptsService,\n  ) {\n    super();\n    this.status = 'Uploading script...';\n\n    this.socket.messages.subscribe((msg: unknown) => {\n      if (msg && typeof msg === 'object' && 'type' in msg) {\n        if (msg.type === TransmissionType.script) {\n          this.statusUpdate(msg as ScriptResponse);\n        }\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.scriptId = this.resources.get(\n      ScriptTestModalResources.scriptId,\n    ) as string;\n    const locations = this.resources.get(\n      ScriptTestModalResources.locations,\n    ) as number[];\n\n    let hasBody = false;\n    let hasCore = false;\n    let hasDome = false;\n\n    locations.forEach((location: number) => {\n      switch (location) {\n        case 1:\n          hasBody = true;\n          break;\n        case 2:\n          hasCore = true;\n          break;\n        case 3:\n          hasDome = true;\n          break;\n      }\n    });\n\n    this.setInitialUploadStatus(hasBody, hasCore, hasDome);\n\n    const observer = {\n      next: (result: unknown) => console.log(result),\n      error: (err: unknown) => {\n        console.error(err);\n        this.status = 'Error requesting Script Upload';\n        this.coreUpload = TransmissionStatus.failed;\n        this.coreCaption.str = 'Failed';\n        this.domeUpload = TransmissionStatus.failed;\n        this.domeCaption.str = 'Failed';\n        this.bodyUpload = TransmissionStatus.failed;\n        this.bodyCaption.str = 'Failed';\n      },\n    };\n\n    if (this.scriptId != '') {\n      this.scriptService.uploadScript(this.scriptId).subscribe(observer);\n    } else {\n      this.status = 'Script ID missing, close dialog to continue.';\n    }\n  }\n\n  runClicked() {\n    console.log(`Running script: ${this.scriptId}`);\n    this.scriptService.runScript(this.scriptId).subscribe();\n    this.closeModal();\n  }\n\n  setInitialUploadStatus(hasBody: boolean, hasCore: boolean, hasDome: boolean) {\n    if (hasBody) {\n      this.bodyUpload = TransmissionStatus.sending;\n      this.bodyCaption.str = 'Uploading';\n    } else {\n      this.bodyUpload = TransmissionStatus.success;\n      this.bodyCaption.str = 'Not Assigned';\n    }\n\n    if (hasCore) {\n      this.coreUpload = TransmissionStatus.sending;\n      this.coreCaption.str = 'Uploading';\n    } else {\n      this.coreUpload = TransmissionStatus.success;\n      this.coreCaption.str = 'Not Assigned';\n    }\n\n    if (hasDome) {\n      this.domeUpload = TransmissionStatus.sending;\n      this.domeCaption.str = 'Uploading';\n    } else {\n      this.domeUpload = TransmissionStatus.success;\n      this.domeCaption.str = 'Not Assigned';\n    }\n  }\n\n  statusUpdate(msg: ScriptResponse) {\n    switch (msg.locationId) {\n      case 1:\n        this.bodyUpload = msg.status;\n        this.setCaption(this.bodyCaption, msg.status);\n        break;\n      case 2:\n        this.coreUpload = msg.status;\n        this.setCaption(this.coreCaption, msg.status);\n        break;\n      case 3:\n        this.domeUpload = msg.status;\n        this.setCaption(this.domeCaption, msg.status);\n        break;\n    }\n\n    if (this.coreUpload > 1 && this.domeUpload > 1 && this.bodyUpload > 1) {\n      this.status = 'Upload Complete.';\n      this.uploadInProgress = false;\n      if (this.coreUpload + this.domeUpload + this.bodyUpload >= 6) {\n        this.runDisabled = false;\n      }\n    }\n  }\n\n  setCaption(caption: Caption, status: TransmissionStatus) {\n    switch (status) {\n      case TransmissionStatus.success:\n        caption.str = 'Success';\n        break;\n      case TransmissionStatus.failed:\n        caption.str = 'Failed';\n        break;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "str",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Caption-1"
        },
        {
            "name": "ChannelTestModalResponse",
            "id": "interface-ChannelTestModalResponse-b7ad7e745bbed56215dfacb88eb8660dc25c290c3f456f8091729626699e6f9dd7e3ef06bfb89c710b505c07182b7aaef888a2366a1174ef8f9f19cd196f3d3f",
            "file": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChannelSubType, ChannelType, KangarooAction } from 'astros-common';\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\nimport { NgIf } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ChannelTestModalResources {\n  public static controller = 'controller';\n  public static channelType = 'channelType';\n  public static channelSubType = 'channelSubType';\n  public static channelId = 'channelId';\n\n  public static channelTest = 'channelTest_test';\n}\n\nexport interface ChannelTestModalResponse {\n  controllerId: number;\n  commandType: ChannelType;\n  command: unknown;\n}\n\n@Component({\n  selector: 'app-channel-test-modal',\n  templateUrl: './channel-test-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './channel-test-modal.component.scss',\n  ],\n  imports: [NgIf, FormsModule],\n})\nexport class ChannelTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  controllerId = 0;\n  channelId = 0;\n\n  channelType: ChannelType = ChannelType.none;\n  channelSubType: ChannelSubType = ChannelSubType.none;\n\n  speed = 1;\n  position = 0;\n  value = '';\n\n  kangarooCh = 1;\n  kangarooAction = 1;\n  kangarooSpd?: number;\n  kangarooPos?: number;\n  spdDisabled = true;\n  posDisabled = true;\n\n  gpioLevel = 0;\n\n  constructor() {\n    super();\n    this.callbackType = ChannelTestModalResources.channelTest;\n  }\n\n  ngOnInit(): void {\n    this.controllerId = this.resources.get(\n      ChannelTestModalResources.controller,\n    ) as number;\n    this.channelType = this.resources.get(\n      ChannelTestModalResources.channelType,\n    ) as ChannelType;\n    this.channelSubType = this.resources.get(\n      ChannelTestModalResources.channelSubType,\n    ) as ChannelSubType;\n    this.channelId = this.resources.get(\n      ChannelTestModalResources.channelId,\n    ) as number;\n  }\n\n  runClicked() {\n    const evt = new ModalCallbackEvent(ChannelTestModalResources.channelTest, {\n      controllerId: this.controllerId,\n      commandType: this.channelType,\n      command: this.getCommand(),\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  getCommand(): unknown {\n    switch (this.channelType) {\n      case ChannelType.i2c:\n        return { id: this.channelId, val: this.value };\n      //case ChannelType.servo:\n      //  return { id: this.channelId, position: this.position, speed: this.speed };\n      case ChannelType.uart:\n        if (this.channelSubType === ChannelSubType.kangaroo) {\n          return { val: this.getKangarooCommand() };\n        } else {\n          return { val: this.value };\n        }\n      case ChannelType.gpio:\n        return { id: this.channelId, val: this.gpioLevel };\n    }\n    return {};\n  }\n\n  selectChange($event: Event) {\n    if (($event.target as HTMLInputElement).id === 'cmdselect') {\n      this.spdDisabled =\n        +this.kangarooAction !== 3 && +this.kangarooAction !== 4;\n      this.posDisabled = +this.kangarooAction !== 4;\n\n      if (+this.kangarooAction !== 3 && +this.kangarooAction !== 4) {\n        this.kangarooSpd = 0;\n      }\n      if (+this.kangarooAction !== 4) {\n        this.kangarooPos = 0;\n      }\n    }\n  }\n\n  getKangarooCommand(): string {\n    let cmd = '';\n\n    switch (+this.kangarooAction) {\n      case KangarooAction.start:\n        cmd = 'start';\n        break;\n      case KangarooAction.home:\n        cmd = 'home';\n        break;\n      case KangarooAction.speed:\n        cmd = `s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`;\n        break;\n      case KangarooAction.position:\n        cmd = `p${this.kangarooPos === undefined ? 0 : this.kangarooPos} s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`;\n        break;\n    }\n\n    return `${this.kangarooCh},${cmd}`;\n  }\n}\n",
            "properties": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "commandType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "controllerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmModalEvent",
            "id": "interface-ConfirmModalEvent-62289e24c33d59b39d27286dbf559d688236645ee57fb0c11fbc66e8977402dec220d9f26e29949fc8a4ee40ba9e952ebd88351e00b93c0ec21a3903279826a8",
            "file": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../modal-base/modal-callback-event';\n\nexport interface ConfirmModalEvent {\n  id: string;\n  val: unknown;\n}\n\nexport class ConfirmModalResources {\n  public static action = 'action';\n  public static message = 'message';\n  public static confirmEvent = 'confirm_confirmEvent';\n  public static closeEvent = 'confirm_closeEvent';\n}\n\n@Component({\n  selector: 'app-astros-confirm-modal',\n  templateUrl: './confirm-modal.component.html',\n  styleUrls: ['./confirm-modal.component.scss'],\n  standalone: true,\n})\nexport class ConfirmModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  action!: string;\n  message!: string;\n  confirmEvent!: ConfirmModalEvent;\n  closeEvent!: ConfirmModalEvent;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.action = this.resources.get(ConfirmModalResources.action) as string;\n    this.message = this.resources.get(ConfirmModalResources.message) as string;\n    this.confirmEvent = this.resources.get(\n      ConfirmModalResources.confirmEvent,\n    ) as ConfirmModalEvent;\n    this.closeEvent = this.resources.get(\n      ConfirmModalResources.closeEvent,\n    ) as ConfirmModalEvent;\n  }\n\n  confirm() {\n    const evt = new ModalCallbackEvent(\n      ConfirmModalResources.confirmEvent,\n      this.confirmEvent,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      ConfirmModalResources.closeEvent,\n      this.closeEvent,\n    );\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Controller",
            "id": "interface-Controller-89f92a0787056b759c53faf0b4f36538d71f94a1629af85b7e02ec0b48738aa1185ad2cc50a971e78e9cff1775506f1a78faf4fe195d0e32f61e442793849857",
            "file": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\ninterface ResourceController {\n  id: number;\n  name: string;\n  address: string;\n}\n\ninterface Controller {\n  id: number;\n  name: string;\n  address: string;\n  selected: boolean;\n}\n\nexport class FormatModalResources {\n  public static controllers = 'controllers';\n\n  public static formatSdEvent = 'format_formatSD';\n  public static closeEvent = 'format_close';\n}\n\n@Component({\n  selector: 'app-format-modal',\n  templateUrl: './format-modal.component.html',\n  styleUrls: ['./format-modal.component.scss'],\n  imports: [NgFor, FormsModule],\n})\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\n  controllers: Controller[] = [];\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(FormatModalResources.controllers)) {\n      for (const controller of this.resources.get(\n        FormatModalResources.controllers,\n      ) as ResourceController[]) {\n        this.controllers.push({\n          id: controller.id,\n          name: controller.name,\n          address: controller.address,\n          selected: false,\n        });\n      }\n    }\n  }\n\n  ok() {\n    const result = [];\n\n    for (const controller of this.controllers) {\n      if (controller.selected) {\n        result.push({ name: controller.name, address: controller.address });\n      }\n    }\n\n    const evt = new ModalCallbackEvent(\n      FormatModalResources.formatSdEvent,\n      result,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(FormatModalResources.closeEvent, null);\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ControllerModalResponse",
            "id": "interface-ControllerModalResponse-73c081237821fff93ac73f281795da397d76c09924f6584567c5f2a5a37b46dc3a12aa1a0c9dfca385c9ff445f857fcc7596e320baab10cf2d3b1390b06e5a46",
            "file": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChannelType } from 'astros-common';\nimport { ChannelValue, LocationDetails } from 'src/app/models/script-resources';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, NgIf, KeyValuePipe } from '@angular/common';\n\nexport class ControllerModalResources {\n  public static controllers = 'controllers';\n  public static modules = 'modules';\n  public static channels = 'channels';\n\n  public static addChannelEvent = 'controller_addChannel';\n  public static removeChannelEvent = 'controller_removeChannel';\n  public static closeEvent = 'controller_close';\n}\n\nexport interface ControllerModalResponse {\n  controller: string;\n  module: ChannelType;\n  channels: number[];\n}\n\n@Component({\n  selector: 'app-controller-modal',\n  templateUrl: './controller-modal.component.html',\n  styleUrls: ['./controller-modal.component.scss'],\n  imports: [FormsModule, NgFor, NgIf, KeyValuePipe],\n})\nexport class ControllerModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  errorMessage: string;\n\n  controllers!: Map<number, LocationDetails>;\n  selectedController = 0;\n\n  private availableModules!: Map<number, Map<ChannelType, string>>;\n  modules: Map<ChannelType, string>;\n  selectedModule: ChannelType = ChannelType.none;\n\n  private availableChannels!: Map<number, Map<ChannelType, ChannelValue[]>>;\n  channels: ChannelValue[];\n  selectedChannel = -1;\n  selectedChannels: unknown[] = [];\n\n  constructor() {\n    super();\n\n    this.errorMessage = '';\n\n    this.modules = new Map<ChannelType, string>();\n    this.channels = new Array<ChannelValue>();\n  }\n\n  ngOnInit(): void {\n    this.controllers = this.resources.get(\n      ControllerModalResources.controllers,\n    ) as Map<number, LocationDetails>;\n    this.availableModules = this.resources.get(\n      ControllerModalResources.modules,\n    ) as Map<number, Map<ChannelType, string>>;\n    this.availableChannels = this.resources.get(\n      ControllerModalResources.channels,\n    ) as Map<number, Map<ChannelType, ChannelValue[]>>;\n  }\n\n  modalChange($event: Event) {\n    // convert from string value to number for enum\n    if (($event.target as HTMLInputElement).id === 'controller-select') {\n      this.setModules(+($event.target as HTMLInputElement).value);\n    } else if (($event.target as HTMLInputElement).id === 'module-select') {\n      this.setChannels(+($event.target as HTMLInputElement).value);\n    }\n  }\n\n  addChannel() {\n    if (\n      +this.selectedController !== 4 &&\n      +this.selectedModule === ChannelType.none\n    ) {\n      this.errorMessage = 'Module Selection Required';\n      return;\n    }\n\n    if (\n      +this.selectedModule !== ChannelType.none &&\n      +this.selectedChannels.length < 1\n    ) {\n      this.errorMessage = 'Channel Selection Required';\n      return;\n    }\n\n    const evt = new ModalCallbackEvent(\n      ControllerModalResources.addChannelEvent,\n      {\n        controller: +this.selectedController,\n        module:\n          +this.selectedController === 4\n            ? ChannelType.audio\n            : +this.selectedModule,\n        channels: this.selectedChannels,\n      },\n    );\n\n    this.modalCallback.emit(evt);\n    this.clearOptions();\n  }\n\n  closeModal() {\n    this.clearOptions();\n    const evt = new ModalCallbackEvent(\n      ControllerModalResources.closeEvent,\n      null,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  private clearOptions() {\n    this.selectedController = 0;\n    this.selectedModule = ChannelType.none;\n    this.selectedChannel = -1;\n    document\n      .getElementById('module-select')\n      ?.setAttribute('disabled', 'disabled');\n    document\n      .getElementById('channel-select')\n      ?.setAttribute('disabled', 'disabled');\n  }\n\n  private setModules(controllerId: number) {\n    if (controllerId === 4) {\n      this.selectedModule = ChannelType.none;\n      this.selectedChannel = -1;\n      document\n        .getElementById('module-select')\n        ?.setAttribute('disabled', 'disabled');\n      document\n        .getElementById('channel-select')\n        ?.setAttribute('disabled', 'disabled');\n    } else {\n      const mods = this.availableModules.get(+this.selectedController);\n      if (mods) {\n        this.modules = mods;\n        document.getElementById('module-select')?.removeAttribute('disabled');\n        //this.selectedModule = ChannelType.none;\n        this.setChannels(this.selectedModule);\n      }\n    }\n  }\n\n  private setChannels(channelType: ChannelType) {\n    if (channelType === ChannelType.none) {\n      this.selectedChannel = -1;\n      document\n        .getElementById('channel-select')\n        ?.setAttribute('disabled', 'disabled');\n    } else {\n      const chs = this.availableChannels\n        .get(+this.selectedController)\n        ?.get(+channelType);\n      if (chs) {\n        this.channels = chs;\n        document.getElementById('channel-select')?.removeAttribute('disabled');\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "channels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "controller",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DeleteConfirmEvent",
            "id": "interface-DeleteConfirmEvent-ea66dc5055f81da7e925de2cc813ed1330d227a50e1b249b5688e5f7e1992487e5f82b6e1aeba8f1aabe15fb87bb2ac43e18f6cafc41805a51df4ae17b37cf2c",
            "file": "src/app/pages/audio-files/audio-files.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { faPlay, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { AudioFile } from 'astros-common';\nimport { AudioService } from 'src/app/services/audio/audio.service';\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\nimport { NgFor, DatePipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport {\n  ModalComponent,\n  ConfirmModalComponent,\n  ConfirmModalResources,\n} from '@src/components/modals';\nimport {\n  UploadModalComponent,\n  UploadModalResources,\n} from '@src/components/modals/utility';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { ModalService } from '@src/services';\n\ninterface DeleteConfirmEvent {\n  id: string;\n  val: string;\n}\n\n@Component({\n  selector: 'app-audio-files',\n  templateUrl: './audio-files.component.html',\n  styleUrls: ['./audio-files.component.scss'],\n  imports: [NgFor, FontAwesomeModule, ModalComponent, DatePipe],\n})\nexport class AudioFilesComponent implements OnInit {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  faTrash = faTrash;\n  faPlay = faPlay;\n\n  audioFiles: AudioFile[];\n\n  constructor(\n    private snackBar: SnackbarService,\n    private modalService: ModalService,\n    private audioService: AudioService,\n  ) {\n    this.audioFiles = new Array<AudioFile>();\n  }\n\n  ngOnInit(): void {\n    const observer = {\n      next: (result: AudioFile[]) => (this.audioFiles = result),\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.audioService.getAudioFiles().subscribe(observer);\n  }\n\n  playFile(_: string) {\n    this.snackBar.okToast('TODO: impelement this!');\n  }\n\n  uploadFile() {\n    this.container.clear();\n\n    const component = this.container.createComponent(UploadModalComponent);\n\n    const modalResources = new Map<string, unknown>();\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.modalService.open('audio-files-modal');\n  }\n\n  removeFile(id: string) {\n    this.container.clear();\n\n    const idx = this.audioFiles\n      .map((f) => {\n        return f.id;\n      })\n      .indexOf(id);\n\n    const fileName = this.audioFiles[idx].fileName;\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ConfirmModalResources.action, 'Confirm Delete');\n    modalResources.set(\n      ConfirmModalResources.message,\n      `Are you sure you want to delete ${fileName}?`,\n    );\n    modalResources.set(ConfirmModalResources.confirmEvent, {\n      id: 'audiofile_delete',\n      val: id,\n    });\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.modalService.open('audio-files-modal');\n  }\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ConfirmModalResources.confirmEvent: {\n        const val = evt.value as DeleteConfirmEvent;\n        if (val.id === 'audiofile_delete') {\n          this.remove(val.val as string);\n        }\n        break;\n      }\n      case UploadModalResources.refreshEvent:\n        this.refreshAudioFiles();\n        break;\n    }\n\n    this.modalService.close('audio-files-modal');\n    this.container.clear();\n  }\n\n  refreshAudioFiles() {\n    const observer = {\n      next: (result: AudioFile[]) => (this.audioFiles = result),\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.audioService.getAudioFiles().subscribe(observer);\n  }\n\n  remove(id: string) {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'success' in result) {\n          if (result.success) {\n            const idx = this.audioFiles\n              .map((f) => {\n                return f.id;\n              })\n              .indexOf(id);\n\n            this.audioFiles.splice(idx, 1);\n\n            this.snackBar.okToast('File deleted!');\n          } else {\n            this.snackBar.okToast('File delete failed!');\n          }\n        }\n      },\n      error: (err: unknown) => {\n        this.snackBar.okToast('File delete failed!');\n        console.error(err);\n      },\n    };\n\n    this.audioService.removeAudioFile(id).subscribe(observer);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DeleteConfirmEvent",
            "id": "interface-DeleteConfirmEvent-3b69b6f06edb3c0ba7a6fbdc813ebead45fc1f42ab01bc77de5cf89c37b8b4f374b4dcb11bd31bd5620f8880f5c762ad42d2b68b03e52d9a0a8485a77db5a3b3-1",
            "file": "src/app/pages/scripts/scripts.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  AfterViewChecked,\n} from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';\nimport {\n  faCopy,\n  faPlay,\n  faTrash,\n  faUpload,\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  ScriptResponse,\n  TransmissionStatus,\n  TransmissionType,\n  UploadStatus,\n  Script,\n} from 'astros-common';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { NgFor } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport {\n  ModalComponent,\n  ConfirmModalComponent,\n  ConfirmModalResources,\n} from '@src/components/modals';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { ModalService } from '@src/services';\n\ninterface DeleteConfirmEvent {\n  id: string;\n  val: string;\n}\n\n@Component({\n  selector: 'app-scripts',\n  templateUrl: './scripts.component.html',\n  styleUrls: ['./scripts.component.scss'],\n  imports: [NgFor, RouterLink, FontAwesomeModule, ModalComponent],\n})\nexport class ScriptsComponent implements OnInit, AfterViewChecked {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  private initialStatusSet = false;\n\n  faTrash = faTrash;\n  faUpload = faUpload;\n  faRun = faPlay;\n  faCopy = faCopy;\n\n  _scripts: Script[] = new Array<Script>();\n\n  scripts: Script[];\n\n  locationMap = new Map<number, string>([\n    [1, 'body'],\n    [2, 'core'],\n    [3, 'dome'],\n  ]);\n\n  constructor(\n    private router: Router,\n    private scriptService: ScriptsService,\n    private socket: WebsocketService,\n    private snackBarService: SnackbarService,\n    private modalService: ModalService,\n  ) {\n    this.scripts = new Array<Script>();\n\n    this.socket.messages.subscribe((msg: unknown) => {\n      if (msg && typeof msg === 'object' && 'type' in msg)\n        if (msg.type === TransmissionType.script) {\n          this.statusUpdate(msg as ScriptResponse);\n        }\n    });\n  }\n\n  ngOnInit(): void {\n    const observer = {\n      next: (result: Script[]) => {\n        this.scripts = result.sort((a, b) => {\n          if (a.scriptName > b.scriptName) {\n            return 1;\n          }\n          if (a.scriptName < b.scriptName) {\n            return -1;\n          }\n          return 0;\n        });\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.scriptService.getAllScripts().subscribe(observer);\n  }\n\n  ngAfterViewChecked() {\n    if (this.initialStatusSet) {\n      return;\n    }\n    if (this.scripts.length === 0) {\n      return;\n    }\n\n    for (const script of this.scripts) {\n      this.updateUploadStatusElement('body', 1, script.id);\n      this.updateUploadStatusElement('core', 2, script.id);\n      this.updateUploadStatusElement('dome', 3, script.id);\n    }\n\n    this.initialStatusSet = true;\n  }\n\n  updateUploadStatusElement(\n    element: string,\n    locationId: number,\n    scriptId: string,\n  ): void {\n    const el = document.getElementById(`${scriptId}_${element}`);\n    if (el === null) {\n      return;\n    }\n    const status = this.getUploadStatus(scriptId, locationId);\n    el.classList.remove('uploaded');\n    el.classList.remove('notuploaded');\n    el.classList.remove('uploading');\n    el.classList.add(status.s);\n\n    const toolTip = document.getElementById(`${scriptId}_${element}_tooltip`);\n    if (toolTip === null) {\n      return;\n    }\n    toolTip.innerText = status.d;\n  }\n\n  setUploadingStatus(scriptId: string): void {\n    const script = this.getScript(scriptId);\n\n    if (!script) {\n      return;\n    }\n\n    for (const location of this.locationMap.entries()) {\n      if (\n        script.deploymentStatusKvp\n          .map((s) => {\n            return s.key;\n          })\n          .indexOf(location[0].toString()) > -1\n      ) {\n        const el = document.getElementById(`${scriptId}_${location[1]}`);\n        if (el === null) {\n          continue;\n        }\n        el.classList.remove('uploaded');\n        el.classList.remove('notuploaded');\n        el.classList.add('uploading');\n\n        const toolTip = document.getElementById(\n          `${scriptId}_${location}_tooltip`,\n        );\n        if (toolTip === null) {\n          continue;\n        }\n        toolTip.innerText = 'Uploading...';\n      }\n    }\n  }\n\n  newScript() {\n    this.router.navigate(['scripter', '0']);\n  }\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ConfirmModalResources.confirmEvent: {\n        {\n          const evtData = evt.value as DeleteConfirmEvent;\n          if (evtData.id === 'script_delete') {\n            this.removeFile(evtData.val);\n          }\n          break;\n        }\n      }\n    }\n\n    this.modalService.close('scripts-modal');\n    this.container.clear();\n  }\n\n  removeClicked(id: string) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ConfirmModalResources.action, 'Delete');\n    modalResources.set(\n      ConfirmModalResources.message,\n      `Are you sure you want to delete script?`,\n    );\n    modalResources.set(ConfirmModalResources.confirmEvent, {\n      id: 'script_delete',\n      val: id,\n    });\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.modalService.open('scripts-modal');\n  }\n\n  removeFile(id: string) {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    this.scripts.splice(idx, 1);\n\n    this.scriptService.deleteScript(id).subscribe();\n  }\n\n  runClicked(id: string) {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    const observer = {\n      next: (result: unknown) => {\n        console.log(result);\n        this.snackBarService.okToast('Script run queued!');\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBarService.okToast('Error requesting upload. Check logs.');\n      },\n    };\n\n    this.scriptService.runScript(id).subscribe(observer);\n  }\n\n  copyClicked(id: string) {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    const observer = {\n      next: (result: Script) => {\n        if (result === undefined) {\n          this.snackBarService.okToast('Error copying script. Check logs.');\n        } else {\n          this.scripts.push(result);\n\n          this.scripts.sort((a, b) => {\n            if (a.scriptName > b.scriptName) {\n              return 1;\n            }\n            if (a.scriptName < b.scriptName) {\n              return -1;\n            }\n            return 0;\n          });\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBarService.okToast('Error copying script. Check logs.');\n      },\n    };\n\n    this.scriptService.copyScript(id).subscribe(observer);\n  }\n\n  uploadClicked(id: string) {\n    const observer = {\n      next: (result: unknown) => console.log(result),\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBarService.okToast('Error requesting upload. Check logs.');\n      },\n    };\n\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    this.scriptService.uploadScript(id).subscribe(observer);\n    this.setUploadingStatus(id);\n  }\n\n  statusUpdate(msg: ScriptResponse) {\n    if (msg.status === TransmissionStatus.success) {\n      this.setUploadDate(msg.scriptId, msg.locationId, msg.date);\n    }\n\n    this.updateUploadStatusElement(\n      this.locationMap.get(msg.locationId) as string,\n      msg.locationId,\n      msg.scriptId,\n    );\n  }\n\n  getUploadStatus(id: string, locationId: number): { s: string; d: string } {\n    let dateString = 'Not Uploaded';\n\n    const script = this.getScript(id);\n\n    if (!script) {\n      return { s: 'notuploaded', d: dateString };\n    }\n\n    const sidx = script.deploymentStatusKvp\n      .map((s) => {\n        return s.key;\n      })\n      .indexOf(locationId.toString());\n\n    if (sidx < 0) {\n      return { s: 'notuploaded', d: dateString };\n    }\n\n    const kvp = script.deploymentStatusKvp[sidx];\n    let uploadStatus = kvp.value.value;\n\n    if (kvp.value.date) {\n      const uploaddate = new Date(kvp.value.date);\n      const scriptdate = new Date(script.lastSaved);\n      if (uploaddate < scriptdate) {\n        uploadStatus = UploadStatus.notUploaded;\n        dateString = ' Out of date ';\n      } else {\n        dateString = uploaddate.toLocaleDateString(navigator.language, {\n          year: 'numeric',\n          month: 'numeric',\n          day: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric',\n        });\n      }\n    }\n\n    return { s: this.getUploadStatusClass(uploadStatus), d: dateString };\n  }\n\n  getUploadStatusClass(status: UploadStatus) {\n    switch (status) {\n      case UploadStatus.notUploaded:\n        return 'notuploaded';\n      case UploadStatus.uploading:\n        return 'uploading';\n      case UploadStatus.uploaded:\n        return 'uploaded';\n      default:\n        return 'notuploaded';\n    }\n  }\n\n  setUploadDate(id: string, controllerId: number, date: Date): void {\n    const script = this.getScript(id);\n\n    if (!script) {\n      return;\n    }\n\n    const sidx = script.deploymentStatusKvp\n      .map((s) => {\n        return s.key;\n      })\n      .indexOf(controllerId.toString());\n\n    if (sidx < 0) {\n      return;\n    }\n\n    script.deploymentStatusKvp[sidx].value.date = date;\n  }\n\n  getScript(id: string): Script | undefined {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return undefined;\n    }\n\n    return this.scripts[idx];\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DeleteConfirmEvent-1"
        },
        {
            "name": "HcrCommandListItem",
            "id": "interface-HcrCommandListItem-215458fed2e1d5efeb5cd27ccb04f03a08fbf38384e9d32cac645f126b90e333041ae4774139effc91d90fc64cfee34e3d18fdb04c5c2d859f93fe8b6c510ef8",
            "file": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport {\n  HcrCommand,\n  HcrCommandCategory,\n  HumanCyborgRelationsCmd,\n  HumanCyborgRelationsEvent,\n  HumanCyborgRelationsModule,\n  ScriptEvent,\n} from 'astros-common';\nimport { faBan } from '@fortawesome/free-solid-svg-icons';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, DecimalPipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\ninterface HcrCommandListItem {\n  id: HumanCyborgRelationsCmd;\n  name: string;\n}\n\nexport class HcrModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-human-cyborg-modal',\n  templateUrl: './human-cyborg-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './human-cyborg-modal.component.scss',\n  ],\n  imports: [FormsModule, NgFor, FontAwesomeModule, DecimalPipe],\n})\nexport class HumanCyborgModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  faRemove = faBan;\n\n  uartChannel!: number;\n  baudRate!: number;\n  commandCategory: string;\n  command!: string;\n  valueA!: string;\n  valueB!: string;\n\n  selectedCommands: HcrCommand[];\n  commands: HcrCommandListItem[];\n\n  hasValueA: HumanCyborgRelationsCmd[];\n  hasValueB: HumanCyborgRelationsCmd[];\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.selectedCommands = new Array<HcrCommand>();\n    this.commands = new Array<HcrCommandListItem>();\n    this.commandCategory = HcrCommandCategory.stimuli.toString();\n    this.setAvailableCommands(+this.commandCategory);\n\n    this.hasValueA = new Array<HumanCyborgRelationsCmd>();\n    this.hasValueA.push(\n      HumanCyborgRelationsCmd.minSecondsBetweenMusings,\n      HumanCyborgRelationsCmd.maxSecondsBetweenMusings,\n      HumanCyborgRelationsCmd.playWavOnA,\n      HumanCyborgRelationsCmd.playWavOnB,\n      HumanCyborgRelationsCmd.vocalizerVolume,\n      HumanCyborgRelationsCmd.wavAVolume,\n      HumanCyborgRelationsCmd.wavBVolume,\n      HumanCyborgRelationsCmd.setHappyLevel,\n      HumanCyborgRelationsCmd.setSadLevel,\n      HumanCyborgRelationsCmd.setMadLevel,\n      HumanCyborgRelationsCmd.setScaredLevel,\n    );\n\n    this.hasValueB = new Array<HumanCyborgRelationsCmd>();\n    this.hasValueB.push(\n      HumanCyborgRelationsCmd.playSdRandomOnA,\n      HumanCyborgRelationsCmd.playSdRandomOnB,\n    );\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      HcrModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(HcrModalResources.baudRate) as number;\n    this.scriptEvent = this.resources.get(\n      HcrModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.selectedCommands.push(...payload.commands);\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  categoryChange(_: unknown) {\n    this.errorMessage = '';\n    this.setAvailableCommands(+this.commandCategory);\n  }\n\n  commandChange(_: unknown) {\n    this.errorMessage = '';\n    if (this.hcrHasBValue(+this.command)) {\n      document.getElementById('value-a')?.removeAttribute('disabled');\n      document.getElementById('value-b')?.removeAttribute('disabled');\n      return;\n    }\n    if (this.hcrHasAValue(+this.command)) {\n      document.getElementById('value-a')?.removeAttribute('disabled');\n      document.getElementById('value-b')?.setAttribute('disabled', 'disabled');\n      return;\n    }\n\n    document.getElementById('value-a')?.setAttribute('disabled', 'disabled');\n    document.getElementById('b')?.setAttribute('disabled', 'disabled');\n  }\n\n  setAvailableCommands(category: HcrCommandCategory) {\n    this.commands.splice(0);\n\n    switch (category) {\n      case HcrCommandCategory.stimuli:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.mildHappy),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeHappy),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildSad),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeSad),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildAngry),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeAngry),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildScared),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeScared),\n          this.hcrListItem(HumanCyborgRelationsCmd.overload),\n        );\n        break;\n      case HcrCommandCategory.muse:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.enableMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.disableMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.toggleMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.triggerMusing),\n          this.hcrListItem(HumanCyborgRelationsCmd.minSecondsBetweenMusings),\n          this.hcrListItem(HumanCyborgRelationsCmd.maxSecondsBetweenMusings),\n        );\n        break;\n      case HcrCommandCategory.sdWav:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnB),\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnB),\n        );\n        break;\n      case HcrCommandCategory.stop:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.panicStop),\n          this.hcrListItem(HumanCyborgRelationsCmd.gracefulStop),\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnB),\n        );\n        break;\n      case HcrCommandCategory.volume:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.vocalizerVolume),\n          this.hcrListItem(HumanCyborgRelationsCmd.wavAVolume),\n          this.hcrListItem(HumanCyborgRelationsCmd.wavBVolume),\n        );\n        break;\n      case HcrCommandCategory.override:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.enableImprov),\n          this.hcrListItem(HumanCyborgRelationsCmd.enableCanonical),\n          this.hcrListItem(HumanCyborgRelationsCmd.enablePersonalityOverride),\n          this.hcrListItem(HumanCyborgRelationsCmd.disablePersonalityOverride),\n          this.hcrListItem(HumanCyborgRelationsCmd.zeroEmotions),\n          this.hcrListItem(HumanCyborgRelationsCmd.setHappyLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setSadLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setMadLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setScaredLevel),\n        );\n        break;\n    }\n\n    if (this.commands.length > 0) {\n      this.command = this.commands[0].id.toString();\n    }\n  }\n\n  addCommand() {\n    let missingA = false;\n    let missingB = false;\n\n    if (this.hcrHasBValue(+this.command)) {\n      if (this.valueA === undefined || this.valueA === null) {\n        missingA = true;\n      }\n      if (this.valueB === undefined || this.valueB === null) {\n        missingB = true;\n      }\n    }\n\n    if (this.hcrHasAValue(+this.command)) {\n      if (this.valueA === undefined || this.valueA === null) {\n        missingA = true;\n      }\n    }\n\n    if (missingA || missingB) {\n      this.errorMessage = `Required Values Missing: ${missingA ? 'A' : ''}${missingA && missingB ? ',' : ''}${missingB ? 'B' : ''}`;\n      return;\n    }\n\n    this.selectedCommands.push(\n      new HcrCommand(\n        crypto.randomUUID().toString(),\n        +this.commandCategory,\n        +this.command,\n        +this.valueA,\n        +this.valueB,\n      ),\n    );\n  }\n\n  removeCommand(id: string) {\n    const cmdIdx = this.selectedCommands?.findIndex((x) => x.id === id);\n    if (cmdIdx != undefined && cmdIdx > -1) {\n      this.selectedCommands.splice(cmdIdx, 1);\n    }\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new HumanCyborgRelationsEvent(\n      this.uartChannel,\n      this.baudRate,\n      this.selectedCommands,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  formatSelectedCommand(cmd: HcrCommand) {\n    if (this.hcrHasBValue(cmd.command)) {\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA} ${cmd.valueB}`;\n    }\n\n    if (this.hcrHasAValue(cmd.command)) {\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA}`;\n    }\n\n    return this.hcrName(cmd.command);\n  }\n\n  hcrListItem(cmd: HumanCyborgRelationsCmd) {\n    return { id: cmd, name: this.hcrName(cmd) };\n  }\n\n  hcrName(cmd: HumanCyborgRelationsCmd) {\n    return HumanCyborgRelationsModule.getCommandName(cmd);\n  }\n\n  hcrHasBValue(cmd: HumanCyborgRelationsCmd) {\n    return this.hasValueB.find((x) => x === cmd) !== undefined;\n  }\n\n  hcrHasAValue(cmd: HumanCyborgRelationsCmd) {\n    return this.hasValueA.find((x) => x === cmd) !== undefined;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HumanCyborgRelationsCmd",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Item",
            "id": "interface-Item-b48fba02d8a7ccd79c6e6844ec3cf63aa79a3da33c26abbff668643799d7fc14fe741c3002e843fd3fb03d099e712114ead29b606f3b68b3f4107d5edaa2108a",
            "file": "src/app/pages/scripter/scripter.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewChecked,\n  Component,\n  ComponentRef,\n  OnInit,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  MatMenuTrigger,\n  MatMenu,\n  MatMenuContent,\n  MatMenuItem,\n} from '@angular/material/menu';\nimport { ActivatedRoute } from '@angular/router';\nimport { Guid } from 'guid-typescript';\nimport { ScriptResources } from 'src/app/models/script-resources';\nimport {\n  ChannelSubType,\n  ChannelType,\n  AstrOsLocationCollection,\n  Script,\n  ScriptChannel,\n  ScriptEvent,\n  ControllerLocation,\n  BaseChannel,\n} from 'astros-common';\nimport EventMarkerHelper from './helper/event-marker-helper';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor } from '@angular/common';\nimport { ScriptRowComponent } from './script-row/script-row.component';\nimport {\n  AudioEventModalComponent,\n  ChannelTestModalComponent,\n  ChannelTestModalResources,\n  ChannelTestModalResponse,\n  ControllerModalComponent,\n  ControllerModalResources,\n  ControllerModalResponse,\n  GpioEventModalComponent,\n  GpioEventModalResources,\n  HcrModalResources,\n  HumanCyborgModalComponent,\n  I2cEventModalComponent,\n  I2cEventModalResources,\n  KangarooEventModalComponent,\n  KangarooEventModalResources,\n  ScriptEventModalResources,\n  ScriptEventModalResponse,\n  ScriptTestModalComponent,\n  ScriptTestModalResources,\n  UartEventModalComponent,\n  UartEventModalResources,\n} from '@src/components/modals/scripting';\nimport {\n  ControllerService,\n  ModalService,\n  ScriptsService,\n  SnackbarService,\n} from '@src/services';\nimport {\n  ConfirmModalComponent,\n  ConfirmModalEvent,\n  ConfirmModalResources,\n  ModalComponent,\n} from '@src/components/modals';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\n\nexport interface Item {\n  timeline: string;\n  xPos: number;\n}\n\ntype ScripterModal =\n  | UartEventModalComponent\n  | KangarooEventModalComponent\n  | I2cEventModalComponent\n  | AudioEventModalComponent\n  | GpioEventModalComponent\n  | HumanCyborgModalComponent;\n\n@Component({\n  selector: 'app-scripter',\n  templateUrl: './scripter.component.html',\n  styleUrls: ['./scripter.component.scss'],\n  imports: [\n    FormsModule,\n    NgFor,\n    ScriptRowComponent,\n    MatMenuTrigger,\n    MatMenu,\n    MatMenuContent,\n    MatMenuItem,\n    ModalComponent,\n  ],\n})\nexport class ScripterComponent implements OnInit, AfterViewChecked {\n  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;\n\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  private segmentWidth = 60;\n  private segments = 3000;\n  private segmentFactor = 10;\n  private scriptId: string;\n  private resourcesLoaded = false;\n  private renderedEvents = false;\n  private characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  private removeChannelEvent = 'scripter_removeChannel';\n\n  backgroundClickDisabled = '0';\n\n  script!: Script;\n  scriptChannels: ScriptChannel[];\n\n  timeLineArray: number[];\n  menuTopLeft = { x: 0, y: 0 };\n\n  scriptResources!: ScriptResources;\n\n  components: unknown[];\n\n  constructor(\n    private route: ActivatedRoute,\n    private snackBar: SnackbarService,\n    private modalService: ModalService,\n    private renderer: Renderer2,\n    private controllerService: ControllerService,\n    private scriptService: ScriptsService,\n  ) {\n    this.scriptId = this.route.snapshot.paramMap.get('id') ?? '0';\n\n    this.timeLineArray = Array.from(\n      { length: this.segments },\n      (_, i) => (i + 1) / this.segmentFactor,\n    );\n\n    this.scriptChannels = new Array<ScriptChannel>();\n    this.components = new Array<unknown>();\n  }\n\n  ngAfterViewChecked(): void {\n    // \"this\" needs to exist before we render events\n    if (!this.renderedEvents) {\n      if (this.script != undefined) {\n        for (const ch of this.script.scriptChannels) {\n          for (const kvp of ch.eventsKvpArray) {\n            this.renderEvent(kvp.value);\n          }\n        }\n        this.renderedEvents = true;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    const csObserver = {\n      next: (result: AstrOsLocationCollection) => {\n        const modules = new Array<ControllerLocation>();\n\n        if (result.domeModule) modules.push(result.domeModule);\n        if (result.coreModule) modules.push(result.coreModule);\n        if (result.bodyModule) modules.push(result.bodyModule);\n\n        this.scriptResources = new ScriptResources(modules);\n        this.resourcesLoaded = true;\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.getLoadedLocations().subscribe(csObserver);\n\n    if (this.scriptId === '0') {\n      this.scriptId = this.generateScriptId(5);\n      console.log(`new script id:${this.scriptId}`);\n      this.script = new Script(\n        this.scriptId,\n        '',\n        '',\n        new Date(Date.parse('1970-01-01 00:00:00.000')),\n      );\n\n      this.scriptChannels = this.script.scriptChannels;\n    } else {\n      const ssObserver = {\n        next: async (result: Script) => {\n          for (const ch of result.scriptChannels) {\n            ch.events = new Map<number, ScriptEvent>();\n\n            for (const kvp of ch.eventsKvpArray) {\n              ch.events.set(kvp.key, kvp.value);\n            }\n          }\n\n          this.script = result;\n\n          this.scriptChannels = this.script.scriptChannels;\n\n          this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\n\n          if (!this.resourcesLoaded) {\n            await new Promise((f) => setTimeout(f, 1000));\n          }\n\n          this.scriptResources.applyScript(this.script);\n        },\n        error: (err: unknown) => console.error(err),\n      };\n\n      this.scriptService.getScript(this.scriptId).subscribe(ssObserver);\n    }\n  }\n\n  saveScript() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('script settings saved!');\n            this.snackBar.okToast('Script settings saved!');\n          }\n        } else {\n          console.log('script settings save failed!');\n          this.snackBar.okToast('Script settings save failed!');\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Script settings save failed!');\n      },\n    };\n\n    // Maps don't survive JSON.stringify\n    for (const ch of this.script.scriptChannels) {\n      ch.eventsKvpArray = [];\n\n      for (const key of ch.events.keys()) {\n        const val = ch.events.get(key);\n        if (val !== undefined) {\n          ch.eventsKvpArray.push({ key: key, value: val });\n        }\n      }\n    }\n\n    this.scriptService.saveScript(this.script).subscribe(observer);\n  }\n\n  //#region testing methods\n\n  openScriptTestModal() {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    modalResources.set(ScriptTestModalResources.scriptId, this.scriptId);\n\n    const locations = new Array<string>();\n\n    this.script.deploymentStatusKvp.forEach((kvp) => {\n      locations.push(kvp.key);\n    });\n\n    modalResources.set(ScriptTestModalResources.locations, locations);\n\n    const component = this.container.createComponent(ScriptTestModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.components.push(component);\n\n    this.backgroundClickDisabled = '1';\n\n    this.modalService.open('scripter-modal');\n  }\n\n  saveBeforeTest() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('script settings saved!');\n            this.openScriptTestModal();\n          }\n        } else {\n          console.log('script settings save failed!');\n          this.snackBar.okToast('Script settings save failed!');\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Script settings save failed!');\n      },\n    };\n\n    // Maps don't survive JSON.stringify\n    for (const ch of this.script.scriptChannels) {\n      ch.eventsKvpArray = [];\n\n      for (const key of ch.events.keys()) {\n        const val = ch.events.get(key);\n        if (val !== undefined) {\n          ch.eventsKvpArray.push({ key: key, value: val });\n        }\n      }\n    }\n\n    this.scriptService.saveScript(this.script).subscribe(observer);\n  }\n\n  sendChannelTest(\n    controllerId: number,\n    commandType: ChannelType,\n    command: unknown,\n  ) {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('Test command sent!');\n            this.snackBar.okToast('Test command sent!');\n          }\n        } else {\n          console.log('Test command send failed!');\n          this.snackBar.okToast('Test command send failed!');\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Test command send failed!');\n      },\n    };\n\n    this.controllerService\n      .sendControllerCommand(controllerId, commandType, command)\n      .subscribe(observer);\n  }\n\n  //#endregion\n\n  openChannelAddModalKbd($event: KeyboardEvent) {\n    if (\n      $event.key === 'a' ||\n      $event.key === 'A' ||\n      $event.key === 'Enter' ||\n      $event.key === ' '\n    ) {\n      this.openChannelAddModal();\n    }\n  }\n\n  openChannelAddModal() {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    modalResources.set(\n      ControllerModalResources.controllers,\n      this.scriptResources.locations,\n    );\n    modalResources.set(\n      ControllerModalResources.modules,\n      this.scriptResources.getAvailableModules(),\n    );\n    modalResources.set(\n      ControllerModalResources.channels,\n      this.scriptResources.getAvailableChannels(),\n    );\n\n    const component = this.container.createComponent(ControllerModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.components.push(component);\n\n    this.modalService.open('scripter-modal');\n  }\n\n  openNewEventModal(evt: unknown) {\n    let time = 0;\n\n    if (evt && typeof evt === 'object' && 'timeline' in evt && 'xPos' in evt) {\n      const line = document.getElementById(`script-row-${evt.timeline}`);\n      const scrollContainer = document.getElementById('scripter-container');\n\n      if (line != null && scrollContainer != null) {\n        const clickPos =\n          (evt.xPos as number) + scrollContainer.scrollLeft - line.offsetLeft;\n\n        time = Math.floor(clickPos / this.segmentWidth);\n\n        const left = time * this.segmentWidth;\n\n        if (Math.floor(clickPos) - left >= 30) {\n          time += 1;\n        }\n      } else {\n        this.snackBar.okToast('Could not determine event time!');\n        console.log('could not determine event time');\n        return;\n      }\n\n      const chIdx = this.scriptChannels\n        .map((ch) => {\n          return ch.id;\n        })\n        .indexOf(evt.timeline as string);\n\n      const ch = this.scriptChannels[chIdx];\n\n      const event = new ScriptEvent(ch.id, ch.type, ch.subType, time, '');\n\n      this.createEventModal(event, false);\n    }\n  }\n\n  openEditEventModal(channelId: string, time: number) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    if (chIdx > -1) {\n      const event = this.scriptChannels[chIdx].events.get(time);\n\n      if (event) {\n        this.createEventModal(event, true);\n      }\n    }\n  }\n\n  createEventModal(event: ScriptEvent, isEdit: boolean) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ScriptEventModalResources.scriptEvent, event);\n\n    if (isEdit) {\n      modalResources.set(\n        ScriptEventModalResources.callbackType,\n        ScriptEventModalResources.editEvent,\n      );\n    }\n\n    let component!: ComponentRef<ScripterModal>;\n\n    switch (event.channelType) {\n      case ChannelType.uart:\n        switch (event.channelSubType) {\n          case ChannelSubType.genericSerial:\n            component = this.container.createComponent(UartEventModalComponent);\n            modalResources.set(\n              UartEventModalResources.channelId,\n              this.getUartChannelFromChannel(event.scriptChannel),\n            );\n            break;\n          case ChannelSubType.kangaroo:\n            component = this.container.createComponent(\n              KangarooEventModalComponent,\n            );\n            modalResources.set(\n              KangarooEventModalResources.channelId,\n              this.getUartChannelFromChannel(event.scriptChannel),\n            );\n            modalResources.set(\n              KangarooEventModalResources.kangaroo,\n              this.getKangarooControllerFromChannel(event.scriptChannel),\n            );\n            break;\n          case ChannelSubType.humanCyborgRelations:\n            component = this.container.createComponent(\n              HumanCyborgModalComponent,\n            );\n            modalResources.set(\n              HcrModalResources.channelId,\n              this.getUartChannelFromChannel(event.scriptChannel),\n            );\n            break;\n        }\n        break;\n      case ChannelType.i2c:\n        component = this.container.createComponent(I2cEventModalComponent);\n        modalResources.set(\n          I2cEventModalResources.i2cId,\n          this.getIdFromChannel(event.scriptChannel),\n        );\n        break;\n      /* case ChannelType.servo:\n         component = this.container.createComponent(ServoEventModalComponent);\n         modalResources.set(ModalResources.servoId, this.getIdFromChannel(event.scriptChannel))\n         break; */\n      case ChannelType.audio:\n        component = this.container.createComponent(AudioEventModalComponent);\n        break;\n      case ChannelType.gpio:\n        component = this.container.createComponent(GpioEventModalComponent);\n        modalResources.set(\n          GpioEventModalResources.gpioId,\n          this.getIdFromChannel(event.scriptChannel),\n        );\n        break;\n    }\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.components.push(component);\n\n    this.modalService.open('scripter-modal');\n  }\n\n  //#region resources for modals\n\n  getUartChannelFromChannel(channelId: string) {\n    const _ = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    /*if (chIdx > -1) {\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\n      return uart.id;\n    }*/\n  }\n\n  getKangarooControllerFromChannel(channelId: string) {\n    const _ = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    /*if (chIdx > -1) {\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\n      return uart.module as KangarooController;\n    }*/\n  }\n\n  getIdFromChannel(channelId: string): number | null {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    if (chIdx > -1) {\n      const servo = this.scriptChannels[chIdx].channel as BaseChannel;\n      return servo.id;\n    }\n\n    return null;\n  }\n\n  //#endregion\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ControllerModalResources.addChannelEvent: {\n        const value = evt.value as ControllerModalResponse;\n        this.addChannel(value.controller, value.module, value.channels);\n        break;\n      }\n      case ConfirmModalResources.confirmEvent:\n        this.handleConfirmModalEvent(evt.value as ConfirmModalEvent);\n        break;\n      case ScriptEventModalResources.addEvent: {\n        this.addEvent(evt.value as ScriptEvent);\n        break;\n      }\n      case ScriptEventModalResources.editEvent: {\n        const value = evt.value as ScriptEventModalResponse;\n        this.editEvent(value.scriptEvent, value.time);\n        break;\n      }\n      case ScriptEventModalResources.removeEvent: {\n        const value = evt.value as ScriptEventModalResponse;\n        this.removeEvent(value.scriptEvent.scriptChannel, value.time);\n        break;\n      }\n      case ChannelTestModalResources.channelTest: {\n        const value = evt.value as ChannelTestModalResponse;\n        this.sendChannelTest(\n          value.controllerId,\n          value.commandType,\n          value.command,\n        );\n        break;\n      }\n    }\n\n    this.modalService.close('scripter-modal');\n    this.container.clear();\n    this.components.splice(0, this.components.length);\n    this.backgroundClickDisabled = '0';\n  }\n\n  handleConfirmModalEvent(evt: ConfirmModalEvent) {\n    switch (evt.id) {\n      case this.removeChannelEvent:\n        this.removeChannel(evt.val as string);\n        break;\n    }\n  }\n\n  //#region script row call backs\n\n  timelineCallback(msg: any) {\n    msg.event.preventDefault();\n\n    this.menuTopLeft.x = msg.event.clientX;\n    this.menuTopLeft.y = msg.event.clientY;\n\n    this.menuTrigger.menuData = {\n      item: { timeline: msg.id, xPos: msg.event.clientX },\n    };\n\n    this.menuTrigger.openMenu();\n  }\n\n  removeCallback(msg: string) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ConfirmModalResources.action, 'Delete');\n    modalResources.set(\n      ConfirmModalResources.message,\n      'Are you sure you want to delete channel?',\n    );\n    modalResources.set(ConfirmModalResources.confirmEvent, {\n      id: this.removeChannelEvent,\n      val: msg,\n    });\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.components.push(component);\n\n    this.modalService.open('scripter-modal');\n  }\n\n  private removeChannel(id: string) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(id);\n\n    if (chIdx !== undefined && chIdx > -1) {\n      const channel = this.scriptChannels[chIdx];\n\n      this.scriptChannels.splice(chIdx, 1);\n\n      this.scriptResources.removeChannel(\n        channel.locationId,\n        channel.type,\n        channel.channel?.id,\n      );\n\n      this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\n    }\n  }\n\n  channelTestCallback(msg: string) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(msg);\n\n    if (chIdx !== undefined && chIdx > -1) {\n      const ch = this.scriptChannels[chIdx];\n\n      this.container.clear();\n\n      const modalResources = new Map<string, unknown>();\n\n      modalResources.set(ChannelTestModalResources.channelType, ch.type);\n      modalResources.set(ChannelTestModalResources.channelSubType, ch.subType);\n      modalResources.set(ChannelTestModalResources.channelId, ch.channelNumber);\n      modalResources.set(ChannelTestModalResources.controller, ch.locationId);\n\n      const component = this.container.createComponent(\n        ChannelTestModalComponent,\n      );\n\n      component.instance.resources = modalResources;\n      component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n        this.modalCallback(evt);\n      });\n      this.components.push(component);\n\n      this.modalService.open('scripter-modal');\n    }\n  }\n\n  //#endregion\n\n  private addChannel(\n    locationId: string,\n    channelType: ChannelType,\n    channels: number[],\n  ): void {\n    let name = this.scriptResources.locations.get(locationId)?.name;\n\n    if (!name) {\n      name = '';\n    }\n\n    if (channelType === ChannelType.audio) {\n      const chValue = this.scriptResources.addChannel(\n        locationId,\n        channelType,\n        0,\n      );\n\n      const subType = 0;\n\n      if (chValue === undefined) {\n        return;\n      }\n\n      const ch = new ScriptChannel(\n        Guid.create().toString(),\n        this.scriptId,\n        locationId,\n        channelType,\n        subType,\n        0,\n        chValue,\n        this.segments,\n      );\n\n      this.scriptChannels.push(ch);\n    } else {\n      channels.forEach((channel) => {\n        const chValue = this.scriptResources.addChannel(\n          locationId,\n          channelType,\n          +channel,\n        );\n\n        if (chValue === undefined) {\n          return;\n        }\n        let subType = ChannelSubType.none;\n\n        if (channelType === ChannelType.uart) {\n          subType = chValue.subType;\n        }\n\n        const ch = new ScriptChannel(\n          Guid.create().toString(),\n          this.scriptId,\n          locationId,\n          channelType,\n          subType,\n          channel,\n          chValue,\n          this.segments,\n        );\n\n        this.scriptChannels.push(ch);\n      });\n    }\n\n    this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\n  }\n\n  private addEvent(event: ScriptEvent): void {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(event.scriptChannel);\n\n    this.scriptChannels[chIdx].events.set(event.time, event);\n\n    this.renderEvent(event);\n  }\n\n  private editEvent(event: ScriptEvent, oldTime: number) {\n    //if (event.time !== oldTime) {\n    this.removeEvent(event.scriptChannel, oldTime);\n    this.addEvent(event);\n    // }\n    // else {\n\n    //  const chIdx = this.scriptChannels\n    //    .map((ch) => { return ch.id })\n    //    .indexOf(event.scriptChannel);\n\n    //  this.scriptChannels[chIdx].events.set(event.time, event);\n    //}\n  }\n\n  private renderEvent(event: ScriptEvent) {\n    //channelId: string, time: number) {\n    const line = document.getElementById(`script-row-${event.scriptChannel}`);\n\n    const floater = this.renderer.createElement('div');\n    const displayText = EventMarkerHelper.generateText(event);\n\n    const line1 = this.renderer.createElement('div');\n    const line1txt = this.renderer.createText(displayText[0]);\n    this.renderer.appendChild(line1, line1txt);\n    this.renderer.appendChild(floater, line1);\n\n    const line2 = this.renderer.createElement('div');\n    const line2txt = this.renderer.createText(displayText[1]);\n    this.renderer.appendChild(line2, line2txt);\n    this.renderer.appendChild(floater, line2);\n\n    const line3 = this.renderer.createElement('div');\n    const line3txt = this.renderer.createText(displayText[2]);\n    this.renderer.appendChild(line3, line3txt);\n    this.renderer.appendChild(floater, line3);\n\n    const line4 = this.renderer.createElement('div');\n    const line4txt = this.renderer.createText(displayText[3]);\n    this.renderer.appendChild(line4, line4txt);\n    this.renderer.appendChild(floater, line4);\n\n    this.renderer.setAttribute(floater, 'class', 'scripter-timeline-marker');\n    this.renderer.setAttribute(\n      floater,\n      'id',\n      `event-${event.scriptChannel}-${event.time}`,\n    );\n    this.renderer.setStyle(floater, 'top', `-5px`);\n    this.renderer.setStyle(\n      floater,\n      'left',\n      `${event.time * this.segmentWidth - 37}px`,\n    );\n    this.renderer.listen(floater, 'click', (_) => {\n      this.openEditEventModal(event.scriptChannel, event.time);\n    });\n    this.renderer.appendChild(line, floater);\n  }\n\n  private removeEvent(channelId: string, time: number) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    this.scriptChannels[chIdx].events.delete(time);\n\n    const element = document.getElementById(`event-${channelId}-${time}`);\n    if (element) {\n      element.parentNode?.removeChild(element);\n    }\n  }\n\n  private channelCompare(a: ScriptChannel, b: ScriptChannel) {\n    let val = a.locationId.localeCompare(b.locationId);\n\n    if (val !== 0) {\n      return val;\n    }\n\n    val = a.type - b.type;\n\n    if (val !== 0) {\n      return val;\n    }\n\n    return a.channel.channelName < b.channel.channelName ? -1 : 1;\n  }\n\n  private generateScriptId(length: number): string {\n    let result = `s${Math.floor(Date.now() / 1000)}`;\n    const charactersLength = this.characters.length;\n    for (let i = 0; i < length; i++) {\n      result += this.characters.charAt(\n        Math.floor(Math.random() * charactersLength),\n      );\n    }\n    return result;\n  }\n}\n",
            "properties": [
                {
                    "name": "timeline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "xPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoadingModalResponse",
            "id": "interface-LoadingModalResponse-1b801c18d1dc893e0f1cad61bfddb45b9676fe106824bf0b108f8ba62f7addc396a30ea9ac66cc288f41e7334694ab85728ffa8e04bb562f438347589d083300",
            "file": "src/app/components/modals/modules/loading-modal/loading-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { ControllerService } from '@src/services';\nimport {\n  AstrOsLocationCollection,\n  ControllersResponse,\n  ControlModule,\n  TransmissionType,\n} from 'astros-common';\nimport { Subscription } from 'rxjs';\nimport { ModalCallbackEvent } from '../..//modal-base/modal-callback-event';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\n\nexport class LoadingModalResources {\n  public static closeEvent = 'loading_closeEvent';\n}\n\nexport interface LoadingModalResponse {\n  controllers: ControlModule[];\n  locations: AstrOsLocationCollection;\n}\n\n@Component({\n  selector: 'app-loading-modal',\n  templateUrl: './loading-modal.component.html',\n  styleUrls: ['./loading-modal.component.scss'],\n  standalone: true,\n})\nexport class LoadingModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  subscription!: Subscription;\n\n  message = 'Loading Controllers...';\n  controllersMsg = TransmissionType.controllers;\n  locations!: AstrOsLocationCollection;\n  controllers!: ControllersResponse;\n\n  locationsLoaded = false;\n  controllersLoaded = false;\n\n  disableButton = true;\n\n  constructor(\n    private socket: WebsocketService,\n    private controllerService: ControllerService,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    const locationsObserver = {\n      next: (result: AstrOsLocationCollection) => {\n        console.log('Loaded locations');\n        this.locations = result;\n        this.locationsLoaded = true;\n        this.checkLoadedState();\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.getLoadedLocations().subscribe(locationsObserver);\n\n    const observer = {\n      next: (_: unknown) => {\n        console.log('Synced controllers');\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.syncControllers().subscribe(observer);\n\n    this.subscription = this.socket.messages.subscribe((msg: unknown) => {\n      console.log('Received message', msg);\n      if (msg && typeof msg === 'object' && 'type' in msg)\n        if (msg.type === this.controllersMsg) {\n          this.controllers = msg as ControllersResponse;\n          this.controllersLoaded = true;\n          this.checkLoadedState();\n        }\n    });\n  }\n\n  checkLoadedState() {\n    if (this.locationsLoaded && this.controllersLoaded) {\n      if (this.controllers.success) {\n        this.closeModal();\n      } else {\n        this.disableButton = false;\n        this.message = 'Failed to load controllers, using cached values.';\n      }\n    }\n  }\n\n  closeModal(): void {\n    this.subscription?.unsubscribe();\n    const evt = new ModalCallbackEvent(LoadingModalResources.closeEvent, {\n      controllers: this.controllers.controllers,\n      locations: this.locations,\n    });\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "locations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AstrOsLocationCollection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ModuleSubTypeSelection",
            "id": "interface-ModuleSubTypeSelection-d780d122c75a1f062adc481f9de7091a3ce8e32c1c5c91237e7a74401844ac9e84df50fb71c631970343d3c7ebd081f765305845fc147155463493e209f83755",
            "file": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterContentInit, Component } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModuleType } from 'astros-common/dist/astros_enums';\nimport { ModuleSubType } from 'astros-common/dist/astros_enums';\nimport { NgForOf } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\n\nexport class AddModuleModalResources {\n  public static moduleType = 'moduleType';\n  public static locationId = 'locationId';\n  public static addEvent = 'add_module_addEvent';\n  public static closeEvent = 'add_module_closeEvent';\n}\n\nexport interface AddModuleModalResponse {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n}\n\nexport interface ModuleSubTypeSelection {\n  id: ModuleSubType;\n  value: string;\n}\n\n@Component({\n  selector: 'app-add-module-modal',\n  imports: [NgForOf, FormsModule],\n  templateUrl: './add-module-modal.component.html',\n  styleUrl: './add-module-modal.component.scss',\n})\nexport class AddModuleModalComponent\n  extends ModalBaseComponent\n  implements AfterContentInit\n{\n  options: ModuleSubTypeSelection[] = [];\n\n  locationId = \"0\";\n  moduleType: ModuleType = ModuleType.none;\n  selectedSubType: ModuleSubType = ModuleSubType.none;\n\n  moduleTypes: Map<ModuleType, string>;\n\n  moduleSubTypes: Map<ModuleType, ModuleSubTypeSelection[]>;\n\n  constructor() {\n    super();\n\n    this.moduleTypes = new Map<ModuleType, string>([\n      [ModuleType.uart, 'Serial'],\n      [ModuleType.i2c, 'I2C'],\n      [ModuleType.gpio, 'GPIO'],\n    ]);\n\n    this.moduleSubTypes = new Map<ModuleType, ModuleSubTypeSelection[]>([\n      [\n        ModuleType.uart,\n        [\n          { id: ModuleSubType.genericSerial, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsSerial,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.kangaroo, value: 'Kangaroo' },\n          { id: ModuleSubType.maestro, value: 'Maestro' },\n        ],\n      ],\n      [\n        ModuleType.i2c,\n        [\n          { id: ModuleSubType.genericI2C, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsI2C,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.pwmBoard, value: 'PWM Board' },\n        ],\n      ],\n    ]);\n  }\n\n  ngAfterContentInit(): void {\n    this.locationId = this.resources.get(\n      AddModuleModalResources.locationId,\n    ) as string;\n\n    this.moduleType = this.resources.get(\n      AddModuleModalResources.moduleType,\n    ) as ModuleType;\n\n    if (this.moduleSubTypes.has(this.moduleType)) {\n      this.options = this.moduleSubTypes.get(\n        this.moduleType,\n      ) as ModuleSubTypeSelection[];\n    }\n  }\n\n  modalChange($event: Event) {\n    this.selectedSubType = +($event.target as HTMLInputElement).value;\n  }\n\n  addModule() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.addEvent, {\n      locationId: this.locationId,\n      moduleType: this.moduleType,\n      moduleSubType: this.selectedSubType,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.closeEvent, {});\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleSubType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RemoveModuleEvent",
            "id": "interface-RemoveModuleEvent-0dd25919acc2f3f3ea1191ee0fd20770a556946694f5d172498695d15b38ff003728f392a37343f89293f8a226a7ad1260dec10c1ea5d7c3803eab04eb7e7c56",
            "file": "src/app/components/esp-module/utility/module-events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModuleSubType, ModuleType } from 'astros-common';\n\nexport interface AddModuleEvent {\n  locationId: string;\n  module: ModuleType;\n}\n\nexport interface RemoveModuleEvent {\n  locationId: string;\n  id: string;\n  module: ModuleType;\n}\n\nexport interface ServoTestEvent {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n  channelId: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "locationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResourceController",
            "id": "interface-ResourceController-89f92a0787056b759c53faf0b4f36538d71f94a1629af85b7e02ec0b48738aa1185ad2cc50a971e78e9cff1775506f1a78faf4fe195d0e32f61e442793849857",
            "file": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\ninterface ResourceController {\n  id: number;\n  name: string;\n  address: string;\n}\n\ninterface Controller {\n  id: number;\n  name: string;\n  address: string;\n  selected: boolean;\n}\n\nexport class FormatModalResources {\n  public static controllers = 'controllers';\n\n  public static formatSdEvent = 'format_formatSD';\n  public static closeEvent = 'format_close';\n}\n\n@Component({\n  selector: 'app-format-modal',\n  templateUrl: './format-modal.component.html',\n  styleUrls: ['./format-modal.component.scss'],\n  imports: [NgFor, FormsModule],\n})\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\n  controllers: Controller[] = [];\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(FormatModalResources.controllers)) {\n      for (const controller of this.resources.get(\n        FormatModalResources.controllers,\n      ) as ResourceController[]) {\n        this.controllers.push({\n          id: controller.id,\n          name: controller.name,\n          address: controller.address,\n          selected: false,\n        });\n      }\n    }\n  }\n\n  ok() {\n    const result = [];\n\n    for (const controller of this.controllers) {\n      if (controller.selected) {\n        result.push({ name: controller.name, address: controller.address });\n      }\n    }\n\n    const evt = new ModalCallbackEvent(\n      FormatModalResources.formatSdEvent,\n      result,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(FormatModalResources.closeEvent, null);\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ScriptEventModalResponse",
            "id": "interface-ScriptEventModalResponse-d05fe6b3839af3931c35319e20b800443e84d5da5d31eb00b4bbce7037c0e9029e8ec6be9db0f713b7e0e4dcde5b122f49b800b4a379b77dc5b5f3dd4450dfad",
            "file": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ModalBaseComponent } from '@src/components/modals/modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { ScriptEvent } from 'astros-common';\n\nexport class ScriptEventModalResources {\n  public static scriptEvent = 'scriptEvent';\n  public static callbackType = 'callbackType';\n  public static addEvent = 'script_addEvent';\n  public static editEvent = 'script_editEvent';\n  public static removeEvent = 'script_removeEvent';\n  public static closeEvent = 'script_closeEvent';\n}\n\nexport interface ScriptEventModalResponse {\n  scriptEvent: ScriptEvent;\n  time: number;\n}\n\n@Component({\n  selector: 'app-base-event-modal',\n  template: '',\n  styleUrls: ['./base-event-modal.component.scss'],\n  standalone: true,\n})\nexport class BaseEventModalComponent extends ModalBaseComponent {\n  protected scriptEvent!: ScriptEvent;\n  protected originalEventTime: number;\n  protected callbackType: string;\n\n  eventTime: number;\n  protected maxTime = 3000;\n  protected timeFactor = 10;\n\n  errorMessage: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  removeEvent() {\n    const evt = new ModalCallbackEvent(ScriptEventModalResources.removeEvent, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      ScriptEventModalResources.closeEvent,\n      null,\n    );\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ScriptSelection",
            "id": "interface-ScriptSelection-8640b39d4aba81b573a275210dff9320372ef02e43bf08583c02cc0853af3b02b550047815470b1de832d57922ecc9ef304b8d5967487e6d52656a8073f6c740",
            "file": "src/app/pages/remote-config/m5-paper-config/m5-paper-config.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport { M5Page, Script } from 'astros-common';\nimport { RemotesService } from 'src/app/services/remotes/remotes.service';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor } from '@angular/common';\n\ninterface ScriptSelection {\n  id: string;\n  name: string;\n}\n\n@Component({\n  selector: 'app-m5-paper-config',\n  templateUrl: './m5-paper-config.component.html',\n  styleUrls: ['./m5-paper-config.component.scss'],\n  imports: [FontAwesomeModule, FormsModule, NgFor],\n})\nexport class M5PaperConfigComponent implements OnInit {\n  faForward = faChevronRight;\n  faBackward = faChevronLeft;\n  pageNumber = 1;\n\n  scripts: ScriptSelection[] = [];\n\n  m5Config: M5Page[] = [];\n\n  currentPage: M5Page;\n  currentIndex = 0;\n\n  constructor(\n    private scriptService: ScriptsService,\n    private remoteService: RemotesService,\n  ) {\n    this.m5Config.push(new M5Page());\n\n    this.currentPage = this.m5Config[this.currentIndex];\n  }\n\n  ngOnInit(): void {\n    const scriptObserver = {\n      next: (result: Script[]) => {\n        const scriptList = result.sort((a, b) => {\n          if (a.scriptName > b.scriptName) {\n            return 1;\n          }\n          if (a.scriptName < b.scriptName) {\n            return -1;\n          }\n          return 0;\n        });\n\n        for (const s of scriptList) {\n          this.scripts.push({ id: s.id, name: s.scriptName });\n        }\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    const configObserver = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'value' in result) {\n          const config = JSON.parse(result.value as string) as M5Page[];\n\n          if (config.length != 0) {\n            this.m5Config = config;\n            this.currentPage = this.m5Config[0];\n          }\n        } else {\n          this.m5Config = new Array<M5Page>();\n          this.m5Config.push(new M5Page());\n          this.currentPage = this.m5Config[0];\n        }\n      },\n    };\n\n    this.scriptService.getAllScripts().subscribe(scriptObserver);\n    this.remoteService.getRemoteConfig().subscribe(configObserver);\n  }\n\n  selectionChange(button: number, id: string) {\n    const sIdx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    const scriptName = this.scripts[sIdx].name;\n\n    switch (button) {\n      case 1:\n        this.currentPage.button1.id = id;\n        this.currentPage.button1.name = scriptName;\n        break;\n      case 2:\n        this.currentPage.button2.id = id;\n        this.currentPage.button2.name = scriptName;\n        break;\n      case 3:\n        this.currentPage.button3.id = id;\n        this.currentPage.button3.name = scriptName;\n        break;\n      case 4:\n        this.currentPage.button4.id = id;\n        this.currentPage.button4.name = scriptName;\n        break;\n      case 5:\n        this.currentPage.button5.id = id;\n        this.currentPage.button5.name = scriptName;\n        break;\n      case 6:\n        this.currentPage.button6.id = id;\n        this.currentPage.button6.name = scriptName;\n        break;\n      case 7:\n        this.currentPage.button7.id = id;\n        this.currentPage.button7.name = scriptName;\n        break;\n      case 8:\n        this.currentPage.button8.id = id;\n        this.currentPage.button8.name = scriptName;\n        break;\n      case 9:\n        this.currentPage.button9.id = id;\n        this.currentPage.button9.name = scriptName;\n        break;\n    }\n  }\n\n  pageForward() {\n    this.currentIndex++;\n    if (this.m5Config.length < this.currentIndex + 1) {\n      this.m5Config.push(new M5Page());\n    }\n\n    this.currentPage = this.m5Config[this.currentIndex];\n    this.pageNumber = this.currentIndex + 1;\n  }\n\n  pageBackward() {\n    this.currentIndex--;\n    if (this.currentIndex < 0) {\n      this.currentIndex = 0;\n      return;\n    }\n\n    this.currentPage = this.m5Config[this.currentIndex];\n    this.pageNumber = this.currentIndex + 1;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ServoTestEvent",
            "id": "interface-ServoTestEvent-0dd25919acc2f3f3ea1191ee0fd20770a556946694f5d172498695d15b38ff003728f392a37343f89293f8a226a7ad1260dec10c1ea5d7c3803eab04eb7e7c56",
            "file": "src/app/components/esp-module/utility/module-events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModuleSubType, ModuleType } from 'astros-common';\n\nexport interface AddModuleEvent {\n  locationId: string;\n  module: ModuleType;\n}\n\nexport interface RemoveModuleEvent {\n  locationId: string;\n  id: string;\n  module: ModuleType;\n}\n\nexport interface ServoTestEvent {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n  channelId: string;\n}\n",
            "properties": [
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "locationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "moduleSubType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleSubType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "moduleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ServoTestMessage",
            "id": "interface-ServoTestMessage-9a46aba5031cdfe8c123b8cccf337ecf082c55bda3da868f8a5eba5d5201a269e8ae01650fe80488960172a574257aac2d2dcf9909ee966bf6b607a284008eb3",
            "file": "src/app/components/modals/modules/servo-test-modal/servo-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseEventModalComponent } from '../../scripting/base-event-modal/base-event-modal.component';\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\nimport { FormsModule } from '@angular/forms';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ServoTestModalResources {\n  public static servoId = 'servoId';\n  public static controllerId = 'controllerId';\n  public static sendServoMove = 'servoTest_servoMove';\n  public static closeEvent = 'servoTest_closeEvent';\n}\n\nexport interface ServoTestMessage {\n  controllerId: number;\n  servoId: number;\n  value: number;\n}\n\n@Component({\n  selector: 'app-servo-test-modal',\n  templateUrl: './servo-test-modal.component.html',\n  styleUrl: './servo-test-modal.component.scss',\n  imports: [MatSlider, MatSliderThumb, FormsModule],\n})\nexport class ServoTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  servoId = 0;\n  controllerId = 0;\n  disableSlider = true;\n  value = 1500;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.servoId = this.resources.get(\n      ServoTestModalResources.servoId,\n    ) as number;\n    this.controllerId = this.resources.get(\n      ServoTestModalResources.controllerId,\n    ) as number;\n  }\n\n  onSliderChange(_: unknown) {\n    const evt = new ModalCallbackEvent(ServoTestModalResources.sendServoMove, {\n      controllerId: this.controllerId,\n      servoId: this.servoId,\n      value: this.value,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  enableTest() {\n    this.disableSlider = false;\n  }\n\n  override closeModal(): void {\n    const evt = new ModalCallbackEvent(\n      ServoTestModalResources.closeEvent,\n      null,\n    );\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "properties": [
                {
                    "name": "controllerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "servoId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TokenPayload",
            "id": "interface-TokenPayload-79799a3c3960f5ac2d67c0d11dc85b7a6476942e6a25acf31f088308767cd354a0ed8326308982b19538a6b51c0736a8ace98825085e39692318ed11adadf829",
            "file": "src/app/services/auth/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface UserDetails {\n  _id: string;\n  username: string;\n  exp: number;\n  iat: number;\n}\n\nexport interface TokenResponse {\n  token: string;\n}\n\nexport interface TokenPayload {\n  username: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private token: string;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {\n    this.token = '';\n  }\n\n  public login(user: TokenPayload): Observable<unknown> {\n    return this.request('post', 'login', user);\n  }\n\n  public profile(): Observable<unknown> {\n    return this.request('get', 'profile');\n  }\n\n  public logout(): void {\n    this.token = '';\n    window.localStorage.removeItem('astros-token');\n    this.router.navigateByUrl('/');\n  }\n\n  public getUserDetails(): UserDetails | null {\n    const token = this.getToken();\n    let payload;\n    if (token) {\n      payload = token.split('.')[1];\n      payload = window.atob(payload);\n      return JSON.parse(payload);\n    } else {\n      return null;\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    const user = this.getUserDetails();\n    if (user) {\n      return user.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n\n  private saveToken(token: string): void {\n    localStorage.setItem('astros-token', token);\n  }\n\n  private getToken(): string {\n    this.token = localStorage.getItem('astros-token') || '';\n\n    return this.token;\n  }\n\n  private request(\n    method: 'post' | 'get',\n    type: 'login' | 'register' | 'profile',\n    user?: TokenPayload,\n  ): Observable<unknown> {\n    let base$;\n\n    if (method === 'post') {\n      base$ = this.http.post(`/api/${type}`, user);\n    } else {\n      base$ = this.http.get(`/api/${type}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      });\n    }\n\n    const request = base$.pipe(\n      map((data: unknown) => {\n        if (data && typeof data === 'object' && 'token' in data)\n          if (data.token) {\n            this.saveToken(data.token as string);\n          }\n        return data;\n      }),\n    );\n\n    return request;\n  }\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TokenResponse",
            "id": "interface-TokenResponse-79799a3c3960f5ac2d67c0d11dc85b7a6476942e6a25acf31f088308767cd354a0ed8326308982b19538a6b51c0736a8ace98825085e39692318ed11adadf829",
            "file": "src/app/services/auth/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface UserDetails {\n  _id: string;\n  username: string;\n  exp: number;\n  iat: number;\n}\n\nexport interface TokenResponse {\n  token: string;\n}\n\nexport interface TokenPayload {\n  username: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private token: string;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {\n    this.token = '';\n  }\n\n  public login(user: TokenPayload): Observable<unknown> {\n    return this.request('post', 'login', user);\n  }\n\n  public profile(): Observable<unknown> {\n    return this.request('get', 'profile');\n  }\n\n  public logout(): void {\n    this.token = '';\n    window.localStorage.removeItem('astros-token');\n    this.router.navigateByUrl('/');\n  }\n\n  public getUserDetails(): UserDetails | null {\n    const token = this.getToken();\n    let payload;\n    if (token) {\n      payload = token.split('.')[1];\n      payload = window.atob(payload);\n      return JSON.parse(payload);\n    } else {\n      return null;\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    const user = this.getUserDetails();\n    if (user) {\n      return user.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n\n  private saveToken(token: string): void {\n    localStorage.setItem('astros-token', token);\n  }\n\n  private getToken(): string {\n    this.token = localStorage.getItem('astros-token') || '';\n\n    return this.token;\n  }\n\n  private request(\n    method: 'post' | 'get',\n    type: 'login' | 'register' | 'profile',\n    user?: TokenPayload,\n  ): Observable<unknown> {\n    let base$;\n\n    if (method === 'post') {\n      base$ = this.http.post(`/api/${type}`, user);\n    } else {\n      base$ = this.http.get(`/api/${type}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      });\n    }\n\n    const request = base$.pipe(\n      map((data: unknown) => {\n        if (data && typeof data === 'object' && 'token' in data)\n          if (data.token) {\n            this.saveToken(data.token as string);\n          }\n        return data;\n      }),\n    );\n\n    return request;\n  }\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserDetails",
            "id": "interface-UserDetails-79799a3c3960f5ac2d67c0d11dc85b7a6476942e6a25acf31f088308767cd354a0ed8326308982b19538a6b51c0736a8ace98825085e39692318ed11adadf829",
            "file": "src/app/services/auth/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface UserDetails {\n  _id: string;\n  username: string;\n  exp: number;\n  iat: number;\n}\n\nexport interface TokenResponse {\n  token: string;\n}\n\nexport interface TokenPayload {\n  username: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private token: string;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {\n    this.token = '';\n  }\n\n  public login(user: TokenPayload): Observable<unknown> {\n    return this.request('post', 'login', user);\n  }\n\n  public profile(): Observable<unknown> {\n    return this.request('get', 'profile');\n  }\n\n  public logout(): void {\n    this.token = '';\n    window.localStorage.removeItem('astros-token');\n    this.router.navigateByUrl('/');\n  }\n\n  public getUserDetails(): UserDetails | null {\n    const token = this.getToken();\n    let payload;\n    if (token) {\n      payload = token.split('.')[1];\n      payload = window.atob(payload);\n      return JSON.parse(payload);\n    } else {\n      return null;\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    const user = this.getUserDetails();\n    if (user) {\n      return user.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n\n  private saveToken(token: string): void {\n    localStorage.setItem('astros-token', token);\n  }\n\n  private getToken(): string {\n    this.token = localStorage.getItem('astros-token') || '';\n\n    return this.token;\n  }\n\n  private request(\n    method: 'post' | 'get',\n    type: 'login' | 'register' | 'profile',\n    user?: TokenPayload,\n  ): Observable<unknown> {\n    let base$;\n\n    if (method === 'post') {\n      base$ = this.http.post(`/api/${type}`, user);\n    } else {\n      base$ = this.http.get(`/api/${type}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      });\n    }\n\n    const request = base$.pipe(\n      map((data: unknown) => {\n        if (data && typeof data === 'object' && 'token' in data)\n          if (data.token) {\n            this.saveToken(data.token as string);\n          }\n        return data;\n      }),\n    );\n\n    return request;\n  }\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AudioService",
            "id": "injectable-AudioService-79dfedc2b19b7464268008956399c54bc626edcdb0be010d1797e0b077f81899b839e526475306f247a280d6bc448d16e27e00421d92c2219c00a90c76c8ccee",
            "file": "src/app/services/audio/audio.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAudioFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AudioFile[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAudioFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AudioFile[]>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, map, Observable, of, tap } from 'rxjs';\nimport { AudioFile } from 'astros-common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AudioService {\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    this.token = '';\n  }\n\n  public getAudioFiles(): Observable<AudioFile[]> {\n    return this.http\n      .get<AudioFile[]>(`/api/audio/all`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        map((files: AudioFile[]) =>\n          files.sort((a: AudioFile, b: AudioFile) => {\n            if (a.fileName < b.fileName) return -1;\n            if (a.fileName > b.fileName) return 1;\n            return 0;\n          }),\n        ),\n      )\n      .pipe(\n        tap((_) => console.log(`loaded audio files`)),\n        catchError(this.handleError<AudioFile[]>('getAudioFiles')),\n      );\n  }\n\n  public removeAudioFile(id: string): Observable<AudioFile[]> {\n    return this.http\n      .get<AudioFile[]>(`/api/audio/delete?id=${id}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log(`deleted audio file id: ${id}`)),\n        catchError(this.handleError<AudioFile[]>('removeAudioFile')),\n      );\n  }\n\n  private getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('astros-token') || '';\n    }\n    return this.token;\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: unknown): Observable<T> => {\n      console.error(operation, error);\n      return of(result as T);\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AudioServiceMock",
            "id": "injectable-AudioServiceMock-c3478cdfd8500194e384a1a8aa85c65ee97e787523b5ff3edcb81a6d73a8bb67fae91065c5e4617c29a0384b618d516e9dfddbc3b80ffe84bb994e2727653d6e",
            "file": "src/app/services/audio/audio.mock.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAudioFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AudioFile[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "removeAudioFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AudioFile[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { AudioFile } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AudioServiceMock {\r\n\r\n  public getAudioFiles(): Observable<AudioFile[]> {\r\n    return of([]);\r\n  }\r\n\r\n  public removeAudioFile(id: string): Observable<AudioFile[]> {\r\n    return of([]);\r\n  }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-79799a3c3960f5ac2d67c0d11dc85b7a6476942e6a25acf31f088308767cd354a0ed8326308982b19538a6b51c0736a8ace98825085e39692318ed11adadf829",
            "file": "src/app/services/auth/authentication.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "UserDetails | null",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "profile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "method",
                            "type": "\"post\" | \"get\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"login\" | \"register\" | \"profile\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "\"post\" | \"get\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"login\" | \"register\" | \"profile\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface UserDetails {\n  _id: string;\n  username: string;\n  exp: number;\n  iat: number;\n}\n\nexport interface TokenResponse {\n  token: string;\n}\n\nexport interface TokenPayload {\n  username: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private token: string;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {\n    this.token = '';\n  }\n\n  public login(user: TokenPayload): Observable<unknown> {\n    return this.request('post', 'login', user);\n  }\n\n  public profile(): Observable<unknown> {\n    return this.request('get', 'profile');\n  }\n\n  public logout(): void {\n    this.token = '';\n    window.localStorage.removeItem('astros-token');\n    this.router.navigateByUrl('/');\n  }\n\n  public getUserDetails(): UserDetails | null {\n    const token = this.getToken();\n    let payload;\n    if (token) {\n      payload = token.split('.')[1];\n      payload = window.atob(payload);\n      return JSON.parse(payload);\n    } else {\n      return null;\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    const user = this.getUserDetails();\n    if (user) {\n      return user.exp > Date.now() / 1000;\n    } else {\n      return false;\n    }\n  }\n\n  private saveToken(token: string): void {\n    localStorage.setItem('astros-token', token);\n  }\n\n  private getToken(): string {\n    this.token = localStorage.getItem('astros-token') || '';\n\n    return this.token;\n  }\n\n  private request(\n    method: 'post' | 'get',\n    type: 'login' | 'register' | 'profile',\n    user?: TokenPayload,\n  ): Observable<unknown> {\n    let base$;\n\n    if (method === 'post') {\n      base$ = this.http.post(`/api/${type}`, user);\n    } else {\n      base$ = this.http.get(`/api/${type}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      });\n    }\n\n    const request = base$.pipe(\n      map((data: unknown) => {\n        if (data && typeof data === 'object' && 'token' in data)\n          if (data.token) {\n            this.saveToken(data.token as string);\n          }\n        return data;\n      }),\n    );\n\n    return request;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-7504422a4c29481b5baf2bd12d4e7a0b73c2ef6a458aa5231d6d74b164a8d64399809915a37f2bd4c7612cc4701b681d198f63c1d0b7f62ccc6f58a23366ee72",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from './services/auth/authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  constructor(\n    private auth: AuthenticationService,\n    private router: Router,\n  ) {}\n\n  canActivate(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    route: ActivatedRouteSnapshot,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    state: RouterStateSnapshot,\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (!this.auth.isLoggedIn()) {\n      return this.router.parseUrl('/login');\n    }\n\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ControllerService",
            "id": "injectable-ControllerService-e9e13d17a1a108e4aa900471b6a67f230d5f886bfc4de053ebb08b15f01c617e2b4ec58e401355688bf17177dd55996f9fd1120f975c63cab47b846dd4a5b6d0",
            "file": "src/app/services/controllers/controller.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLoadedLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AstrOsLocationCollection>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AstrOsLocationCollection>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveLocations",
                    "args": [
                        {
                            "name": "controllers",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllers",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendControllerCommand",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncControllers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "syncLocationConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ChannelType, AstrOsLocationCollection } from 'astros-common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ControllerService {\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    this.token = '';\n  }\n\n  public getLocations(): Observable<AstrOsLocationCollection> {\n    return this.http\n      .get<AstrOsLocationCollection>('/api/locations', {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log('got locations')),\n        catchError(this.handleError<AstrOsLocationCollection>('getLocations')),\n      );\n  }\n\n  public getLoadedLocations(): Observable<AstrOsLocationCollection> {\n    return this.http\n      .get<AstrOsLocationCollection>('/api/locations/load', {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log('loaded locations')),\n        catchError(this.handleError<AstrOsLocationCollection>('getLocations')),\n      );\n  }\n\n  public saveLocations(\n    controllers: AstrOsLocationCollection,\n  ): Observable<unknown> {\n    return this.http\n      .put<unknown>('/api/locations', controllers, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`saveLocations result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('saveLocations')),\n      );\n  }\n\n  public syncControllers(): Observable<unknown> {\n    return this.http\n      .get<unknown>('/api/locations/synccontrollers', {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`syncControllers result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('syncLocations')),\n      );\n  }\n\n  public syncLocationConfig(): Observable<unknown> {\n    return this.http\n      .get<unknown>('/api/locations/syncconfig', {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`syncLocationConfig result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('syncLocations')),\n      );\n  }\n\n  sendControllerCommand(\n    controllerId: number,\n    channelType: ChannelType,\n    command: unknown,\n  ): Observable<unknown> {\n    return this.http\n      .post<unknown>(\n        '/api/directcommand',\n        {\n          controller: controllerId,\n          commandType: channelType,\n          command: command,\n        },\n        {\n          headers: { Authorization: `Bearer ${this.getToken()}` },\n        },\n      )\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`direct command result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('sendControllerCommand')),\n      );\n  }\n\n  private getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('astros-token') || '';\n    }\n    return this.token;\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: unknown): Observable<T> => {\n      console.error(operation, error);\n\n      return of(result as T);\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ControllerServiceMock",
            "id": "injectable-ControllerServiceMock-5ff7b0e91fa8e84b2c532fb42916497db4cbf3b723dd6857eafcbf658777b8a06051d1338a6edbd240399d2cea4f95b9113365fb45909d1256ec0d3c0b9765bd",
            "file": "src/app/services/controllers/controller.mock.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generateGpioModule",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateLocationCollection",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLoadedLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "saveLocations",
                    "args": [
                        {
                            "name": "controllers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllers",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendControllerCommand",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncControllers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "syncLocationConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { AstrOsConstants, AstrOsLocationCollection, ControllerLocation, GpioChannel, GpioModule } from \"astros-common\";\r\n//mport {  ChannelType } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ControllerServiceMock {\r\n\r\n  public getLocations(): Observable<any> {\r\n    return of(\r\n      this.generateLocationCollection()\r\n    );\r\n  }\r\n\r\n  public getLoadedLocations(): Observable<any> {\r\n    return of(\r\n      this.generateLocationCollection()\r\n    );\r\n  }\r\n\r\n  public saveLocations(\r\n    controllers: any,\r\n  ): Observable<unknown> {\r\n    return of(null);\r\n  }\r\n\r\n  public syncControllers(): Observable<unknown> {\r\n    return of(null);\r\n  }\r\n\r\n  public syncLocationConfig(): Observable<unknown> {\r\n    return of(null);\r\n  }\r\n\r\n  sendControllerCommand(\r\n    controllerId: number,\r\n    channelType: unknown,\r\n    command: unknown,\r\n  ): Observable<unknown> {\r\n    return of(null);\r\n  }\r\n\r\n\r\n  generateLocationCollection() {\r\n    const locations = new AstrOsLocationCollection(\r\n      new ControllerLocation('1234', AstrOsConstants.CORE, 'Test Location', 'ESP', 'fingerprint'),\r\n      new ControllerLocation('5678', AstrOsConstants.DOME, 'Test Location 2', 'ESP', 'fingerprint'),\r\n      new ControllerLocation('9010', AstrOsConstants.BODY, 'Test Location 3', 'ESP', 'fingerprint'),\r\n    );\r\n\r\n    locations.bodyModule!.gpioModule = this.generateGpioModule();\r\n    locations.domeModule!.gpioModule = this.generateGpioModule();\r\n    locations.coreModule!.gpioModule = this.generateGpioModule();\r\n\r\n    return locations;\r\n  }\r\n\r\n  generateGpioModule() {\r\n    const module = new GpioModule();\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      module.channels.push(new GpioChannel(i, `Channel ${i}`, false, false));\r\n    }\r\n    return module;\r\n  }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-377b6e3a5ae42a7af39d6515361a33e6b76d95de4d76d229e26bc6adb7a240dd935b034f3cfcb24d2362829ed198c0b71a6f6dc2a5155ea141fb1c4c2ffb1f90",
            "file": "src/app/services/modal/modal.service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalComponent[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modal",
                            "type": "ModalComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "ModalComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModalComponent } from '@src/components/modals';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalComponent[] = [];\n\n  add(modal: ModalComponent) {\n    this.modals.push(modal);\n  }\n\n  remove(id: string) {\n    this.modals = this.modals.filter((x) => x.id !== id);\n  }\n\n  open(id: string) {\n    const modal = this.modals.find((x) => x.id === id);\n    if (modal) {\n      modal.open();\n    }\n  }\n\n  close(id: string) {\n    const modal = this.modals.find((x) => x.id === id);\n    if (modal) {\n      modal.close();\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RemotesService",
            "id": "injectable-RemotesService-2ed9992feef26f9e36b1ca63abe931b12e0d3b0db350b673cb35bcf1c7a76f4d3abd7fdd1cfc487504c928222338b77c56143ccab796b691fc963807c7bec1a9",
            "file": "src/app/services/remotes/remotes.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getRemoteConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRemoteConfig",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, of, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RemotesService {\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    this.token = '';\n  }\n\n  public getRemoteConfig(): Observable<string> {\n    return this.http\n      .get<string>(`/api/remoteConfig`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log(`loaded remote config`)),\n        catchError(this.handleError<string>('getRemoteConfig')),\n      );\n  }\n\n  public saveRemoteConfig(json: string): Observable<unknown> {\n    return this.http\n      .put<unknown>(\n        '/api/remoteConfig',\n        { config: json },\n        {\n          headers: { Authorization: `Bearer ${this.getToken()}` },\n        },\n      )\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`saveRemoteConfig result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('saveRemoteConfig')),\n      );\n  }\n\n  private getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('astros-token') || '';\n    }\n    return this.token;\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: unknown): Observable<T> => {\n      console.error(operation, error);\n      return of(result as T);\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ScriptsService",
            "id": "injectable-ScriptsService-040175da9c4afc95831be2dd6e395cc273e3bb9f21796883e78dfc5712972dd8227dbae86cfba96c0cb6f235bfac307856d2fb6d47d82cafee3a05cfcbae6d8a",
            "file": "src/app/services/scripts/scripts.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "copyScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Script>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllScripts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Script[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Script>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveScript",
                    "args": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, of, tap } from 'rxjs';\nimport { Script } from 'astros-common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScriptsService {\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    this.token = '';\n  }\n\n  public getAllScripts(): Observable<Script[]> {\n    return this.http\n      .get<Script[]>(`/api/scripts/all`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log(`loaded scripts`)),\n        catchError(this.handleError<Script[]>('getAllScript')),\n      );\n  }\n\n  public getScript(id: string): Observable<Script> {\n    return this.http\n      .get<Script>(`/api/scripts?id=${id}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log(`loaded script ${id}`)),\n        catchError(this.handleError<Script>('getScript')),\n      );\n  }\n\n  public copyScript(id: string): Observable<Script> {\n    return this.http\n      .get<Script>(`/api/scripts/copy?id=${id}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log(`loaded script ${id}`)),\n        catchError(this.handleError<Script>('copyScript')),\n      );\n  }\n\n  public saveScript(script: Script): Observable<unknown> {\n    return this.http\n      .put<unknown>('/api/scripts', script, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`saveScript result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('saveScript')),\n      );\n  }\n\n  public deleteScript(id: string): Observable<unknown> {\n    return this.http\n      .delete<unknown>(`/api/scripts?id=${id}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`deleteScript result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('deleteScript')),\n      );\n  }\n\n  public uploadScript(id: string): Observable<unknown> {\n    return this.http\n      .get<unknown>(`/api/scripts/upload?id=${id}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`uploadScript result: ${val.message}`);\n        }),\n      );\n  }\n\n  public runScript(id: string): Observable<unknown> {\n    return this.http\n      .get<unknown>(`/api/scripts/run?id=${id}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`runScript result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('runScript')),\n      );\n  }\n\n  private getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('astros-token') || '';\n    }\n    return this.token;\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: unknown): Observable<T> => {\n      console.error(operation, error);\n      return of(result as T);\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ScriptsServiceMock",
            "id": "injectable-ScriptsServiceMock-77b91ab0aedaf1d0b14c0db8589f515a961581c00971e26b1f9f771b38c66e0cb1ea0690da33de34e493121b6e718804f889f47cadc8a0127befcf00d4eb17ac",
            "file": "src/app/services/scripts/scripts.mock.ts",
            "properties": [],
            "methods": [
                {
                    "name": "copyScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Script>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllScripts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Script[]>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Script>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveScript",
                    "args": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Script } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScriptsServiceMock {\r\n\r\n  public getAllScripts(): Observable<Script[]> {\r\n    return of([]);\r\n  }\r\n\r\n  public getScript(id: string): Observable<Script> {\r\n    return of(new Script(\"\",\"\",\"\", new Date()));\r\n  }\r\n\r\n  public copyScript(id: string): Observable<Script> {\r\n    return of(new Script(\"\",\"\",\"\", new Date()));\r\n  }\r\n\r\n  public saveScript(script: Script): Observable<unknown> {\r\n    return of()\r\n}\r\n\r\n  public deleteScript(id: string): Observable<unknown> {\r\n    return of();\r\n  }\r\n\r\n  public uploadScript(id: string): Observable<unknown> {\r\n    return of();\r\n  }\r\n\r\n  public runScript(id: string): Observable<unknown> {\r\n    return of();\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-95458e17ac43308c94b4b80886327d983609573af7001a1ca9820571c0956dee0c8980f02e5fa4b7c182c5864eb08253eafa8aad8196210a1b7877a37b076f73",
            "file": "src/app/services/settings/settings.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "formatSD",
                    "args": [
                        {
                            "name": "controllers",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllers",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getControllers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ControlModule[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSetting",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<KeyValue<string, string>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSetting",
                    "args": [
                        {
                            "name": "setting",
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "setting",
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { KeyValue } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ControlModule } from 'astros-common';\nimport { Observable, tap, catchError, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService {\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    this.token = '';\n  }\n\n  public getSetting(key: string): Observable<KeyValue<string, string>> {\n    return this.http\n      .get<KeyValue<string, string>>(`/api/settings?key=${key}`, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log(`got setting for ${key}`)),\n        catchError(this.handleError<KeyValue<string, string>>('getSettings')),\n      );\n  }\n\n  getControllers(): Observable<ControlModule[]> {\n    return this.http\n      .get<ControlModule[]>('/api/settings/controllers', {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((_) => console.log('got controllers')),\n        catchError(this.handleError<ControlModule[]>('getControllers')),\n      );\n  }\n\n  public saveSetting(setting: KeyValue<string, string>): Observable<unknown> {\n    return this.http\n      .put<unknown>('/api/settings', setting, {\n        headers: { Authorization: `Bearer ${this.getToken()}` },\n      })\n      .pipe(\n        tap((val) => {\n          if (val && typeof val === 'object' && 'message' in val)\n            console.log(`saveRemoteConfig result: ${val.message}`);\n        }),\n        catchError(this.handleError<unknown>('saveRemoteConfig')),\n      );\n  }\n\n  public formatSD(controllers: unknown[]): Observable<unknown> {\n    return this.http\n      .post<unknown[]>(\n        `/api/settings/formatSD`,\n        { controllers: controllers },\n        {\n          headers: { Authorization: `Bearer ${this.getToken()}` },\n        },\n      )\n      .pipe(\n        tap((_) => console.log('SD Format Queued')),\n        catchError(this.handleError<unknown>('formatSD')),\n      );\n  }\n\n  private getToken(): string {\n    if (!this.token) {\n      this.token = localStorage.getItem('astros-token') || '';\n    }\n    return this.token;\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: unknown): Observable<T> => {\n      console.error(operation, error);\n      return of(result as T);\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-defae9e84b5aadfc830ab3b18e38f07b5b62581e9c2c2b5468860156bc6eff65b43afef83c722429ece79e46d2a5c46d9b4e64bc98bcc02291fc6e41062ff8d8",
            "file": "src/app/services/snackbar/snackbar.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "okToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  constructor(private snackBar: MatSnackBar) {}\n\n  public okToast(message: string) {\n    this.snackBar.open(message, 'OK', { duration: 4000 });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StatusService",
            "id": "injectable-StatusService-2fa8fb6f3d41c309debd56d6bd96a0756d1ee885f4b7e253165cb9bea5e13820178b24fe2bd2c1949ca33de2a9f5cc12963a9f84d80c4d93c70aac2fe4e7e352",
            "file": "src/app/services/status/status.service.ts",
            "properties": [
                {
                    "name": "bodyState",
                    "defaultValue": "ControllerStatus.down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "bodyStateObserver",
                    "defaultValue": "new Subject<ControllerStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ControllerStatus>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "coreState",
                    "defaultValue": "ControllerStatus.down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coreStateObserver",
                    "defaultValue": "new Subject<ControllerStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ControllerStatus>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "domeState",
                    "defaultValue": "ControllerStatus.down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "domeStateObserver",
                    "defaultValue": "new Subject<ControllerStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ControllerStatus>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "getBodyStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "ControllerStatus",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCoreStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "ControllerStatus",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDomeStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "ControllerStatus",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subject",
                            "type": "Subject<ControllerStatus>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subject",
                            "type": "Subject<ControllerStatus>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusUpdate",
                    "args": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ControllerStatus,\n  AstrOsConstants,\n  StatusResponse,\n  TransmissionType,\n} from 'astros-common';\nimport { Subject } from 'rxjs';\nimport { WebsocketService } from '../websocket/websocket.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService {\n  private coreState: ControllerStatus = ControllerStatus.down;\n  coreStateObserver: Subject<ControllerStatus> =\n    new Subject<ControllerStatus>();\n\n  private domeState: ControllerStatus = ControllerStatus.down;\n  domeStateObserver: Subject<ControllerStatus> =\n    new Subject<ControllerStatus>();\n\n  private bodyState: ControllerStatus = ControllerStatus.down;\n  bodyStateObserver: Subject<ControllerStatus> =\n    new Subject<ControllerStatus>();\n\n  constructor(private socket: WebsocketService) {\n    console.log('status started...');\n    this.socket.messages.subscribe((msg: unknown) => {\n      if (msg && typeof msg === 'object' && 'type' in msg)\n        if (msg.type === TransmissionType.status) {\n          this.statusUpdate(msg as StatusResponse);\n        }\n    });\n\n    this.coreStateObserver.subscribe((value) => {\n      this.coreState = value;\n    });\n    this.domeStateObserver.subscribe((value) => {\n      this.domeState = value;\n    });\n    this.bodyStateObserver.subscribe((value) => {\n      this.bodyState = value;\n    });\n  }\n\n  resetStatus() {\n    this.coreState = ControllerStatus.down;\n    this.domeState = ControllerStatus.down;\n    this.bodyState = ControllerStatus.down;\n    this.coreStateObserver.next(this.coreState);\n    this.domeStateObserver.next(this.domeState);\n    this.bodyStateObserver.next(this.bodyState);\n  }\n\n  getCoreStatus(): ControllerStatus {\n    return this.coreState;\n  }\n\n  getDomeStatus(): ControllerStatus {\n    return this.domeState;\n  }\n\n  getBodyStatus(): ControllerStatus {\n    return this.bodyState;\n  }\n\n  statusUpdate(status: StatusResponse) {\n    {\n      switch (status.controllerLocation) {\n        case AstrOsConstants.CORE:\n          this.setStatus(status, this.coreStateObserver);\n          break;\n        case AstrOsConstants.DOME:\n          this.setStatus(status, this.domeStateObserver);\n          break;\n        case AstrOsConstants.BODY:\n          this.setStatus(status, this.bodyStateObserver);\n          break;\n      }\n    }\n  }\n\n  setStatus(status: StatusResponse, subject: Subject<ControllerStatus>) {\n    if (!status.up) {\n      subject.next(ControllerStatus.down);\n    } else if (!status.synced) {\n      subject.next(ControllerStatus.needsSynced);\n    } else {\n      subject.next(ControllerStatus.up);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WebsocketMock",
            "id": "injectable-WebsocketMock-6a0af511b6fa26ceed91c579059a4ff49a4482bfb394658e5c71c468edc44c516c6f1be86ee77069a4086b2bd4cdfd973cd82eb49dc395058466e4a6adfff795",
            "file": "src/app/services/websocket/websocket.mock.ts",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "send",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { ControllersResponse, ControlModule } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\nexport enum MockType {\r\n    Default,\r\n    ControllersResponseSuccess,\r\n    ControllersResponseFailure,\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMock {\r\n    \r\n    public messages!: Observable<unknown>;\r\n\r\n    constructor() {   \r\n    }\r\n\r\n    public connect(): void {\r\n    }\r\n\r\n    public disconnect(): void {\r\n    }\r\n\r\n    public send(): void {\r\n    }   \r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockDefault\r\n extends WebsocketMock {\r\n    constructor() {\r\n        super();\r\n        this.messages = of({});\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockControllersSuccess \r\n extends WebsocketMock {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of(\r\n            new ControllersResponse(true, [\r\n                new ControlModule(0, 'Test Controller 1', 'fingerprint'),\r\n                new ControlModule(1, 'Test Controller 2', 'fingerprint'),\r\n                new ControlModule(2, 'Test Controller 3', 'fingerprint'),\r\n            ]\r\n        ))\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebsocketMockControllersFailure \r\n extends WebsocketMockDefault {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of( new ControllersResponse(false, []));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WebsocketMockControllersFailure",
            "id": "injectable-WebsocketMockControllersFailure-6a0af511b6fa26ceed91c579059a4ff49a4482bfb394658e5c71c468edc44c516c6f1be86ee77069a4086b2bd4cdfd973cd82eb49dc395058466e4a6adfff795",
            "file": "src/app/services/websocket/websocket.mock.ts",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                },
                {
                    "name": "send",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { ControllersResponse, ControlModule } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\nexport enum MockType {\r\n    Default,\r\n    ControllersResponseSuccess,\r\n    ControllersResponseFailure,\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMock {\r\n    \r\n    public messages!: Observable<unknown>;\r\n\r\n    constructor() {   \r\n    }\r\n\r\n    public connect(): void {\r\n    }\r\n\r\n    public disconnect(): void {\r\n    }\r\n\r\n    public send(): void {\r\n    }   \r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockDefault\r\n extends WebsocketMock {\r\n    constructor() {\r\n        super();\r\n        this.messages = of({});\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockControllersSuccess \r\n extends WebsocketMock {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of(\r\n            new ControllersResponse(true, [\r\n                new ControlModule(0, 'Test Controller 1', 'fingerprint'),\r\n                new ControlModule(1, 'Test Controller 2', 'fingerprint'),\r\n                new ControlModule(2, 'Test Controller 3', 'fingerprint'),\r\n            ]\r\n        ))\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebsocketMockControllersFailure \r\n extends WebsocketMockDefault {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of( new ControllersResponse(false, []));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 64
            },
            "extends": [
                "WebsocketMockDefault"
            ],
            "type": "injectable"
        },
        {
            "name": "WebsocketMockControllersSuccess",
            "id": "injectable-WebsocketMockControllersSuccess-6a0af511b6fa26ceed91c579059a4ff49a4482bfb394658e5c71c468edc44c516c6f1be86ee77069a4086b2bd4cdfd973cd82eb49dc395058466e4a6adfff795",
            "file": "src/app/services/websocket/websocket.mock.ts",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                },
                {
                    "name": "send",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { ControllersResponse, ControlModule } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\nexport enum MockType {\r\n    Default,\r\n    ControllersResponseSuccess,\r\n    ControllersResponseFailure,\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMock {\r\n    \r\n    public messages!: Observable<unknown>;\r\n\r\n    constructor() {   \r\n    }\r\n\r\n    public connect(): void {\r\n    }\r\n\r\n    public disconnect(): void {\r\n    }\r\n\r\n    public send(): void {\r\n    }   \r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockDefault\r\n extends WebsocketMock {\r\n    constructor() {\r\n        super();\r\n        this.messages = of({});\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockControllersSuccess \r\n extends WebsocketMock {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of(\r\n            new ControllersResponse(true, [\r\n                new ControlModule(0, 'Test Controller 1', 'fingerprint'),\r\n                new ControlModule(1, 'Test Controller 2', 'fingerprint'),\r\n                new ControlModule(2, 'Test Controller 3', 'fingerprint'),\r\n            ]\r\n        ))\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebsocketMockControllersFailure \r\n extends WebsocketMockDefault {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of( new ControllersResponse(false, []));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "extends": [
                "WebsocketMock"
            ],
            "type": "injectable"
        },
        {
            "name": "WebsocketMockDefault",
            "id": "injectable-WebsocketMockDefault-6a0af511b6fa26ceed91c579059a4ff49a4482bfb394658e5c71c468edc44c516c6f1be86ee77069a4086b2bd4cdfd973cd82eb49dc395058466e4a6adfff795",
            "file": "src/app/services/websocket/websocket.mock.ts",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                },
                {
                    "name": "send",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "WebsocketMock"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { ControllersResponse, ControlModule } from \"astros-common\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\nexport enum MockType {\r\n    Default,\r\n    ControllersResponseSuccess,\r\n    ControllersResponseFailure,\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMock {\r\n    \r\n    public messages!: Observable<unknown>;\r\n\r\n    constructor() {   \r\n    }\r\n\r\n    public connect(): void {\r\n    }\r\n\r\n    public disconnect(): void {\r\n    }\r\n\r\n    public send(): void {\r\n    }   \r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockDefault\r\n extends WebsocketMock {\r\n    constructor() {\r\n        super();\r\n        this.messages = of({});\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class WebsocketMockControllersSuccess \r\n extends WebsocketMock {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of(\r\n            new ControllersResponse(true, [\r\n                new ControlModule(0, 'Test Controller 1', 'fingerprint'),\r\n                new ControlModule(1, 'Test Controller 2', 'fingerprint'),\r\n                new ControlModule(2, 'Test Controller 3', 'fingerprint'),\r\n            ]\r\n        ))\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebsocketMockControllersFailure \r\n extends WebsocketMockDefault {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.messages = of( new ControllersResponse(false, []));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "extends": [
                "WebsocketMock"
            ],
            "type": "injectable"
        },
        {
            "name": "WebsocketService",
            "id": "injectable-WebsocketService-822ea7a2704ceb15f312e61984f8b09dd59e6e24800982d70627f0420afaf76381d3c1598dd08873ae39df92beb49de29e080e07413a85e119fb80e876e5e19c",
            "file": "src/app/services/websocket/websocket.service.ts",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "webSocket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebSocketSubject<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebsocketService {\n  webSocket: WebSocketSubject<unknown>;\n\n  public messages: Observable<unknown>;\n\n  constructor() {\n    this.webSocket = webSocket('ws://' + window.location.hostname + ':5000');\n    this.messages = this.webSocket.asObservable();\n  }\n\n  public sendMessage(msg: unknown) {\n    this.webSocket.next(msg);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AddModuleModalResources",
            "id": "class-AddModuleModalResources-d780d122c75a1f062adc481f9de7091a3ce8e32c1c5c91237e7a74401844ac9e84df50fb71c631970343d3c7ebd081f765305845fc147155463493e209f83755",
            "file": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AfterContentInit, Component } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModuleType } from 'astros-common/dist/astros_enums';\nimport { ModuleSubType } from 'astros-common/dist/astros_enums';\nimport { NgForOf } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\n\nexport class AddModuleModalResources {\n  public static moduleType = 'moduleType';\n  public static locationId = 'locationId';\n  public static addEvent = 'add_module_addEvent';\n  public static closeEvent = 'add_module_closeEvent';\n}\n\nexport interface AddModuleModalResponse {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n}\n\nexport interface ModuleSubTypeSelection {\n  id: ModuleSubType;\n  value: string;\n}\n\n@Component({\n  selector: 'app-add-module-modal',\n  imports: [NgForOf, FormsModule],\n  templateUrl: './add-module-modal.component.html',\n  styleUrl: './add-module-modal.component.scss',\n})\nexport class AddModuleModalComponent\n  extends ModalBaseComponent\n  implements AfterContentInit\n{\n  options: ModuleSubTypeSelection[] = [];\n\n  locationId = \"0\";\n  moduleType: ModuleType = ModuleType.none;\n  selectedSubType: ModuleSubType = ModuleSubType.none;\n\n  moduleTypes: Map<ModuleType, string>;\n\n  moduleSubTypes: Map<ModuleType, ModuleSubTypeSelection[]>;\n\n  constructor() {\n    super();\n\n    this.moduleTypes = new Map<ModuleType, string>([\n      [ModuleType.uart, 'Serial'],\n      [ModuleType.i2c, 'I2C'],\n      [ModuleType.gpio, 'GPIO'],\n    ]);\n\n    this.moduleSubTypes = new Map<ModuleType, ModuleSubTypeSelection[]>([\n      [\n        ModuleType.uart,\n        [\n          { id: ModuleSubType.genericSerial, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsSerial,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.kangaroo, value: 'Kangaroo' },\n          { id: ModuleSubType.maestro, value: 'Maestro' },\n        ],\n      ],\n      [\n        ModuleType.i2c,\n        [\n          { id: ModuleSubType.genericI2C, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsI2C,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.pwmBoard, value: 'PWM Board' },\n        ],\n      ],\n    ]);\n  }\n\n  ngAfterContentInit(): void {\n    this.locationId = this.resources.get(\n      AddModuleModalResources.locationId,\n    ) as string;\n\n    this.moduleType = this.resources.get(\n      AddModuleModalResources.moduleType,\n    ) as ModuleType;\n\n    if (this.moduleSubTypes.has(this.moduleType)) {\n      this.options = this.moduleSubTypes.get(\n        this.moduleType,\n      ) as ModuleSubTypeSelection[];\n    }\n  }\n\n  modalChange($event: Event) {\n    this.selectedSubType = +($event.target as HTMLInputElement).value;\n  }\n\n  addModule() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.addEvent, {\n      locationId: this.locationId,\n      moduleType: this.moduleType,\n      moduleSubType: this.selectedSubType,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.closeEvent, {});\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "addEvent",
                    "defaultValue": "'add_module_addEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'add_module_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "locationId",
                    "defaultValue": "'locationId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "moduleType",
                    "defaultValue": "'moduleType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AlertModalResources",
            "id": "class-AlertModalResources-883bdf79d6ea8bd563d246a7d32c753d5672e703a23483224d6319ed9970c8c334d89f9fc825837685a90ba01f28a14d9bec488c677e5676b8d9c31bf40cd25f",
            "file": "src/app/components/modals/alert-modal/alert-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../modal-base/modal-callback-event';\n\nexport class AlertModalResources {\n  public static message = 'message';\n  public static closeEvent = 'alert_closeEvent';\n}\n\n@Component({\n  selector: 'app-alert-modal',\n  templateUrl: './alert-modal.component.html',\n  styleUrl: './alert-modal.component.scss',\n  standalone: true,\n})\nexport class AlertModalComponent extends ModalBaseComponent implements OnInit {\n  message!: string;\n  closeEvent!: unknown;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.message = this.resources.get(AlertModalResources.message) as string;\n    this.closeEvent = this.resources.get(AlertModalResources.closeEvent);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      AlertModalResources.closeEvent,\n      this.closeEvent,\n    );\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'alert_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "'message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AudioEventModalResources",
            "id": "class-AudioEventModalResources-f8b33d3eff89bb8458b4f21c61945232230c28380cd012ae31e97360a708b9a98efde0b20b0cfabaf6c8872b16ffd481521811cfdbf00be1f9b4ed8af742a2af",
            "file": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AudioFile, ScriptEvent } from 'astros-common';\nimport { AudioService } from 'src/app/services/audio/audio.service';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class AudioEventModalResources {\n  public static audioFiles = 'audioFiles';\n  public static selectedFile = 'selectedFile';\n}\n\n@Component({\n  selector: 'app-audio-event-modal',\n  templateUrl: './audio-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './audio-event-modal.component.scss',\n  ],\n  imports: [FormsModule, NgFor, DecimalPipe],\n})\nexport class AudioEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  audioFiles: AudioFile[];\n\n  selectedFile: string;\n\n  constructor(private audioService: AudioService) {\n    super();\n    this.audioFiles = new Array<AudioFile>();\n    this.selectedFile = '0';\n\n    const observer = {\n      next: (result: AudioFile[]) => (this.audioFiles = result),\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.audioService.getAudioFiles().subscribe(observer);\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      ScriptEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.selectedFile = payload.value;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n    this.scriptEvent.dataJson = JSON.stringify({ value: this.selectedFile });\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      id: this.callbackType,\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "audioFiles",
                    "defaultValue": "'audioFiles'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "'selectedFile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChannelTestModalResources",
            "id": "class-ChannelTestModalResources-b7ad7e745bbed56215dfacb88eb8660dc25c290c3f456f8091729626699e6f9dd7e3ef06bfb89c710b505c07182b7aaef888a2366a1174ef8f9f19cd196f3d3f",
            "file": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChannelSubType, ChannelType, KangarooAction } from 'astros-common';\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\nimport { NgIf } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ChannelTestModalResources {\n  public static controller = 'controller';\n  public static channelType = 'channelType';\n  public static channelSubType = 'channelSubType';\n  public static channelId = 'channelId';\n\n  public static channelTest = 'channelTest_test';\n}\n\nexport interface ChannelTestModalResponse {\n  controllerId: number;\n  commandType: ChannelType;\n  command: unknown;\n}\n\n@Component({\n  selector: 'app-channel-test-modal',\n  templateUrl: './channel-test-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './channel-test-modal.component.scss',\n  ],\n  imports: [NgIf, FormsModule],\n})\nexport class ChannelTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  controllerId = 0;\n  channelId = 0;\n\n  channelType: ChannelType = ChannelType.none;\n  channelSubType: ChannelSubType = ChannelSubType.none;\n\n  speed = 1;\n  position = 0;\n  value = '';\n\n  kangarooCh = 1;\n  kangarooAction = 1;\n  kangarooSpd?: number;\n  kangarooPos?: number;\n  spdDisabled = true;\n  posDisabled = true;\n\n  gpioLevel = 0;\n\n  constructor() {\n    super();\n    this.callbackType = ChannelTestModalResources.channelTest;\n  }\n\n  ngOnInit(): void {\n    this.controllerId = this.resources.get(\n      ChannelTestModalResources.controller,\n    ) as number;\n    this.channelType = this.resources.get(\n      ChannelTestModalResources.channelType,\n    ) as ChannelType;\n    this.channelSubType = this.resources.get(\n      ChannelTestModalResources.channelSubType,\n    ) as ChannelSubType;\n    this.channelId = this.resources.get(\n      ChannelTestModalResources.channelId,\n    ) as number;\n  }\n\n  runClicked() {\n    const evt = new ModalCallbackEvent(ChannelTestModalResources.channelTest, {\n      controllerId: this.controllerId,\n      commandType: this.channelType,\n      command: this.getCommand(),\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  getCommand(): unknown {\n    switch (this.channelType) {\n      case ChannelType.i2c:\n        return { id: this.channelId, val: this.value };\n      //case ChannelType.servo:\n      //  return { id: this.channelId, position: this.position, speed: this.speed };\n      case ChannelType.uart:\n        if (this.channelSubType === ChannelSubType.kangaroo) {\n          return { val: this.getKangarooCommand() };\n        } else {\n          return { val: this.value };\n        }\n      case ChannelType.gpio:\n        return { id: this.channelId, val: this.gpioLevel };\n    }\n    return {};\n  }\n\n  selectChange($event: Event) {\n    if (($event.target as HTMLInputElement).id === 'cmdselect') {\n      this.spdDisabled =\n        +this.kangarooAction !== 3 && +this.kangarooAction !== 4;\n      this.posDisabled = +this.kangarooAction !== 4;\n\n      if (+this.kangarooAction !== 3 && +this.kangarooAction !== 4) {\n        this.kangarooSpd = 0;\n      }\n      if (+this.kangarooAction !== 4) {\n        this.kangarooPos = 0;\n      }\n    }\n  }\n\n  getKangarooCommand(): string {\n    let cmd = '';\n\n    switch (+this.kangarooAction) {\n      case KangarooAction.start:\n        cmd = 'start';\n        break;\n      case KangarooAction.home:\n        cmd = 'home';\n        break;\n      case KangarooAction.speed:\n        cmd = `s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`;\n        break;\n      case KangarooAction.position:\n        cmd = `p${this.kangarooPos === undefined ? 0 : this.kangarooPos} s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`;\n        break;\n    }\n\n    return `${this.kangarooCh},${cmd}`;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelSubType",
                    "defaultValue": "'channelSubType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelTest",
                    "defaultValue": "'channelTest_test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelType",
                    "defaultValue": "'channelType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controller",
                    "defaultValue": "'controller'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChannelValue",
            "id": "class-ChannelValue-086bd499939d5cb86375b7626bf8edb45df8ab8ac6c72e483b0f68ad55783cbc515772345128c7f800475fda541d3d93cad84ba783d980c9c4537514cd96ea2a",
            "file": "src/app/models/script-resources.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  ChannelType,\n  I2cChannel,\n  Script,\n  ControllerLocation,\n  GpioChannel,\n} from 'astros-common';\nimport { ModuleChannelType } from 'astros-common/dist/control_module/base_channel';\n\nexport class LocationDetails {\n  id: string;\n  name: string;\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n}\n\nexport class ChannelValue {\n  available: boolean;\n  channel: ModuleChannelType;\n\n  constructor(channel: ModuleChannelType, available: boolean) {\n    this.available = available;\n    this.channel = channel;\n  }\n}\n\nexport class ScriptResources {\n  locations: Map<string, LocationDetails>;\n\n  uartChannels: Map<string, ChannelValue[]>;\n\n  servoChannels: Map<string, ChannelValue[]>;\n\n  i2cChannels: Map<string, ChannelValue[]>;\n\n  gpioChannels: Map<string, ChannelValue[]>;\n\n  constructor(locations: ControllerLocation[]) {\n    this.locations = new Map<string, LocationDetails>();\n    this.servoChannels = new Map<string, ChannelValue[]>();\n    this.i2cChannels = new Map<string, ChannelValue[]>();\n    this.uartChannels = new Map<string, ChannelValue[]>();\n    this.gpioChannels = new Map<string, ChannelValue[]>();\n\n    locations.forEach((loc) => {\n      this.locations.set(loc.id, new LocationDetails(loc.id, loc.locationName));\n\n      this.gpioChannels.set(\n        loc.id,\n        loc.gpioModule.channels.map(\n          (ch: GpioChannel) => new ChannelValue(ch, ch.enabled),\n        ),\n      );\n\n      this.uartChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.servoChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.i2cChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.gpioChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n    });\n  }\n\n  applyScript(script: Script): void {\n    script.scriptChannels.forEach((ch) => {\n      switch (ch.type) {\n        case ChannelType.uart:\n          this.provisionChannel(\n            this.uartChannels,\n            ch.locationId,\n            ch.channel.id,\n          );\n          break;\n        case ChannelType.i2c:\n          this.provisionChannel(this.i2cChannels, ch.locationId, ch.channel.id);\n          break;\n        case ChannelType.audio:\n          break;\n        case ChannelType.gpio:\n          this.provisionChannel(\n            this.gpioChannels,\n            ch.locationId,\n            ch.channel.id,\n          );\n          break;\n      }\n    });\n  }\n\n  getAvailableModules(): Map<number, Map<ChannelType, string>> {\n    const result = new Map<number, Map<ChannelType, string>>();\n\n    /*for (const ctrl of this.locations.keys()) {\n      if (ctrl === 4 || ctrl === 0) {\n        continue;\n      }\n\n      result.set(ctrl, this.setModuleValues(ctrl));\n    }\n  */\n    return result;\n  }\n\n  getAvailableChannels(): Map<number, Map<ChannelType, ChannelValue[]>> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const result = new Map<number, Map<ChannelType, any>>();\n\n    /*\n    for (const ctrl of this.locations.keys()) {\n      if (ctrl === 4 || ctrl === 0) {\n        continue;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const vals = new Map<ChannelType, any>();\n\n      vals.set(ChannelType.i2c, this.i2cChannels.get(ctrl));\n      vals.set(ChannelType.uart, this.uartChannels.get(ctrl));\n      vals.set(ChannelType.gpio, this.gpioChannels.get(ctrl));\n\n      result.set(ctrl, vals);\n    }\n    */\n    return result;\n  }\n\n  private setModuleValues(_: number): Map<ChannelType, string> {\n    const vals = new Map<ChannelType, string>();\n\n    vals.set(ChannelType.i2c, 'I2C');\n    vals.set(ChannelType.uart, 'Serial');\n    vals.set(ChannelType.gpio, 'GPIO');\n\n    return vals;\n  }\n\n  addChannel(\n    controller: string,\n    type: ChannelType,\n    id: number,\n  ): ModuleChannelType | undefined {\n    /*if (controller === 4) {\n      this.locations.delete(4);\n      return undefined;\n    }\n    */\n    switch (type) {\n      case ChannelType.uart:\n        return this.provisionChannel(this.uartChannels, controller, id);\n      case ChannelType.i2c:\n        return this.provisionChannel(this.i2cChannels, controller, id);\n      case ChannelType.gpio:\n        return this.provisionChannel(this.gpioChannels, controller, id);\n    }\n\n    return undefined;\n  }\n\n  provisionChannel(\n    map: Map<string, ChannelValue[]>,\n    location: string,\n    id: number,\n  ): ModuleChannelType | undefined {\n    const idx = map.get(location)?.findIndex((x) => x.channel.id === id);\n    if (idx != undefined && idx > -1) {\n      this.gpioChannels.get(location)![idx].available = false;\n      return this.gpioChannels.get(location)![idx].channel;\n    }\n\n    return undefined;\n  }\n\n  removeChannel(location: string, type: ChannelType, id: number): void {\n    switch (type) {\n      case ChannelType.uart:\n        this.deprovisionChannel(this.uartChannels, location, id);\n        break;\n      case ChannelType.i2c:\n        this.deprovisionChannel(this.i2cChannels, location, id);\n        break;\n      case ChannelType.gpio:\n        this.deprovisionChannel(this.gpioChannels, location, id);\n        break;\n    }\n  }\n\n  deprovisionChannel(\n    map: Map<string, ChannelValue[]>,\n    location: string,\n    id: number,\n  ): void {\n    const idx = map.get(location)?.findIndex((x) => x.channel.id === id);\n    if (idx !== undefined && idx > -1) {\n      map.get(location)![idx].available = true;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "channel",
                        "type": "ModuleChannelType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "available",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "channel",
                        "type": "ModuleChannelType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "available",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "available",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConfirmModalResources",
            "id": "class-ConfirmModalResources-62289e24c33d59b39d27286dbf559d688236645ee57fb0c11fbc66e8977402dec220d9f26e29949fc8a4ee40ba9e952ebd88351e00b93c0ec21a3903279826a8",
            "file": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../modal-base/modal-callback-event';\n\nexport interface ConfirmModalEvent {\n  id: string;\n  val: unknown;\n}\n\nexport class ConfirmModalResources {\n  public static action = 'action';\n  public static message = 'message';\n  public static confirmEvent = 'confirm_confirmEvent';\n  public static closeEvent = 'confirm_closeEvent';\n}\n\n@Component({\n  selector: 'app-astros-confirm-modal',\n  templateUrl: './confirm-modal.component.html',\n  styleUrls: ['./confirm-modal.component.scss'],\n  standalone: true,\n})\nexport class ConfirmModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  action!: string;\n  message!: string;\n  confirmEvent!: ConfirmModalEvent;\n  closeEvent!: ConfirmModalEvent;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.action = this.resources.get(ConfirmModalResources.action) as string;\n    this.message = this.resources.get(ConfirmModalResources.message) as string;\n    this.confirmEvent = this.resources.get(\n      ConfirmModalResources.confirmEvent,\n    ) as ConfirmModalEvent;\n    this.closeEvent = this.resources.get(\n      ConfirmModalResources.closeEvent,\n    ) as ConfirmModalEvent;\n  }\n\n  confirm() {\n    const evt = new ModalCallbackEvent(\n      ConfirmModalResources.confirmEvent,\n      this.confirmEvent,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      ConfirmModalResources.closeEvent,\n      this.closeEvent,\n    );\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "action",
                    "defaultValue": "'action'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'confirm_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "confirmEvent",
                    "defaultValue": "'confirm_confirmEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "'message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ControllerModalResources",
            "id": "class-ControllerModalResources-73c081237821fff93ac73f281795da397d76c09924f6584567c5f2a5a37b46dc3a12aa1a0c9dfca385c9ff445f857fcc7596e320baab10cf2d3b1390b06e5a46",
            "file": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChannelType } from 'astros-common';\nimport { ChannelValue, LocationDetails } from 'src/app/models/script-resources';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, NgIf, KeyValuePipe } from '@angular/common';\n\nexport class ControllerModalResources {\n  public static controllers = 'controllers';\n  public static modules = 'modules';\n  public static channels = 'channels';\n\n  public static addChannelEvent = 'controller_addChannel';\n  public static removeChannelEvent = 'controller_removeChannel';\n  public static closeEvent = 'controller_close';\n}\n\nexport interface ControllerModalResponse {\n  controller: string;\n  module: ChannelType;\n  channels: number[];\n}\n\n@Component({\n  selector: 'app-controller-modal',\n  templateUrl: './controller-modal.component.html',\n  styleUrls: ['./controller-modal.component.scss'],\n  imports: [FormsModule, NgFor, NgIf, KeyValuePipe],\n})\nexport class ControllerModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  errorMessage: string;\n\n  controllers!: Map<number, LocationDetails>;\n  selectedController = 0;\n\n  private availableModules!: Map<number, Map<ChannelType, string>>;\n  modules: Map<ChannelType, string>;\n  selectedModule: ChannelType = ChannelType.none;\n\n  private availableChannels!: Map<number, Map<ChannelType, ChannelValue[]>>;\n  channels: ChannelValue[];\n  selectedChannel = -1;\n  selectedChannels: unknown[] = [];\n\n  constructor() {\n    super();\n\n    this.errorMessage = '';\n\n    this.modules = new Map<ChannelType, string>();\n    this.channels = new Array<ChannelValue>();\n  }\n\n  ngOnInit(): void {\n    this.controllers = this.resources.get(\n      ControllerModalResources.controllers,\n    ) as Map<number, LocationDetails>;\n    this.availableModules = this.resources.get(\n      ControllerModalResources.modules,\n    ) as Map<number, Map<ChannelType, string>>;\n    this.availableChannels = this.resources.get(\n      ControllerModalResources.channels,\n    ) as Map<number, Map<ChannelType, ChannelValue[]>>;\n  }\n\n  modalChange($event: Event) {\n    // convert from string value to number for enum\n    if (($event.target as HTMLInputElement).id === 'controller-select') {\n      this.setModules(+($event.target as HTMLInputElement).value);\n    } else if (($event.target as HTMLInputElement).id === 'module-select') {\n      this.setChannels(+($event.target as HTMLInputElement).value);\n    }\n  }\n\n  addChannel() {\n    if (\n      +this.selectedController !== 4 &&\n      +this.selectedModule === ChannelType.none\n    ) {\n      this.errorMessage = 'Module Selection Required';\n      return;\n    }\n\n    if (\n      +this.selectedModule !== ChannelType.none &&\n      +this.selectedChannels.length < 1\n    ) {\n      this.errorMessage = 'Channel Selection Required';\n      return;\n    }\n\n    const evt = new ModalCallbackEvent(\n      ControllerModalResources.addChannelEvent,\n      {\n        controller: +this.selectedController,\n        module:\n          +this.selectedController === 4\n            ? ChannelType.audio\n            : +this.selectedModule,\n        channels: this.selectedChannels,\n      },\n    );\n\n    this.modalCallback.emit(evt);\n    this.clearOptions();\n  }\n\n  closeModal() {\n    this.clearOptions();\n    const evt = new ModalCallbackEvent(\n      ControllerModalResources.closeEvent,\n      null,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  private clearOptions() {\n    this.selectedController = 0;\n    this.selectedModule = ChannelType.none;\n    this.selectedChannel = -1;\n    document\n      .getElementById('module-select')\n      ?.setAttribute('disabled', 'disabled');\n    document\n      .getElementById('channel-select')\n      ?.setAttribute('disabled', 'disabled');\n  }\n\n  private setModules(controllerId: number) {\n    if (controllerId === 4) {\n      this.selectedModule = ChannelType.none;\n      this.selectedChannel = -1;\n      document\n        .getElementById('module-select')\n        ?.setAttribute('disabled', 'disabled');\n      document\n        .getElementById('channel-select')\n        ?.setAttribute('disabled', 'disabled');\n    } else {\n      const mods = this.availableModules.get(+this.selectedController);\n      if (mods) {\n        this.modules = mods;\n        document.getElementById('module-select')?.removeAttribute('disabled');\n        //this.selectedModule = ChannelType.none;\n        this.setChannels(this.selectedModule);\n      }\n    }\n  }\n\n  private setChannels(channelType: ChannelType) {\n    if (channelType === ChannelType.none) {\n      this.selectedChannel = -1;\n      document\n        .getElementById('channel-select')\n        ?.setAttribute('disabled', 'disabled');\n    } else {\n      const chs = this.availableChannels\n        .get(+this.selectedController)\n        ?.get(+channelType);\n      if (chs) {\n        this.channels = chs;\n        document.getElementById('channel-select')?.removeAttribute('disabled');\n      }\n    }\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "addChannelEvent",
                    "defaultValue": "'controller_addChannel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channels",
                    "defaultValue": "'channels'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'controller_close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controllers",
                    "defaultValue": "'controllers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "modules",
                    "defaultValue": "'modules'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "removeChannelEvent",
                    "defaultValue": "'controller_removeChannel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventMarkerHelper",
            "id": "class-EventMarkerHelper-abe2834036af878f8eb28e09fc3ff69d74d6f5a14fce8d2ca388d27c95680893ecdaa44bfe5b67f9d5b0ff08dbe7b86e24fd0cc27d5ae8e8903c71ef7da1d25e",
            "file": "src/app/pages/scripter/helper/event-marker-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  ChannelSubType,\n  ChannelType,\n  GenericSerialEvent,\n  GpioEvent,\n  HumanCyborgRelationsEvent,\n  I2cEvent,\n  KangarooAction,\n  KangarooEvent,\n  ScriptEvent,\n} from 'astros-common';\n\nexport default class EventMarkerHelper {\n  static generateText(event: ScriptEvent): string[] {\n    switch (event.channelType) {\n      case ChannelType.audio:\n        return this.generateBasicResponse('Audio Track');\n      //case ChannelType.servo:\n      //    return this.servoText(event.dataJson);\n      case ChannelType.i2c:\n        return this.i2cText(event.dataJson);\n      case ChannelType.gpio:\n        return this.gpioText(event.dataJson);\n      case ChannelType.uart:\n        return this.uartText(event.channelSubType, event.dataJson);\n      default:\n        return this.generateBasicResponse('error');\n    }\n  }\n\n  /*private static servoText(json: string): Array<string> {\n        const evt = JSON.parse(json) as ServoEvent;\n        const result = new Array<string>();\n        result[0] = 'Position:';\n        result[1] = evt.position.toString();\n        result[2] = 'Speed:';\n        result[3] = evt.speed.toString();\n\n        return result;\n    }*/\n\n  private static i2cText(json: string): string[] {\n    const evt = JSON.parse(json) as I2cEvent;\n    const result = new Array<string>();\n    result[0] = '\\u00A0';\n    result[1] = 'Message:';\n    result[2] = evt.message;\n    result[3] = '';\n\n    return result;\n  }\n\n  private static gpioText(json: string): string[] {\n    const evt = JSON.parse(json) as GpioEvent;\n    const result = new Array<string>();\n    result[0] = '\\u00A0';\n    result[1] = 'State:';\n    result[2] = evt.setHigh ? 'High' : 'Low';\n    result[3] = '';\n\n    return result;\n  }\n\n  private static uartText(subType: ChannelSubType, json: string): string[] {\n    switch (subType) {\n      case ChannelSubType.genericSerial:\n        return this.genericUart(json);\n      case ChannelSubType.kangaroo:\n        return this.kangaroo(json);\n      case ChannelSubType.humanCyborgRelations:\n        return this.humanCyborg(json);\n      default:\n        return this.generateBasicResponse('error');\n    }\n  }\n\n  private static genericUart(json: string): string[] {\n    const evt = JSON.parse(json) as GenericSerialEvent;\n    const result = new Array<string>();\n    result[0] = '\\u00A0';\n    result[1] = 'Message:';\n    result[2] = evt.value;\n    result[3] = '';\n\n    return result;\n  }\n\n  static kangaroo(json: string): string[] {\n    const evt = JSON.parse(json) as KangarooEvent;\n    const result = new Array<string>();\n    result[0] = 'CH 1:';\n    result[1] = this.getKangarooActionName(evt.ch1Action);\n    result[2] = 'CH 2:';\n    result[3] = this.getKangarooActionName(evt.ch2Action);\n\n    return result;\n  }\n\n  static getKangarooActionName(action: KangarooAction): string {\n    switch (action) {\n      case KangarooAction.start:\n        return 'Start';\n      case KangarooAction.home:\n        return 'Home';\n      case KangarooAction.position:\n        return 'Position';\n      case KangarooAction.speed:\n        return 'Speed';\n      case KangarooAction.none:\n        return 'None';\n      default:\n        return 'error';\n    }\n  }\n\n  static humanCyborg(json: string): string[] {\n    const evt = JSON.parse(json) as HumanCyborgRelationsEvent;\n    const result = new Array<string>();\n    result[0] = '';\n    result[1] = 'Event Count';\n    result[2] = evt.commands.length.toString();\n    result[3] = '';\n\n    return result;\n  }\n\n  static generateBasicResponse(val: string): string[] {\n    const result = [];\n    result[0] = '\\u00A0';\n    result[1] = val;\n    result[2] = '';\n    result[3] = '';\n    return result;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "generateBasicResponse",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateText",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "genericUart",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKangarooActionName",
                    "args": [
                        {
                            "name": "action",
                            "type": "KangarooAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "KangarooAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gpioText",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "humanCyborg",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "i2cText",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "kangaroo",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uartText",
                    "args": [
                        {
                            "name": "subType",
                            "type": "ChannelSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "subType",
                            "type": "ChannelSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FileUpload",
            "id": "class-FileUpload-b60239b7b5c140d1ed7f5011f7a140b721b7b04b04685d81b8dfc9dbb37fba69ede8e35c6208407124d771c8e2c5e86788ae7b7159859bbd61ef44b80abb54f9",
            "file": "src/app/models/upload-file.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Subscription } from 'rxjs';\n\nexport class FileUpload {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fileData: string | any;\n  uploadProgress?: number;\n  subscription?: Subscription;\n\n  constructor(file: string | unknown) {\n    this.uploadProgress = 0;\n    this.fileData = file;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "file",
                        "type": "string | ",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "file",
                        "type": "string | ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "fileData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "uploadProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormatModalResources",
            "id": "class-FormatModalResources-89f92a0787056b759c53faf0b4f36538d71f94a1629af85b7e02ec0b48738aa1185ad2cc50a971e78e9cff1775506f1a78faf4fe195d0e32f61e442793849857",
            "file": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\ninterface ResourceController {\n  id: number;\n  name: string;\n  address: string;\n}\n\ninterface Controller {\n  id: number;\n  name: string;\n  address: string;\n  selected: boolean;\n}\n\nexport class FormatModalResources {\n  public static controllers = 'controllers';\n\n  public static formatSdEvent = 'format_formatSD';\n  public static closeEvent = 'format_close';\n}\n\n@Component({\n  selector: 'app-format-modal',\n  templateUrl: './format-modal.component.html',\n  styleUrls: ['./format-modal.component.scss'],\n  imports: [NgFor, FormsModule],\n})\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\n  controllers: Controller[] = [];\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(FormatModalResources.controllers)) {\n      for (const controller of this.resources.get(\n        FormatModalResources.controllers,\n      ) as ResourceController[]) {\n        this.controllers.push({\n          id: controller.id,\n          name: controller.name,\n          address: controller.address,\n          selected: false,\n        });\n      }\n    }\n  }\n\n  ok() {\n    const result = [];\n\n    for (const controller of this.controllers) {\n      if (controller.selected) {\n        result.push({ name: controller.name, address: controller.address });\n      }\n    }\n\n    const evt = new ModalCallbackEvent(\n      FormatModalResources.formatSdEvent,\n      result,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(FormatModalResources.closeEvent, null);\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'format_close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controllers",
                    "defaultValue": "'controllers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "formatSdEvent",
                    "defaultValue": "'format_formatSD'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GpioEventModalResources",
            "id": "class-GpioEventModalResources-5ddd19b6f98d76278ced2b4715d3370cd84310efc8b367e3515ec113af83afea67eb22ecb0dd8c5af5a7dea59c6c0d2d7f94c96bb4ef7a48575e7c02da03c3a5",
            "file": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GpioEvent, ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class GpioEventModalResources {\n  public static gpioId = 'gpioId';\n}\n\n@Component({\n  selector: 'app-gpio-event-modal',\n  templateUrl: './gpio-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './gpio-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class GpioEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  channelId!: number;\n  state = 0;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      ScriptEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    this.channelId = this.resources.get(\n      GpioEventModalResources.gpioId,\n    ) as number;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.state = payload.setHigh ? 1 : 0;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  selectChange($event: Event) {\n    this.state = +($event.target as HTMLInputElement).value;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new GpioEvent(\n      +this.channelId,\n      +this.state === 1 ? true : false,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "gpioId",
                    "defaultValue": "'gpioId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HcrModalResources",
            "id": "class-HcrModalResources-215458fed2e1d5efeb5cd27ccb04f03a08fbf38384e9d32cac645f126b90e333041ae4774139effc91d90fc64cfee34e3d18fdb04c5c2d859f93fe8b6c510ef8",
            "file": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport {\n  HcrCommand,\n  HcrCommandCategory,\n  HumanCyborgRelationsCmd,\n  HumanCyborgRelationsEvent,\n  HumanCyborgRelationsModule,\n  ScriptEvent,\n} from 'astros-common';\nimport { faBan } from '@fortawesome/free-solid-svg-icons';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, DecimalPipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\ninterface HcrCommandListItem {\n  id: HumanCyborgRelationsCmd;\n  name: string;\n}\n\nexport class HcrModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-human-cyborg-modal',\n  templateUrl: './human-cyborg-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './human-cyborg-modal.component.scss',\n  ],\n  imports: [FormsModule, NgFor, FontAwesomeModule, DecimalPipe],\n})\nexport class HumanCyborgModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  faRemove = faBan;\n\n  uartChannel!: number;\n  baudRate!: number;\n  commandCategory: string;\n  command!: string;\n  valueA!: string;\n  valueB!: string;\n\n  selectedCommands: HcrCommand[];\n  commands: HcrCommandListItem[];\n\n  hasValueA: HumanCyborgRelationsCmd[];\n  hasValueB: HumanCyborgRelationsCmd[];\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.selectedCommands = new Array<HcrCommand>();\n    this.commands = new Array<HcrCommandListItem>();\n    this.commandCategory = HcrCommandCategory.stimuli.toString();\n    this.setAvailableCommands(+this.commandCategory);\n\n    this.hasValueA = new Array<HumanCyborgRelationsCmd>();\n    this.hasValueA.push(\n      HumanCyborgRelationsCmd.minSecondsBetweenMusings,\n      HumanCyborgRelationsCmd.maxSecondsBetweenMusings,\n      HumanCyborgRelationsCmd.playWavOnA,\n      HumanCyborgRelationsCmd.playWavOnB,\n      HumanCyborgRelationsCmd.vocalizerVolume,\n      HumanCyborgRelationsCmd.wavAVolume,\n      HumanCyborgRelationsCmd.wavBVolume,\n      HumanCyborgRelationsCmd.setHappyLevel,\n      HumanCyborgRelationsCmd.setSadLevel,\n      HumanCyborgRelationsCmd.setMadLevel,\n      HumanCyborgRelationsCmd.setScaredLevel,\n    );\n\n    this.hasValueB = new Array<HumanCyborgRelationsCmd>();\n    this.hasValueB.push(\n      HumanCyborgRelationsCmd.playSdRandomOnA,\n      HumanCyborgRelationsCmd.playSdRandomOnB,\n    );\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      HcrModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(HcrModalResources.baudRate) as number;\n    this.scriptEvent = this.resources.get(\n      HcrModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.selectedCommands.push(...payload.commands);\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  categoryChange(_: unknown) {\n    this.errorMessage = '';\n    this.setAvailableCommands(+this.commandCategory);\n  }\n\n  commandChange(_: unknown) {\n    this.errorMessage = '';\n    if (this.hcrHasBValue(+this.command)) {\n      document.getElementById('value-a')?.removeAttribute('disabled');\n      document.getElementById('value-b')?.removeAttribute('disabled');\n      return;\n    }\n    if (this.hcrHasAValue(+this.command)) {\n      document.getElementById('value-a')?.removeAttribute('disabled');\n      document.getElementById('value-b')?.setAttribute('disabled', 'disabled');\n      return;\n    }\n\n    document.getElementById('value-a')?.setAttribute('disabled', 'disabled');\n    document.getElementById('b')?.setAttribute('disabled', 'disabled');\n  }\n\n  setAvailableCommands(category: HcrCommandCategory) {\n    this.commands.splice(0);\n\n    switch (category) {\n      case HcrCommandCategory.stimuli:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.mildHappy),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeHappy),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildSad),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeSad),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildAngry),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeAngry),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildScared),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeScared),\n          this.hcrListItem(HumanCyborgRelationsCmd.overload),\n        );\n        break;\n      case HcrCommandCategory.muse:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.enableMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.disableMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.toggleMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.triggerMusing),\n          this.hcrListItem(HumanCyborgRelationsCmd.minSecondsBetweenMusings),\n          this.hcrListItem(HumanCyborgRelationsCmd.maxSecondsBetweenMusings),\n        );\n        break;\n      case HcrCommandCategory.sdWav:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnB),\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnB),\n        );\n        break;\n      case HcrCommandCategory.stop:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.panicStop),\n          this.hcrListItem(HumanCyborgRelationsCmd.gracefulStop),\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnB),\n        );\n        break;\n      case HcrCommandCategory.volume:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.vocalizerVolume),\n          this.hcrListItem(HumanCyborgRelationsCmd.wavAVolume),\n          this.hcrListItem(HumanCyborgRelationsCmd.wavBVolume),\n        );\n        break;\n      case HcrCommandCategory.override:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.enableImprov),\n          this.hcrListItem(HumanCyborgRelationsCmd.enableCanonical),\n          this.hcrListItem(HumanCyborgRelationsCmd.enablePersonalityOverride),\n          this.hcrListItem(HumanCyborgRelationsCmd.disablePersonalityOverride),\n          this.hcrListItem(HumanCyborgRelationsCmd.zeroEmotions),\n          this.hcrListItem(HumanCyborgRelationsCmd.setHappyLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setSadLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setMadLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setScaredLevel),\n        );\n        break;\n    }\n\n    if (this.commands.length > 0) {\n      this.command = this.commands[0].id.toString();\n    }\n  }\n\n  addCommand() {\n    let missingA = false;\n    let missingB = false;\n\n    if (this.hcrHasBValue(+this.command)) {\n      if (this.valueA === undefined || this.valueA === null) {\n        missingA = true;\n      }\n      if (this.valueB === undefined || this.valueB === null) {\n        missingB = true;\n      }\n    }\n\n    if (this.hcrHasAValue(+this.command)) {\n      if (this.valueA === undefined || this.valueA === null) {\n        missingA = true;\n      }\n    }\n\n    if (missingA || missingB) {\n      this.errorMessage = `Required Values Missing: ${missingA ? 'A' : ''}${missingA && missingB ? ',' : ''}${missingB ? 'B' : ''}`;\n      return;\n    }\n\n    this.selectedCommands.push(\n      new HcrCommand(\n        crypto.randomUUID().toString(),\n        +this.commandCategory,\n        +this.command,\n        +this.valueA,\n        +this.valueB,\n      ),\n    );\n  }\n\n  removeCommand(id: string) {\n    const cmdIdx = this.selectedCommands?.findIndex((x) => x.id === id);\n    if (cmdIdx != undefined && cmdIdx > -1) {\n      this.selectedCommands.splice(cmdIdx, 1);\n    }\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new HumanCyborgRelationsEvent(\n      this.uartChannel,\n      this.baudRate,\n      this.selectedCommands,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  formatSelectedCommand(cmd: HcrCommand) {\n    if (this.hcrHasBValue(cmd.command)) {\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA} ${cmd.valueB}`;\n    }\n\n    if (this.hcrHasAValue(cmd.command)) {\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA}`;\n    }\n\n    return this.hcrName(cmd.command);\n  }\n\n  hcrListItem(cmd: HumanCyborgRelationsCmd) {\n    return { id: cmd, name: this.hcrName(cmd) };\n  }\n\n  hcrName(cmd: HumanCyborgRelationsCmd) {\n    return HumanCyborgRelationsModule.getCommandName(cmd);\n  }\n\n  hcrHasBValue(cmd: HumanCyborgRelationsCmd) {\n    return this.hasValueB.find((x) => x === cmd) !== undefined;\n  }\n\n  hcrHasAValue(cmd: HumanCyborgRelationsCmd) {\n    return this.hasValueA.find((x) => x === cmd) !== undefined;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "baudRate",
                    "defaultValue": "'baudRate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpClientMock",
            "id": "class-HttpClientMock-04b3b15a0ef41f78de5d81da1412bbddf509b0ea45b5af0b23da9330d92af6f1d18c507ed6915ff62c4f0444066bbe3417f60208b6cf34ca8825d29ca00fe914",
            "file": "src/app/mocks/http-client.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class HttpClientMock {\r\n\r\n    public get(): void {\r\n        return;\r\n    }\r\n    \r\n    public post(): void {\r\n        return;\r\n    }\r\n    \r\n    public put(): void {\r\n        return;\r\n    }\r\n    \r\n    public delete(): void {\r\n        return;\r\n    }\r\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "post",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "put",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "I2cEventModalResources",
            "id": "class-I2cEventModalResources-b79500fca870d01343eea03be1d2f92293295d708001eb1321a4967f501244bef12f2f7a83b67dca54b08ffa3202f8927ec8f9117c27748a41401c850f58ebd8",
            "file": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { I2cEvent, ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class I2cEventModalResources {\n  public static i2cId = 'i2cId';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-i2c-event-modal',\n  templateUrl: './i2c-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './i2c-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class I2cEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  channelId!: number;\n  message: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.message = '';\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      I2cEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    this.channelId = this.resources.get(I2cEventModalResources.i2cId) as number;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.message = payload.message;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new I2cEvent(+this.channelId, this.message);\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "i2cId",
                    "defaultValue": "'i2cId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "KangarooEventModalResources",
            "id": "class-KangarooEventModalResources-52a9dd775b5c767247fe0dc9f153c1b8eafc493c645eb2c5e071dca31e6519534c6c91cea1febce0fde369ab650dd3b3343a8bfd82b1b914c840e2139bbb2452",
            "file": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  KangarooAction,\n  KangarooX2,\n  KangarooEvent,\n  ScriptEvent,\n} from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class KangarooEventModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static kangaroo = 'kangaroo';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-kangaroo-event-modal',\n  templateUrl: './kangaroo-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './kangaroo-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class KangarooEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uartChannel!: number;\n  baudRate!: number;\n  kangaroo!: KangarooX2;\n\n  channel1: string;\n  ch1Action: string;\n  ch1Speed?: number;\n  ch1Position?: number;\n  ch1SpdDisabled: boolean;\n  ch1PosDisabled: boolean;\n\n  channel2: string;\n  ch2Action: string;\n  ch2Speed?: number;\n  ch2Position?: number;\n  ch2SpdDisabled: boolean;\n  ch2PosDisabled: boolean;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.channel1 = 'Channel 1';\n    this.channel2 = 'Channel 2';\n\n    this.ch1Action = '0';\n    this.ch2Action = '0';\n\n    this.ch1SpdDisabled = true;\n    this.ch1PosDisabled = true;\n\n    this.ch2SpdDisabled = true;\n    this.ch2PosDisabled = true;\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      KangarooEventModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(\n      KangarooEventModalResources.baudRate,\n    ) as number;\n    this.kangaroo = this.resources.get(\n      KangarooEventModalResources.kangaroo,\n    ) as KangarooX2;\n\n    this.scriptEvent = this.resources.get(\n      KangarooEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.ch1Action = payload.ch1Action.toString();\n      this.ch1Speed = payload.ch1Speed;\n      this.ch1Position = payload.ch1Position;\n\n      this.ch2Action = payload.ch2Action.toString();\n      this.ch2Speed = payload.ch2Speed;\n      this.ch2Position = payload.ch2Position;\n    }\n\n    this.ch1SpdDisabled =\n      +this.ch1Action !== KangarooAction.speed &&\n      +this.ch1Action !== KangarooAction.position;\n    this.ch1PosDisabled = +this.ch1Action !== KangarooAction.position;\n\n    this.ch2SpdDisabled =\n      +this.ch2Action !== KangarooAction.speed &&\n      +this.ch2Action !== KangarooAction.position;\n    this.ch2PosDisabled = +this.ch2Action !== KangarooAction.position;\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  modalChange($event: Event) {\n    if (($event.target as HTMLInputElement).id === 'ch1select') {\n      this.ch1SpdDisabled = +this.ch1Action !== 3 && +this.ch1Action !== 4;\n      this.ch1PosDisabled = +this.ch1Action !== 4;\n\n      if (+this.ch1Action !== 3 && +this.ch1Action !== 4) {\n        this.ch1Speed = undefined;\n      }\n      if (+this.ch1Action !== 4) {\n        this.ch1Position = undefined;\n      }\n    } else if (($event.target as HTMLInputElement).id === 'ch2select') {\n      this.ch2SpdDisabled = +this.ch2Action !== 3 && +this.ch2Action !== 4;\n      this.ch2PosDisabled = +this.ch2Action !== 4;\n\n      if (+this.ch2Action !== 3 && +this.ch2Action !== 4) {\n        this.ch2Speed = undefined;\n      }\n      if (+this.ch2Action !== 4) {\n        this.ch2Position = undefined;\n      }\n    }\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new KangarooEvent(\n      this.uartChannel,\n      this.baudRate,\n      +this.ch1Action,\n      this.ch1Speed ?? 0,\n      this.ch1Position ?? 0,\n      +this.ch2Action,\n      this.ch2Speed ?? 0,\n      this.ch2Position ?? 0,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "baudRate",
                    "defaultValue": "'baudRate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "kangaroo",
                    "defaultValue": "'kangaroo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadingModalResources",
            "id": "class-LoadingModalResources-1b801c18d1dc893e0f1cad61bfddb45b9676fe106824bf0b108f8ba62f7addc396a30ea9ac66cc288f41e7334694ab85728ffa8e04bb562f438347589d083300",
            "file": "src/app/components/modals/modules/loading-modal/loading-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { ControllerService } from '@src/services';\nimport {\n  AstrOsLocationCollection,\n  ControllersResponse,\n  ControlModule,\n  TransmissionType,\n} from 'astros-common';\nimport { Subscription } from 'rxjs';\nimport { ModalCallbackEvent } from '../..//modal-base/modal-callback-event';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\n\nexport class LoadingModalResources {\n  public static closeEvent = 'loading_closeEvent';\n}\n\nexport interface LoadingModalResponse {\n  controllers: ControlModule[];\n  locations: AstrOsLocationCollection;\n}\n\n@Component({\n  selector: 'app-loading-modal',\n  templateUrl: './loading-modal.component.html',\n  styleUrls: ['./loading-modal.component.scss'],\n  standalone: true,\n})\nexport class LoadingModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  subscription!: Subscription;\n\n  message = 'Loading Controllers...';\n  controllersMsg = TransmissionType.controllers;\n  locations!: AstrOsLocationCollection;\n  controllers!: ControllersResponse;\n\n  locationsLoaded = false;\n  controllersLoaded = false;\n\n  disableButton = true;\n\n  constructor(\n    private socket: WebsocketService,\n    private controllerService: ControllerService,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    const locationsObserver = {\n      next: (result: AstrOsLocationCollection) => {\n        console.log('Loaded locations');\n        this.locations = result;\n        this.locationsLoaded = true;\n        this.checkLoadedState();\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.getLoadedLocations().subscribe(locationsObserver);\n\n    const observer = {\n      next: (_: unknown) => {\n        console.log('Synced controllers');\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.syncControllers().subscribe(observer);\n\n    this.subscription = this.socket.messages.subscribe((msg: unknown) => {\n      console.log('Received message', msg);\n      if (msg && typeof msg === 'object' && 'type' in msg)\n        if (msg.type === this.controllersMsg) {\n          this.controllers = msg as ControllersResponse;\n          this.controllersLoaded = true;\n          this.checkLoadedState();\n        }\n    });\n  }\n\n  checkLoadedState() {\n    if (this.locationsLoaded && this.controllersLoaded) {\n      if (this.controllers.success) {\n        this.closeModal();\n      } else {\n        this.disableButton = false;\n        this.message = 'Failed to load controllers, using cached values.';\n      }\n    }\n  }\n\n  closeModal(): void {\n    this.subscription?.unsubscribe();\n    const evt = new ModalCallbackEvent(LoadingModalResources.closeEvent, {\n      controllers: this.controllers.controllers,\n      locations: this.locations,\n    });\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'loading_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LocationDetails",
            "id": "class-LocationDetails-086bd499939d5cb86375b7626bf8edb45df8ab8ac6c72e483b0f68ad55783cbc515772345128c7f800475fda541d3d93cad84ba783d980c9c4537514cd96ea2a",
            "file": "src/app/models/script-resources.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  ChannelType,\n  I2cChannel,\n  Script,\n  ControllerLocation,\n  GpioChannel,\n} from 'astros-common';\nimport { ModuleChannelType } from 'astros-common/dist/control_module/base_channel';\n\nexport class LocationDetails {\n  id: string;\n  name: string;\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n}\n\nexport class ChannelValue {\n  available: boolean;\n  channel: ModuleChannelType;\n\n  constructor(channel: ModuleChannelType, available: boolean) {\n    this.available = available;\n    this.channel = channel;\n  }\n}\n\nexport class ScriptResources {\n  locations: Map<string, LocationDetails>;\n\n  uartChannels: Map<string, ChannelValue[]>;\n\n  servoChannels: Map<string, ChannelValue[]>;\n\n  i2cChannels: Map<string, ChannelValue[]>;\n\n  gpioChannels: Map<string, ChannelValue[]>;\n\n  constructor(locations: ControllerLocation[]) {\n    this.locations = new Map<string, LocationDetails>();\n    this.servoChannels = new Map<string, ChannelValue[]>();\n    this.i2cChannels = new Map<string, ChannelValue[]>();\n    this.uartChannels = new Map<string, ChannelValue[]>();\n    this.gpioChannels = new Map<string, ChannelValue[]>();\n\n    locations.forEach((loc) => {\n      this.locations.set(loc.id, new LocationDetails(loc.id, loc.locationName));\n\n      this.gpioChannels.set(\n        loc.id,\n        loc.gpioModule.channels.map(\n          (ch: GpioChannel) => new ChannelValue(ch, ch.enabled),\n        ),\n      );\n\n      this.uartChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.servoChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.i2cChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.gpioChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n    });\n  }\n\n  applyScript(script: Script): void {\n    script.scriptChannels.forEach((ch) => {\n      switch (ch.type) {\n        case ChannelType.uart:\n          this.provisionChannel(\n            this.uartChannels,\n            ch.locationId,\n            ch.channel.id,\n          );\n          break;\n        case ChannelType.i2c:\n          this.provisionChannel(this.i2cChannels, ch.locationId, ch.channel.id);\n          break;\n        case ChannelType.audio:\n          break;\n        case ChannelType.gpio:\n          this.provisionChannel(\n            this.gpioChannels,\n            ch.locationId,\n            ch.channel.id,\n          );\n          break;\n      }\n    });\n  }\n\n  getAvailableModules(): Map<number, Map<ChannelType, string>> {\n    const result = new Map<number, Map<ChannelType, string>>();\n\n    /*for (const ctrl of this.locations.keys()) {\n      if (ctrl === 4 || ctrl === 0) {\n        continue;\n      }\n\n      result.set(ctrl, this.setModuleValues(ctrl));\n    }\n  */\n    return result;\n  }\n\n  getAvailableChannels(): Map<number, Map<ChannelType, ChannelValue[]>> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const result = new Map<number, Map<ChannelType, any>>();\n\n    /*\n    for (const ctrl of this.locations.keys()) {\n      if (ctrl === 4 || ctrl === 0) {\n        continue;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const vals = new Map<ChannelType, any>();\n\n      vals.set(ChannelType.i2c, this.i2cChannels.get(ctrl));\n      vals.set(ChannelType.uart, this.uartChannels.get(ctrl));\n      vals.set(ChannelType.gpio, this.gpioChannels.get(ctrl));\n\n      result.set(ctrl, vals);\n    }\n    */\n    return result;\n  }\n\n  private setModuleValues(_: number): Map<ChannelType, string> {\n    const vals = new Map<ChannelType, string>();\n\n    vals.set(ChannelType.i2c, 'I2C');\n    vals.set(ChannelType.uart, 'Serial');\n    vals.set(ChannelType.gpio, 'GPIO');\n\n    return vals;\n  }\n\n  addChannel(\n    controller: string,\n    type: ChannelType,\n    id: number,\n  ): ModuleChannelType | undefined {\n    /*if (controller === 4) {\n      this.locations.delete(4);\n      return undefined;\n    }\n    */\n    switch (type) {\n      case ChannelType.uart:\n        return this.provisionChannel(this.uartChannels, controller, id);\n      case ChannelType.i2c:\n        return this.provisionChannel(this.i2cChannels, controller, id);\n      case ChannelType.gpio:\n        return this.provisionChannel(this.gpioChannels, controller, id);\n    }\n\n    return undefined;\n  }\n\n  provisionChannel(\n    map: Map<string, ChannelValue[]>,\n    location: string,\n    id: number,\n  ): ModuleChannelType | undefined {\n    const idx = map.get(location)?.findIndex((x) => x.channel.id === id);\n    if (idx != undefined && idx > -1) {\n      this.gpioChannels.get(location)![idx].available = false;\n      return this.gpioChannels.get(location)![idx].channel;\n    }\n\n    return undefined;\n  }\n\n  removeChannel(location: string, type: ChannelType, id: number): void {\n    switch (type) {\n      case ChannelType.uart:\n        this.deprovisionChannel(this.uartChannels, location, id);\n        break;\n      case ChannelType.i2c:\n        this.deprovisionChannel(this.i2cChannels, location, id);\n        break;\n      case ChannelType.gpio:\n        this.deprovisionChannel(this.gpioChannels, location, id);\n        break;\n    }\n  }\n\n  deprovisionChannel(\n    map: Map<string, ChannelValue[]>,\n    location: string,\n    id: number,\n  ): void {\n    const idx = map.get(location)?.findIndex((x) => x.channel.id === id);\n    if (idx !== undefined && idx > -1) {\n      map.get(location)![idx].available = true;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModalCallbackEvent",
            "id": "class-ModalCallbackEvent-554df36e9b4adb714e8fb932487c4df20c51533759c806bf39b896e4f25c495babe16e888c8d7b767c0e7f37515ecb1cee19d984ff02e45e465fe7b466a7a66d",
            "file": "src/app/components/modals/modal-base/modal-callback-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ModalCallbackEvent {\n  public type: string;\n  public value: unknown;\n\n  constructor(type: string, value: unknown) {\n    this.type = type;\n    this.value = value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScriptEventModalResources",
            "id": "class-ScriptEventModalResources-d05fe6b3839af3931c35319e20b800443e84d5da5d31eb00b4bbce7037c0e9029e8ec6be9db0f713b7e0e4dcde5b122f49b800b4a379b77dc5b5f3dd4450dfad",
            "file": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ModalBaseComponent } from '@src/components/modals/modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { ScriptEvent } from 'astros-common';\n\nexport class ScriptEventModalResources {\n  public static scriptEvent = 'scriptEvent';\n  public static callbackType = 'callbackType';\n  public static addEvent = 'script_addEvent';\n  public static editEvent = 'script_editEvent';\n  public static removeEvent = 'script_removeEvent';\n  public static closeEvent = 'script_closeEvent';\n}\n\nexport interface ScriptEventModalResponse {\n  scriptEvent: ScriptEvent;\n  time: number;\n}\n\n@Component({\n  selector: 'app-base-event-modal',\n  template: '',\n  styleUrls: ['./base-event-modal.component.scss'],\n  standalone: true,\n})\nexport class BaseEventModalComponent extends ModalBaseComponent {\n  protected scriptEvent!: ScriptEvent;\n  protected originalEventTime: number;\n  protected callbackType: string;\n\n  eventTime: number;\n  protected maxTime = 3000;\n  protected timeFactor = 10;\n\n  errorMessage: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  removeEvent() {\n    const evt = new ModalCallbackEvent(ScriptEventModalResources.removeEvent, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      ScriptEventModalResources.closeEvent,\n      null,\n    );\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "addEvent",
                    "defaultValue": "'script_addEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "callbackType",
                    "defaultValue": "'callbackType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'script_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "editEvent",
                    "defaultValue": "'script_editEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "removeEvent",
                    "defaultValue": "'script_removeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScriptResources",
            "id": "class-ScriptResources-086bd499939d5cb86375b7626bf8edb45df8ab8ac6c72e483b0f68ad55783cbc515772345128c7f800475fda541d3d93cad84ba783d980c9c4537514cd96ea2a",
            "file": "src/app/models/script-resources.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  ChannelType,\n  I2cChannel,\n  Script,\n  ControllerLocation,\n  GpioChannel,\n} from 'astros-common';\nimport { ModuleChannelType } from 'astros-common/dist/control_module/base_channel';\n\nexport class LocationDetails {\n  id: string;\n  name: string;\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n}\n\nexport class ChannelValue {\n  available: boolean;\n  channel: ModuleChannelType;\n\n  constructor(channel: ModuleChannelType, available: boolean) {\n    this.available = available;\n    this.channel = channel;\n  }\n}\n\nexport class ScriptResources {\n  locations: Map<string, LocationDetails>;\n\n  uartChannels: Map<string, ChannelValue[]>;\n\n  servoChannels: Map<string, ChannelValue[]>;\n\n  i2cChannels: Map<string, ChannelValue[]>;\n\n  gpioChannels: Map<string, ChannelValue[]>;\n\n  constructor(locations: ControllerLocation[]) {\n    this.locations = new Map<string, LocationDetails>();\n    this.servoChannels = new Map<string, ChannelValue[]>();\n    this.i2cChannels = new Map<string, ChannelValue[]>();\n    this.uartChannels = new Map<string, ChannelValue[]>();\n    this.gpioChannels = new Map<string, ChannelValue[]>();\n\n    locations.forEach((loc) => {\n      this.locations.set(loc.id, new LocationDetails(loc.id, loc.locationName));\n\n      this.gpioChannels.set(\n        loc.id,\n        loc.gpioModule.channels.map(\n          (ch: GpioChannel) => new ChannelValue(ch, ch.enabled),\n        ),\n      );\n\n      this.uartChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.servoChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.i2cChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n      this.gpioChannels.get(loc.id)?.sort((a, b) => {\n        return a.channel.id - b.channel.id;\n      });\n    });\n  }\n\n  applyScript(script: Script): void {\n    script.scriptChannels.forEach((ch) => {\n      switch (ch.type) {\n        case ChannelType.uart:\n          this.provisionChannel(\n            this.uartChannels,\n            ch.locationId,\n            ch.channel.id,\n          );\n          break;\n        case ChannelType.i2c:\n          this.provisionChannel(this.i2cChannels, ch.locationId, ch.channel.id);\n          break;\n        case ChannelType.audio:\n          break;\n        case ChannelType.gpio:\n          this.provisionChannel(\n            this.gpioChannels,\n            ch.locationId,\n            ch.channel.id,\n          );\n          break;\n      }\n    });\n  }\n\n  getAvailableModules(): Map<number, Map<ChannelType, string>> {\n    const result = new Map<number, Map<ChannelType, string>>();\n\n    /*for (const ctrl of this.locations.keys()) {\n      if (ctrl === 4 || ctrl === 0) {\n        continue;\n      }\n\n      result.set(ctrl, this.setModuleValues(ctrl));\n    }\n  */\n    return result;\n  }\n\n  getAvailableChannels(): Map<number, Map<ChannelType, ChannelValue[]>> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const result = new Map<number, Map<ChannelType, any>>();\n\n    /*\n    for (const ctrl of this.locations.keys()) {\n      if (ctrl === 4 || ctrl === 0) {\n        continue;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const vals = new Map<ChannelType, any>();\n\n      vals.set(ChannelType.i2c, this.i2cChannels.get(ctrl));\n      vals.set(ChannelType.uart, this.uartChannels.get(ctrl));\n      vals.set(ChannelType.gpio, this.gpioChannels.get(ctrl));\n\n      result.set(ctrl, vals);\n    }\n    */\n    return result;\n  }\n\n  private setModuleValues(_: number): Map<ChannelType, string> {\n    const vals = new Map<ChannelType, string>();\n\n    vals.set(ChannelType.i2c, 'I2C');\n    vals.set(ChannelType.uart, 'Serial');\n    vals.set(ChannelType.gpio, 'GPIO');\n\n    return vals;\n  }\n\n  addChannel(\n    controller: string,\n    type: ChannelType,\n    id: number,\n  ): ModuleChannelType | undefined {\n    /*if (controller === 4) {\n      this.locations.delete(4);\n      return undefined;\n    }\n    */\n    switch (type) {\n      case ChannelType.uart:\n        return this.provisionChannel(this.uartChannels, controller, id);\n      case ChannelType.i2c:\n        return this.provisionChannel(this.i2cChannels, controller, id);\n      case ChannelType.gpio:\n        return this.provisionChannel(this.gpioChannels, controller, id);\n    }\n\n    return undefined;\n  }\n\n  provisionChannel(\n    map: Map<string, ChannelValue[]>,\n    location: string,\n    id: number,\n  ): ModuleChannelType | undefined {\n    const idx = map.get(location)?.findIndex((x) => x.channel.id === id);\n    if (idx != undefined && idx > -1) {\n      this.gpioChannels.get(location)![idx].available = false;\n      return this.gpioChannels.get(location)![idx].channel;\n    }\n\n    return undefined;\n  }\n\n  removeChannel(location: string, type: ChannelType, id: number): void {\n    switch (type) {\n      case ChannelType.uart:\n        this.deprovisionChannel(this.uartChannels, location, id);\n        break;\n      case ChannelType.i2c:\n        this.deprovisionChannel(this.i2cChannels, location, id);\n        break;\n      case ChannelType.gpio:\n        this.deprovisionChannel(this.gpioChannels, location, id);\n        break;\n    }\n  }\n\n  deprovisionChannel(\n    map: Map<string, ChannelValue[]>,\n    location: string,\n    id: number,\n  ): void {\n    const idx = map.get(location)?.findIndex((x) => x.channel.id === id);\n    if (idx !== undefined && idx > -1) {\n      map.get(location)![idx].available = true;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "locations",
                        "type": "ControllerLocation[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "locations",
                        "type": "ControllerLocation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "gpioChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "i2cChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "locations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | LocationDetails>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "servoChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "uartChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [
                {
                    "name": "addChannel",
                    "args": [
                        {
                            "name": "controller",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleChannelType | undefined",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controller",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyScript",
                    "args": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deprovisionChannel",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map<string | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map<string | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAvailableChannels",
                    "args": [],
                    "optional": false,
                    "returnType": "Map<number, Map<ChannelType, ChannelValue[]>>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAvailableModules",
                    "args": [],
                    "optional": false,
                    "returnType": "Map<number, Map<ChannelType, string>>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "provisionChannel",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map<string | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleChannelType | undefined",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map<string | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeChannel",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModuleValues",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<ChannelType, string>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScriptTestModalResources",
            "id": "class-ScriptTestModalResources-ee5d5106f5a72e27d964d7484465be88aa5569b43d7b4859d088d03053a68e282a9cb1cb5ac4890d581a8eee78536d4d16f830a1275132bdecc03cadb1978ae1",
            "file": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  ScriptResponse,\n  TransmissionStatus,\n  TransmissionType,\n} from 'astros-common';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\n\ninterface Caption {\n  str: string;\n}\n\nexport class ScriptTestModalResources {\n  public static scriptId = 'scriptId';\n  public static locations = 'locations';\n}\n\n@Component({\n  selector: 'app-script-test-modal',\n  templateUrl: './script-test-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './script-test-modal.component.scss',\n  ],\n  standalone: true,\n})\nexport class ScriptTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uploadInProgress = true;\n  runDisabled = true;\n\n  coreUpload: TransmissionStatus = TransmissionStatus.sending;\n  domeUpload: TransmissionStatus = TransmissionStatus.sending;\n  bodyUpload: TransmissionStatus = TransmissionStatus.sending;\n\n  coreCaption: Caption = { str: 'Uploading' };\n  domeCaption: Caption = { str: 'Uploading' };\n  bodyCaption: Caption = { str: 'Uploading' };\n\n  status: string;\n\n  scriptId = '';\n\n  constructor(\n    private socket: WebsocketService,\n    private scriptService: ScriptsService,\n  ) {\n    super();\n    this.status = 'Uploading script...';\n\n    this.socket.messages.subscribe((msg: unknown) => {\n      if (msg && typeof msg === 'object' && 'type' in msg) {\n        if (msg.type === TransmissionType.script) {\n          this.statusUpdate(msg as ScriptResponse);\n        }\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.scriptId = this.resources.get(\n      ScriptTestModalResources.scriptId,\n    ) as string;\n    const locations = this.resources.get(\n      ScriptTestModalResources.locations,\n    ) as number[];\n\n    let hasBody = false;\n    let hasCore = false;\n    let hasDome = false;\n\n    locations.forEach((location: number) => {\n      switch (location) {\n        case 1:\n          hasBody = true;\n          break;\n        case 2:\n          hasCore = true;\n          break;\n        case 3:\n          hasDome = true;\n          break;\n      }\n    });\n\n    this.setInitialUploadStatus(hasBody, hasCore, hasDome);\n\n    const observer = {\n      next: (result: unknown) => console.log(result),\n      error: (err: unknown) => {\n        console.error(err);\n        this.status = 'Error requesting Script Upload';\n        this.coreUpload = TransmissionStatus.failed;\n        this.coreCaption.str = 'Failed';\n        this.domeUpload = TransmissionStatus.failed;\n        this.domeCaption.str = 'Failed';\n        this.bodyUpload = TransmissionStatus.failed;\n        this.bodyCaption.str = 'Failed';\n      },\n    };\n\n    if (this.scriptId != '') {\n      this.scriptService.uploadScript(this.scriptId).subscribe(observer);\n    } else {\n      this.status = 'Script ID missing, close dialog to continue.';\n    }\n  }\n\n  runClicked() {\n    console.log(`Running script: ${this.scriptId}`);\n    this.scriptService.runScript(this.scriptId).subscribe();\n    this.closeModal();\n  }\n\n  setInitialUploadStatus(hasBody: boolean, hasCore: boolean, hasDome: boolean) {\n    if (hasBody) {\n      this.bodyUpload = TransmissionStatus.sending;\n      this.bodyCaption.str = 'Uploading';\n    } else {\n      this.bodyUpload = TransmissionStatus.success;\n      this.bodyCaption.str = 'Not Assigned';\n    }\n\n    if (hasCore) {\n      this.coreUpload = TransmissionStatus.sending;\n      this.coreCaption.str = 'Uploading';\n    } else {\n      this.coreUpload = TransmissionStatus.success;\n      this.coreCaption.str = 'Not Assigned';\n    }\n\n    if (hasDome) {\n      this.domeUpload = TransmissionStatus.sending;\n      this.domeCaption.str = 'Uploading';\n    } else {\n      this.domeUpload = TransmissionStatus.success;\n      this.domeCaption.str = 'Not Assigned';\n    }\n  }\n\n  statusUpdate(msg: ScriptResponse) {\n    switch (msg.locationId) {\n      case 1:\n        this.bodyUpload = msg.status;\n        this.setCaption(this.bodyCaption, msg.status);\n        break;\n      case 2:\n        this.coreUpload = msg.status;\n        this.setCaption(this.coreCaption, msg.status);\n        break;\n      case 3:\n        this.domeUpload = msg.status;\n        this.setCaption(this.domeCaption, msg.status);\n        break;\n    }\n\n    if (this.coreUpload > 1 && this.domeUpload > 1 && this.bodyUpload > 1) {\n      this.status = 'Upload Complete.';\n      this.uploadInProgress = false;\n      if (this.coreUpload + this.domeUpload + this.bodyUpload >= 6) {\n        this.runDisabled = false;\n      }\n    }\n  }\n\n  setCaption(caption: Caption, status: TransmissionStatus) {\n    switch (status) {\n      case TransmissionStatus.success:\n        caption.str = 'Success';\n        break;\n      case TransmissionStatus.failed:\n        caption.str = 'Failed';\n        break;\n    }\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "locations",
                    "defaultValue": "'locations'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptId",
                    "defaultValue": "'scriptId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServoEventModalResources",
            "id": "class-ServoEventModalResources-4428d0a9b0281f8862600ea1283f2e75c2b2d38233116c514c4d57996c2bf5a0e362d9a8755c51218131c7de594d8ef1805a3155d4bdccc4ccdfefc55821753c",
            "file": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ServoEventModalResources {\n  public static servoId = 'servoId';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-servo-event-modal',\n  templateUrl: './servo-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './servo-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class ServoEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  channelId!: number;\n  speed: number;\n  position: number;\n  acceleration: number;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.speed = 1;\n    this.position = 0;\n    this.acceleration = 0;\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      ServoEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    this.channelId = this.resources.get(\n      ServoEventModalResources.servoId,\n    ) as number;\n\n    if (this.scriptEvent.dataJson != '') {\n      console.log(this.scriptEvent.dataJson);\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.channelId = payload.channelId;\n      this.position = payload.position;\n      this.speed = payload.speed;\n      this.acceleration = payload.acceleration;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    //const data = new ServoEvent(+this.channelId, +this.position, +this.speed, +this.acceleration);\n    //this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "servoId",
                    "defaultValue": "'servoId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServoTestModalResources",
            "id": "class-ServoTestModalResources-9a46aba5031cdfe8c123b8cccf337ecf082c55bda3da868f8a5eba5d5201a269e8ae01650fe80488960172a574257aac2d2dcf9909ee966bf6b607a284008eb3",
            "file": "src/app/components/modals/modules/servo-test-modal/servo-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseEventModalComponent } from '../../scripting/base-event-modal/base-event-modal.component';\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\nimport { FormsModule } from '@angular/forms';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ServoTestModalResources {\n  public static servoId = 'servoId';\n  public static controllerId = 'controllerId';\n  public static sendServoMove = 'servoTest_servoMove';\n  public static closeEvent = 'servoTest_closeEvent';\n}\n\nexport interface ServoTestMessage {\n  controllerId: number;\n  servoId: number;\n  value: number;\n}\n\n@Component({\n  selector: 'app-servo-test-modal',\n  templateUrl: './servo-test-modal.component.html',\n  styleUrl: './servo-test-modal.component.scss',\n  imports: [MatSlider, MatSliderThumb, FormsModule],\n})\nexport class ServoTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  servoId = 0;\n  controllerId = 0;\n  disableSlider = true;\n  value = 1500;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.servoId = this.resources.get(\n      ServoTestModalResources.servoId,\n    ) as number;\n    this.controllerId = this.resources.get(\n      ServoTestModalResources.controllerId,\n    ) as number;\n  }\n\n  onSliderChange(_: unknown) {\n    const evt = new ModalCallbackEvent(ServoTestModalResources.sendServoMove, {\n      controllerId: this.controllerId,\n      servoId: this.servoId,\n      value: this.value,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  enableTest() {\n    this.disableSlider = false;\n  }\n\n  override closeModal(): void {\n    const evt = new ModalCallbackEvent(\n      ServoTestModalResources.closeEvent,\n      null,\n    );\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'servoTest_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controllerId",
                    "defaultValue": "'controllerId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "sendServoMove",
                    "defaultValue": "'servoTest_servoMove'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "servoId",
                    "defaultValue": "'servoId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UartEventModalResources",
            "id": "class-UartEventModalResources-4b8a74ebea820765ae9176d70e8a063aeabff14683010dea209acb008dc37440cd96a3e627a6859702bff80573a8f82ae12183203dd576b9e7c488163b742610",
            "file": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GenericSerialEvent, ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class UartEventModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-uart-event-modal',\n  templateUrl: './uart-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './uart-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class UartEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uartChannel!: number;\n  baudRate!: number;\n  eventValue: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.eventValue = '';\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      UartEventModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(\n      UartEventModalResources.baudRate,\n    ) as number;\n\n    this.scriptEvent = this.resources.get(\n      UartEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.eventValue = payload.value;\n    }\n\n    this.originalEventTime = this.scriptEvent.time;\n    this.eventTime = this.scriptEvent.time;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime;\n    this.scriptEvent.dataJson = JSON.stringify(\n      new GenericSerialEvent(this.uartChannel, this.baudRate, this.eventValue),\n    );\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "baudRate",
                    "defaultValue": "'baudRate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UploadModalResources",
            "id": "class-UploadModalResources-6c0c31ceb402785cd09a79426ad6a385426fb2a54f21933a96723349d8b364c55c0595dfcd57b03d37ff19790aac037ace36da3280e884f033d2de019d6b8f68",
            "file": "src/app/components/modals/utility/upload-modal/upload-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpEventType } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { faFileAudio, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FileUpload } from 'src/app/models/upload-file';\nimport { NgFor, NgStyle, DecimalPipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nexport class UploadModalResources {\n  public static message = 'message';\n  public static refreshEvent = 'upload_refreshEvent';\n  public static closeEvent = 'upload_closeEvent';\n}\n\n@Component({\n  selector: 'app-upload-modal',\n  templateUrl: './upload-modal.component.html',\n  styleUrls: ['./upload-modal.component.scss'],\n  imports: [NgFor, NgStyle, FontAwesomeModule, DecimalPipe],\n})\nexport class UploadModalComponent extends ModalBaseComponent {\n  faTrash = faTrash;\n  faFiles = faFileAudio;\n\n  uploadQueue: FileUpload[];\n  isUploading: boolean;\n\n  path = '/api/audio/savefile';\n\n  response: string;\n\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    super();\n\n    this.response = '';\n\n    this.token = localStorage.getItem('astros-token') || '';\n    this.uploadQueue = new Array<FileUpload>();\n    this.isUploading = false;\n  }\n\n  removeFile(toRemove: unknown) {\n    let filename = '';\n\n    if (toRemove && typeof toRemove === 'object' && 'name' in toRemove) {\n      filename = toRemove.name as string;\n    } else {\n      filename = toRemove as string;\n    }\n\n    const idx = this.uploadQueue\n      .map((file) => {\n        if (typeof file.fileData === 'object' && 'name' in file.fileData) {\n          return file.fileData.name;\n        }\n        return file.fileData;\n      })\n      .indexOf(filename);\n\n    this.uploadQueue.splice(idx, 1);\n  }\n\n  addToQueue(evt: Event) {\n    const files = (evt.target as HTMLInputElement).files;\n\n    if (!files) {\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n      if (file !== null) {\n        this.uploadQueue.push(new FileUpload(file));\n      }\n    }\n  }\n\n  uploadAll() {\n    this.isUploading = true;\n\n    for (const file of this.uploadQueue) {\n      const formData = new FormData();\n\n      formData.append('file', file.fileData);\n\n      file.subscription = this.http\n        .post(this.path, formData, {\n          reportProgress: true,\n          observe: 'events',\n        })\n        .subscribe((evt) => {\n          if (evt.type === HttpEventType.UploadProgress && evt.total) {\n            file.uploadProgress = Math.round(100 * (evt.loaded / evt.total));\n          }\n        });\n    }\n  }\n\n  cancelAll() {\n    for (const file of this.uploadQueue) {\n      file.subscription?.unsubscribe();\n    }\n    this.isUploading = true;\n  }\n\n  reset() {\n    for (const file of this.uploadQueue) {\n      file.subscription?.unsubscribe();\n      file.subscription = undefined;\n      file.uploadProgress = undefined;\n    }\n\n    this.uploadQueue.splice(0, this.uploadQueue.length);\n    this.isUploading = false;\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(UploadModalResources.refreshEvent, null);\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'upload_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "'message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "refreshEvent",
                    "defaultValue": "'upload_refreshEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddModuleModalComponent",
            "id": "component-AddModuleModalComponent-d780d122c75a1f062adc481f9de7091a3ce8e32c1c5c91237e7a74401844ac9e84df50fb71c631970343d3c7ebd081f765305845fc147155463493e209f83755",
            "file": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-module-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-module-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "locationId",
                    "defaultValue": "\"0\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "moduleSubTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<ModuleType | ModuleSubTypeSelection[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "moduleType",
                    "defaultValue": "ModuleType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "moduleTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<ModuleType | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleSubTypeSelection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedSubType",
                    "defaultValue": "ModuleSubType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleSubType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "addModule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, Component } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModuleType } from 'astros-common/dist/astros_enums';\nimport { ModuleSubType } from 'astros-common/dist/astros_enums';\nimport { NgForOf } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\n\nexport class AddModuleModalResources {\n  public static moduleType = 'moduleType';\n  public static locationId = 'locationId';\n  public static addEvent = 'add_module_addEvent';\n  public static closeEvent = 'add_module_closeEvent';\n}\n\nexport interface AddModuleModalResponse {\n  locationId: string;\n  moduleType: ModuleType;\n  moduleSubType: ModuleSubType;\n}\n\nexport interface ModuleSubTypeSelection {\n  id: ModuleSubType;\n  value: string;\n}\n\n@Component({\n  selector: 'app-add-module-modal',\n  imports: [NgForOf, FormsModule],\n  templateUrl: './add-module-modal.component.html',\n  styleUrl: './add-module-modal.component.scss',\n})\nexport class AddModuleModalComponent\n  extends ModalBaseComponent\n  implements AfterContentInit\n{\n  options: ModuleSubTypeSelection[] = [];\n\n  locationId = \"0\";\n  moduleType: ModuleType = ModuleType.none;\n  selectedSubType: ModuleSubType = ModuleSubType.none;\n\n  moduleTypes: Map<ModuleType, string>;\n\n  moduleSubTypes: Map<ModuleType, ModuleSubTypeSelection[]>;\n\n  constructor() {\n    super();\n\n    this.moduleTypes = new Map<ModuleType, string>([\n      [ModuleType.uart, 'Serial'],\n      [ModuleType.i2c, 'I2C'],\n      [ModuleType.gpio, 'GPIO'],\n    ]);\n\n    this.moduleSubTypes = new Map<ModuleType, ModuleSubTypeSelection[]>([\n      [\n        ModuleType.uart,\n        [\n          { id: ModuleSubType.genericSerial, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsSerial,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.kangaroo, value: 'Kangaroo' },\n          { id: ModuleSubType.maestro, value: 'Maestro' },\n        ],\n      ],\n      [\n        ModuleType.i2c,\n        [\n          { id: ModuleSubType.genericI2C, value: 'Generic' },\n          {\n            id: ModuleSubType.humanCyborgRelationsI2C,\n            value: 'Human Cyborg Relations',\n          },\n          { id: ModuleSubType.pwmBoard, value: 'PWM Board' },\n        ],\n      ],\n    ]);\n  }\n\n  ngAfterContentInit(): void {\n    this.locationId = this.resources.get(\n      AddModuleModalResources.locationId,\n    ) as string;\n\n    this.moduleType = this.resources.get(\n      AddModuleModalResources.moduleType,\n    ) as ModuleType;\n\n    if (this.moduleSubTypes.has(this.moduleType)) {\n      this.options = this.moduleSubTypes.get(\n        this.moduleType,\n      ) as ModuleSubTypeSelection[];\n    }\n  }\n\n  modalChange($event: Event) {\n    this.selectedSubType = +($event.target as HTMLInputElement).value;\n  }\n\n  addModule() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.addEvent, {\n      locationId: this.locationId,\n      moduleType: this.moduleType,\n      moduleSubType: this.selectedSubType,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(AddModuleModalResources.closeEvent, {});\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "styleUrl": "./add-module-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<div class=\"add-module-modal\">\r\n    <h1>Add Module</h1>\r\n    <div class=\"modal-body\">\r\n        <select id=\"module-select\" title=\"Module\" [(ngModel)]=\"selectedSubType\" (change)=\"modalChange($event)\">\r\n            <option value=\"0\" disabled selected>Select Module Type</option>\r\n            <option *ngFor=\"let o of options\" value=\"{{o.id}}\">{{o.value}}</option>\r\n        </select>\r\n        </div> \r\n        <div class=\"modal-buttons\">\r\n            <div class=\"button-spacer\"></div>\r\n            <div class=\"button-grouper\">\r\n                <button (click)=\"addModule();\">Add</button>\r\n                <button (click)=\"closeModal();\">Close</button>\r\n            </div>\r\n            <div class=\"button-spacer\"></div>\r\n        </div>\r\n</div>\r\n"
        },
        {
            "name": "AlertModalComponent",
            "id": "component-AlertModalComponent-883bdf79d6ea8bd563d246a7d32c753d5672e703a23483224d6319ed9970c8c334d89f9fc825837685a90ba01f28a14d9bec488c677e5676b8d9c31bf40cd25f",
            "file": "src/app/components/modals/alert-modal/alert-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "closeEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../modal-base/modal-callback-event';\n\nexport class AlertModalResources {\n  public static message = 'message';\n  public static closeEvent = 'alert_closeEvent';\n}\n\n@Component({\n  selector: 'app-alert-modal',\n  templateUrl: './alert-modal.component.html',\n  styleUrl: './alert-modal.component.scss',\n  standalone: true,\n})\nexport class AlertModalComponent extends ModalBaseComponent implements OnInit {\n  message!: string;\n  closeEvent!: unknown;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.message = this.resources.get(AlertModalResources.message) as string;\n    this.closeEvent = this.resources.get(AlertModalResources.closeEvent);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      AlertModalResources.closeEvent,\n      this.closeEvent,\n    );\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "styleUrl": "./alert-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"alert-modal\">\r\n    <h1>Alert</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            {{message}}\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"closeModal();\">OK</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3661c91fefc8095857093743115491d99187faa314fcac6054ecc21a5a63c7d059440d7063e4c4ca02f8ed93530a548671d8c62f4aa80e5610ca48af2a781fb4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthenticationService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "clickDetector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'clickDetector', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sideNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNav', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'AstOs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "containerClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "containerKeyPressed",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSocketMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  OnInit,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { Router, RouterLink, RouterOutlet } from '@angular/router';\nimport { TransmissionType } from 'astros-common';\nimport { AuthenticationService } from './services/auth/authentication.service';\nimport { SnackbarService } from './services/snackbar/snackbar.service';\nimport { WebsocketService } from './services/websocket/websocket.service';\nimport { NgIf } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  imports: [RouterLink, NgIf, RouterOutlet],\n})\nexport class AppComponent implements OnInit {\n  title = 'AstOs';\n  private menuOpen = false;\n\n  @ViewChild('sideNav', { static: false }) sideNav!: ElementRef;\n  @ViewChild('clickDetector', { static: false }) clickDetector!: ElementRef;\n\n  constructor(\n    public auth: AuthenticationService,\n    private renderer: Renderer2,\n    private router: Router,\n    private snackbar: SnackbarService,\n    private socket: WebsocketService,\n  ) {\n    if (auth.isLoggedIn()) {\n      //router.navigate(['status']);\n      router.navigate(['modules']);\n    }\n  }\n\n  ngOnInit(): void {\n    this.socket.messages.subscribe((msg: unknown) => {\n      this.handleSocketMessage(msg);\n    });\n  }\n\n  logout() {\n    this.auth.logout();\n  }\n\n  showMenu() {\n    if (this.auth.isLoggedIn()) {\n      this.renderer.setStyle(this.sideNav.nativeElement, 'width', '220px');\n      this.renderer.setStyle(this.clickDetector.nativeElement, 'width', '100%');\n      this.menuOpen = true;\n    }\n  }\n\n  closeMenu() {\n    this.renderer.setStyle(this.sideNav.nativeElement, 'width', '0px');\n    this.renderer.setStyle(this.clickDetector.nativeElement, 'width', '0px');\n    this.menuOpen = false;\n  }\n\n  containerKeyPressed(event: KeyboardEvent) {\n    if (\n      event.key === 'Escape' ||\n      event.key === 'Esc' ||\n      event.key === 'Enter' ||\n      event.key === 'Space'\n    ) {\n      this.closeMenu();\n    }\n  }\n\n  containerClicked() {\n    if (this.menuOpen) {\n      this.closeMenu();\n    }\n  }\n\n  private handleSocketMessage(msg: unknown) {\n    if (msg && typeof msg === 'object' && 'type' in msg && 'message' in msg) {\n      switch (msg.type) {\n        case TransmissionType.sync:\n          this.snackbar.okToast(msg.message as string);\n          break;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " @use \"../assets/styles/variables\" as v;\r\n\r\n .container {\r\n     background-color: v.$color-dark;\r\n     color: v.$color-pale;\r\n     text-shadow:\r\n         -3px -3px 0 v.$dark-blue,\r\n         3px -3px 0 v.$dark-blue,\r\n         -3px 3px 0 v.$dark-blue,\r\n         3px 3px 0 v.$dark-blue;\r\n\r\n\r\n\r\n     margin: 0;\r\n     padding: 2rem;\r\n }\r\n\r\n\r\n\r\n\r\n .navbar-main {\r\n     display: flex;\r\n     flex-direction: row;\r\n     text-align: center;\r\n     font-size: 36px;\r\n     font-family: v.$swfont;\r\n\r\n     .capital {\r\n         font-size: 50px;\r\n     }\r\n\r\n     .navbutton {\r\n         margin-top: 4px;\r\n     }\r\n\r\n     .navbutton:after {\r\n         margin-left: 4px;\r\n         margin-right: 10px;\r\n         content: '\\2807';\r\n         font-size: 48px;\r\n     }\r\n }\r\n\r\n .sidenav {\r\n     height: 100%;\r\n     width: 0;\r\n     position: fixed;\r\n     z-index: 1000;\r\n     top: 0;\r\n     left: 0;\r\n     background-color: v.$dark-blue;\r\n     overflow-x: hidden;\r\n     transition: 0.5s;\r\n     padding-top: 4px;\r\n\r\n     a {\r\n         margin: 30px 40px 30px 20px;\r\n         text-decoration: none;\r\n         font-family: v.$swfont;\r\n         font-size: 28px;\r\n         color: v.$color-pale;\r\n         display: block;\r\n         transition: 0.3s;\r\n     }\r\n\r\n     a:hover {\r\n         color: v.$light-blue;\r\n     }\r\n\r\n }\r\n\r\n .click-detector {\r\n    height: 100%;\r\n    width: 0;\r\n    position: fixed;\r\n    z-index: 999;\r\n    top: 0;\r\n    left: 0;\r\n    overflow-x: hidden;\r\n}\r\n\r\n @media only screen and (max-width: 480px) {\r\n     .navbar-main {\r\n         a {\r\n             font-size: 28px;\r\n         }\r\n     }\r\n\r\n     .sidenav {\r\n         padding-top: 15px;\r\n     }\r\n\r\n     .sidenav a {\r\n         font-size: 28px;\r\n     }\r\n }",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div (click)=\"closeMenu()\"\r\n  (keypress)=\"containerKeyPressed($event)\"\r\n  id=\"mySidenav\" class=\"sidenav\" tabindex=\"0\" #sideNav>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/status\" tabindex=\"0\">Status</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/scripts\" tabindex=\"0\">Scripts</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/remote\" tabindex=\"0\">Remote</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/modules\" tabindex=\"0\">Modules</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/utility\" tabindex=\"0\">Utility</a>\r\n  <a *ngIf=\"auth.isLoggedIn()\" href=\"javascript: void(0);\" (click)=\"logout()\" tabindex=\"0\">Logout</a>\r\n</div>\r\n\r\n<div id=\"clickDetector\" class=\"click-detector\" (click)=\"closeMenu()\"\r\n  (keypress)=\"containerKeyPressed($event)\"\r\n  tabindex=\"0\" #clickDetector></div>\r\n\r\n<div class=\"container\">\r\n  <div class=\"navbar-main\">\r\n\r\n    <div class=\"navbutton\" (click)=\"showMenu()\"\r\n      (keypress)=\"containerKeyPressed($event)\"\r\n      tabindex=\"0\"></div>\r\n    <div><span class=\"capital\">A</span>str<span class=\"capital\">O</span>s</div>\r\n  </div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "AudioEventModalComponent",
            "id": "component-AudioEventModalComponent-f8b33d3eff89bb8458b4f21c61945232230c28380cd012ae31e97360a708b9a98efde0b20b0cfabaf6c8872b16ffd481521811cfdbf00be1f9b4ed8af742a2af",
            "file": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-audio-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./audio-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./audio-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "audioFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AudioFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AudioFile, ScriptEvent } from 'astros-common';\nimport { AudioService } from 'src/app/services/audio/audio.service';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class AudioEventModalResources {\n  public static audioFiles = 'audioFiles';\n  public static selectedFile = 'selectedFile';\n}\n\n@Component({\n  selector: 'app-audio-event-modal',\n  templateUrl: './audio-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './audio-event-modal.component.scss',\n  ],\n  imports: [FormsModule, NgFor, DecimalPipe],\n})\nexport class AudioEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  audioFiles: AudioFile[];\n\n  selectedFile: string;\n\n  constructor(private audioService: AudioService) {\n    super();\n    this.audioFiles = new Array<AudioFile>();\n    this.selectedFile = '0';\n\n    const observer = {\n      next: (result: AudioFile[]) => (this.audioFiles = result),\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.audioService.getAudioFiles().subscribe(observer);\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      ScriptEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.selectedFile = payload.value;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n    this.scriptEvent.dataJson = JSON.stringify({ value: this.selectedFile });\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      id: this.callbackType,\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./audio-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Audio File</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <select id=\"file-select\" title=\"File\" [(ngModel)]=\"selectedFile\">\r\n                    <option value=\"0\" disabled selected>Select Audio</option>\r\n                    <option *ngFor=\"let file of audioFiles\" value=\"{{file.id}}\">{{file.fileName}}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AudioFilesComponent",
            "id": "component-AudioFilesComponent-ea66dc5055f81da7e925de2cc813ed1330d227a50e1b249b5688e5f7e1992487e5f82b6e1aeba8f1aabe15fb87bb2ac43e18f6cafc41805a51df4ae17b37cf2c",
            "file": "src/app/pages/audio-files/audio-files.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-audio-files",
            "styleUrls": [
                "./audio-files.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./audio-files.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "audioFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AudioFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "faPlay",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playFile",
                    "args": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAudioFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { faPlay, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { AudioFile } from 'astros-common';\nimport { AudioService } from 'src/app/services/audio/audio.service';\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\nimport { NgFor, DatePipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport {\n  ModalComponent,\n  ConfirmModalComponent,\n  ConfirmModalResources,\n} from '@src/components/modals';\nimport {\n  UploadModalComponent,\n  UploadModalResources,\n} from '@src/components/modals/utility';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { ModalService } from '@src/services';\n\ninterface DeleteConfirmEvent {\n  id: string;\n  val: string;\n}\n\n@Component({\n  selector: 'app-audio-files',\n  templateUrl: './audio-files.component.html',\n  styleUrls: ['./audio-files.component.scss'],\n  imports: [NgFor, FontAwesomeModule, ModalComponent, DatePipe],\n})\nexport class AudioFilesComponent implements OnInit {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  faTrash = faTrash;\n  faPlay = faPlay;\n\n  audioFiles: AudioFile[];\n\n  constructor(\n    private snackBar: SnackbarService,\n    private modalService: ModalService,\n    private audioService: AudioService,\n  ) {\n    this.audioFiles = new Array<AudioFile>();\n  }\n\n  ngOnInit(): void {\n    const observer = {\n      next: (result: AudioFile[]) => (this.audioFiles = result),\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.audioService.getAudioFiles().subscribe(observer);\n  }\n\n  playFile(_: string) {\n    this.snackBar.okToast('TODO: impelement this!');\n  }\n\n  uploadFile() {\n    this.container.clear();\n\n    const component = this.container.createComponent(UploadModalComponent);\n\n    const modalResources = new Map<string, unknown>();\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.modalService.open('audio-files-modal');\n  }\n\n  removeFile(id: string) {\n    this.container.clear();\n\n    const idx = this.audioFiles\n      .map((f) => {\n        return f.id;\n      })\n      .indexOf(id);\n\n    const fileName = this.audioFiles[idx].fileName;\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ConfirmModalResources.action, 'Confirm Delete');\n    modalResources.set(\n      ConfirmModalResources.message,\n      `Are you sure you want to delete ${fileName}?`,\n    );\n    modalResources.set(ConfirmModalResources.confirmEvent, {\n      id: 'audiofile_delete',\n      val: id,\n    });\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.modalService.open('audio-files-modal');\n  }\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ConfirmModalResources.confirmEvent: {\n        const val = evt.value as DeleteConfirmEvent;\n        if (val.id === 'audiofile_delete') {\n          this.remove(val.val as string);\n        }\n        break;\n      }\n      case UploadModalResources.refreshEvent:\n        this.refreshAudioFiles();\n        break;\n    }\n\n    this.modalService.close('audio-files-modal');\n    this.container.clear();\n  }\n\n  refreshAudioFiles() {\n    const observer = {\n      next: (result: AudioFile[]) => (this.audioFiles = result),\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.audioService.getAudioFiles().subscribe(observer);\n  }\n\n  remove(id: string) {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'success' in result) {\n          if (result.success) {\n            const idx = this.audioFiles\n              .map((f) => {\n                return f.id;\n              })\n              .indexOf(id);\n\n            this.audioFiles.splice(idx, 1);\n\n            this.snackBar.okToast('File deleted!');\n          } else {\n            this.snackBar.okToast('File delete failed!');\n          }\n        }\n      },\n      error: (err: unknown) => {\n        this.snackBar.okToast('File delete failed!');\n        console.error(err);\n      },\n    };\n\n    this.audioService.removeAudioFile(id).subscribe(observer);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../../../assets/styles/variables\" as v;\r\n\r\n.audio-files-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n    .spacer {\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .audio-files-body {\r\n\r\n        padding: 20px;\r\n        max-width: 1000px;\r\n        flex-grow: 20;\r\n\r\n        .button-bar {\r\n            display: flex;\r\n            flex-direction: row;\r\n            height: 54px;\r\n            line-height: 54px;\r\n            \r\n            .title {\r\n                width: 200px;\r\n                font-size: xx-large;\r\n                font-family: v.$swfont;   \r\n            }\r\n\r\n\r\n            .button-box {\r\n                float: right;\r\n\r\n                button{\r\n                    font-size: x-large;\r\n                    font-family: v.$swfont;\r\n                    background-color: v.$dark-blue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.audio-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n\r\n    .file-line {\r\n        display: flex;\r\n        height: 40px;\r\n        line-height: 40px;\r\n        flex-direction: row;\r\n        font-size: large;\r\n        border-bottom: solid 2px black;\r\n\r\n        .name-section {\r\n        \r\n            flex-basis: 240px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n        \r\n        .desc-section {\r\n            flex-grow: 1;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n\r\n        .dur-section {\r\n            margin-right: 10px;\r\n        }\r\n\r\n        button {\r\n            font-size: large;\r\n            padding: 0;\r\n            margin: 0px 12px;\r\n            border: none;\r\n            background-color: transparent;\r\n            color: dimgray;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./audio-files.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"audio-files-container\">\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"audio-files-body\">\r\n        <div class=\"button-bar\">\r\n            <div class=\"title\">\r\n                Audio Files\r\n            </div>\r\n            <div class=\"spacer\"></div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"uploadFile()\" class=\"upload\">Upload</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"audio-list-container\">\r\n            <ul class=\"audio-list\">\r\n                <li *ngFor=\"let file of audioFiles\">\r\n                    <div class=\"file-line\">\r\n\r\n                        <div class=\"name-section\">{{file.fileName}}</div>\r\n                        <div class=\"desc-section\">{{file.description}}</div>\r\n                        <div class=\"dur-section\">{{file.duration * 1000 | date:'mm:ss'}}</div>\r\n                        <button title=\"Play\" (click)=\"playFile(file.id)\"><fa-icon [icon]=\"faPlay\"></fa-icon></button>\r\n                        <button title=\"Remove\" (click)=\"removeFile(file.id)\"><fa-icon [icon]=\"faTrash\"></fa-icon></button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n</div>\r\n\r\n\r\n<app-astros-modal id=\"audio-files-modal\" disableBackgroundClick=\"1\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "BaseEventModalComponent",
            "id": "component-BaseEventModalComponent-d05fe6b3839af3931c35319e20b800443e84d5da5d31eb00b4bbce7037c0e9029e8ec6be9db0f713b7e0e4dcde5b122f49b800b4a379b77dc5b5f3dd4450dfad",
            "file": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-event-modal",
            "styleUrls": [
                "./base-event-modal.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ModalBaseComponent } from '@src/components/modals/modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { ScriptEvent } from 'astros-common';\n\nexport class ScriptEventModalResources {\n  public static scriptEvent = 'scriptEvent';\n  public static callbackType = 'callbackType';\n  public static addEvent = 'script_addEvent';\n  public static editEvent = 'script_editEvent';\n  public static removeEvent = 'script_removeEvent';\n  public static closeEvent = 'script_closeEvent';\n}\n\nexport interface ScriptEventModalResponse {\n  scriptEvent: ScriptEvent;\n  time: number;\n}\n\n@Component({\n  selector: 'app-base-event-modal',\n  template: '',\n  styleUrls: ['./base-event-modal.component.scss'],\n  standalone: true,\n})\nexport class BaseEventModalComponent extends ModalBaseComponent {\n  protected scriptEvent!: ScriptEvent;\n  protected originalEventTime: number;\n  protected callbackType: string;\n\n  eventTime: number;\n  protected maxTime = 3000;\n  protected timeFactor = 10;\n\n  errorMessage: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  removeEvent() {\n    const evt = new ModalCallbackEvent(ScriptEventModalResources.removeEvent, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      ScriptEventModalResources.closeEvent,\n      null,\n    );\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./base-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "extends": [
                "ModalBaseComponent"
            ]
        },
        {
            "name": "BaseI2cSubModuleComponent",
            "id": "component-BaseI2cSubModuleComponent-741c059f8dc97a7d062714fce29e15dd6872187ef1166750d8d83045d134ef28367d95ddc51c64922ddd6d4d71122c3cc2e1467c52d826711ba1a68958eac1dc",
            "file": "src/app/components/esp-module/i2c/i2c-submodules/base-i2c-sub-module/base-i2c-sub-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-i2c-module",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "I2cModule",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "i2cAddressChangedEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addresses",
                    "defaultValue": "Array.from(Array(128).keys()).map((val) => val.toString())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "i2cAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onI2cAddressChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { I2cModule } from 'astros-common';\r\n\r\n@Component({\r\n  selector: 'app-base-i2c-module',\r\n  template: '',\r\n  styleUrl: './base-i2c-sub-module.component.scss'\r\n})\r\nexport abstract class BaseI2cSubModuleComponent\r\n implements OnChanges {\r\n  @Input()\r\n  module!: I2cModule;\r\n\r\n  @Output()\r\n  i2cAddressChangedEvent = new EventEmitter<string>();\r\n\r\n  i2cAddress!: string;\r\n  addresses = Array.from(Array(128).keys()).map((val) => val.toString());\r\n\r\n  ngOnChanges(): void {\r\n    if (this.module){\r\n      this.i2cAddress = this.module.i2cAddress.toString();\r\n    }\r\n  }\r\n\r\n  onI2cAddressChange(val: string) {\r\n    this.i2cAddressChangedEvent.emit(val);\r\n  }\r\n}\r\n",
            "styleUrl": "./base-i2c-sub-module.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "BaseUartSubModuleComponent",
            "id": "component-BaseUartSubModuleComponent-0b25de498138480c824570bc3b16f0e7089c5e4e16d138cc30231925019cffdea4de174126a405633a72aeb6f39d8eb90dabaced89552f8e3060ed42a75c6004",
            "file": "src/app/components/esp-module/uart/uart-submodules/base-uart-sub-module/base-uart-sub-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-uart-sub-module",
            "styleUrls": [
                "./base-uart-sub-module.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "UartModule",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onBaudRateChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChannelChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UartModule } from 'astros-common';\n\n@Component({\n  selector: 'app-base-uart-sub-module',\n  template: '',\n  styleUrls: ['./base-uart-sub-module.component.scss'],\n})\nexport abstract class BaseUartSubModuleComponent {\n  @Input()\n  isMaster = false;\n\n  @Input()\n  module!: UartModule;\n\n  uartChannel!: string;\n  baudRate!: string;\n\n  onChannelChange(val: string) {\n    this.module.uartChannel = parseInt(val);\n  }\n\n  onBaudRateChange(val: string) {\n    this.module.baudRate = parseInt(val);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".uart-settings {\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  select {\r\n      width: 100px;\r\n      height: 30px;\r\n      font-size: medium;\r\n  }\r\n\r\n  .uart-settings-spacer {\r\n      width: 20px;\r\n  }\r\n}",
                    "styleUrl": "./base-uart-sub-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-94904351774b93cfbb9de6af3660ddcb0344fa2b9b47fbc60a314d687d6af1c72fdc70150a0ea73e9607640176fbad816a3393fb7f5073de97171c01289efdc3",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"click.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 850,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 30,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"click.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  // eslint-disable-next-line\n  click = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 45
                    }
                }
            }
        },
        {
            "name": "ChannelTestModalComponent",
            "id": "component-ChannelTestModalComponent-b7ad7e745bbed56215dfacb88eb8660dc25c290c3f456f8091729626699e6f9dd7e3ef06bfb89c710b505c07182b7aaef888a2366a1174ef8f9f19cd196f3d3f",
            "file": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-channel-test-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./channel-test-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./channel-test-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "channelSubType",
                    "defaultValue": "ChannelSubType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelSubType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "channelType",
                    "defaultValue": "ChannelType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "controllerId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "gpioLevel",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "kangarooAction",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "kangarooCh",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "kangarooPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "kangarooSpd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "posDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "position",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "spdDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "speed",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getCommand",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKangarooCommand",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChannelSubType, ChannelType, KangarooAction } from 'astros-common';\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\nimport { NgIf } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ChannelTestModalResources {\n  public static controller = 'controller';\n  public static channelType = 'channelType';\n  public static channelSubType = 'channelSubType';\n  public static channelId = 'channelId';\n\n  public static channelTest = 'channelTest_test';\n}\n\nexport interface ChannelTestModalResponse {\n  controllerId: number;\n  commandType: ChannelType;\n  command: unknown;\n}\n\n@Component({\n  selector: 'app-channel-test-modal',\n  templateUrl: './channel-test-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './channel-test-modal.component.scss',\n  ],\n  imports: [NgIf, FormsModule],\n})\nexport class ChannelTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  controllerId = 0;\n  channelId = 0;\n\n  channelType: ChannelType = ChannelType.none;\n  channelSubType: ChannelSubType = ChannelSubType.none;\n\n  speed = 1;\n  position = 0;\n  value = '';\n\n  kangarooCh = 1;\n  kangarooAction = 1;\n  kangarooSpd?: number;\n  kangarooPos?: number;\n  spdDisabled = true;\n  posDisabled = true;\n\n  gpioLevel = 0;\n\n  constructor() {\n    super();\n    this.callbackType = ChannelTestModalResources.channelTest;\n  }\n\n  ngOnInit(): void {\n    this.controllerId = this.resources.get(\n      ChannelTestModalResources.controller,\n    ) as number;\n    this.channelType = this.resources.get(\n      ChannelTestModalResources.channelType,\n    ) as ChannelType;\n    this.channelSubType = this.resources.get(\n      ChannelTestModalResources.channelSubType,\n    ) as ChannelSubType;\n    this.channelId = this.resources.get(\n      ChannelTestModalResources.channelId,\n    ) as number;\n  }\n\n  runClicked() {\n    const evt = new ModalCallbackEvent(ChannelTestModalResources.channelTest, {\n      controllerId: this.controllerId,\n      commandType: this.channelType,\n      command: this.getCommand(),\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  getCommand(): unknown {\n    switch (this.channelType) {\n      case ChannelType.i2c:\n        return { id: this.channelId, val: this.value };\n      //case ChannelType.servo:\n      //  return { id: this.channelId, position: this.position, speed: this.speed };\n      case ChannelType.uart:\n        if (this.channelSubType === ChannelSubType.kangaroo) {\n          return { val: this.getKangarooCommand() };\n        } else {\n          return { val: this.value };\n        }\n      case ChannelType.gpio:\n        return { id: this.channelId, val: this.gpioLevel };\n    }\n    return {};\n  }\n\n  selectChange($event: Event) {\n    if (($event.target as HTMLInputElement).id === 'cmdselect') {\n      this.spdDisabled =\n        +this.kangarooAction !== 3 && +this.kangarooAction !== 4;\n      this.posDisabled = +this.kangarooAction !== 4;\n\n      if (+this.kangarooAction !== 3 && +this.kangarooAction !== 4) {\n        this.kangarooSpd = 0;\n      }\n      if (+this.kangarooAction !== 4) {\n        this.kangarooPos = 0;\n      }\n    }\n  }\n\n  getKangarooCommand(): string {\n    let cmd = '';\n\n    switch (+this.kangarooAction) {\n      case KangarooAction.start:\n        cmd = 'start';\n        break;\n      case KangarooAction.home:\n        cmd = 'home';\n        break;\n      case KangarooAction.speed:\n        cmd = `s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`;\n        break;\n      case KangarooAction.position:\n        cmd = `p${this.kangarooPos === undefined ? 0 : this.kangarooPos} s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`;\n        break;\n    }\n\n    return `${this.kangarooCh},${cmd}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./channel-test-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 53
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Channel Test</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div *ngIf=\"channelType === 1 && channelSubType === 1\">\r\n                <label for=\"value\">Serial Command</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"value\" />\r\n            </div>\r\n            <div *ngIf=\"channelType === 1 && channelSubType === 2\">\r\n                <div>\r\n                    <label class=\"kangaroo-channel-label\" for=\"chselect\">Kangaroo Channel</label>\r\n                    <select id=\"chselect\" title=\"kangaroo channel\" [(ngModel)]=\"kangarooCh\" (change)=\"selectChange($event)\">\r\n                        <option value=\"1\">Channel 1</option>\r\n                        <option value=\"2\">Channel 2</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label class=\"kangaroo-channel-label\" for=\"command\">Command</label>\r\n                    <select id=\"cmdselect\" title=\"command\" [(ngModel)]=\"kangarooAction\" (change)=\"selectChange($event)\">\r\n                        <option value=\"1\">Start</option>\r\n                        <option value=\"2\">Home</option>\r\n                        <option value=\"3\">Speed</option>\r\n                        <option value=\"4\">Position</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label class=\"kangaroo-speed-label\" for=\"chspd\">Speed</label>\r\n                    <input class=\"kangaroo-input\" name=\"chspd\" matInput placeholder=\"Speed\" [disabled]=\"spdDisabled\"  [(ngModel)]=\"kangarooSpd\" type=\"number\" />\r\n                    <label class=\"kangaroo-position-label\" for=\"chpos\">Position</label>\r\n                    <input class=\"kangaroo-input\" name=\"chpos\" matInput placeholder=\"Position\" [disabled]=\"posDisabled\" [(ngModel)]=\"kangarooPos\" type=\"number\" />\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"channelType === 2\">\r\n                <label for=\"value\">I2C Command</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"value\" />\r\n            </div>\r\n            <div *ngIf=\"channelType === 3\">\r\n                <div>\r\n                    <label for=\"position\">Position</label>\r\n                    <input name=\"position\" matInput placeholder=\"Position\" [(ngModel)]=\"position\" type=\"number\" min=\"0\"\r\n                        max=\"100\" (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\"\r\n                        (change)=\"position < 0 ? position = 0 : position; position > 100 ? position = 100 : position;\" />\r\n                </div>\r\n                <div>\r\n                    <label for=\"speed\">Speed</label>\r\n                    <input name=\"speed\" matInput placeholder=\"Speed\" [(ngModel)]=\"speed\" type=\"number\" min=\"0\" max=\"100\"\r\n                        (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\"\r\n                        (change)=\"speed < 0 ? speed = 0 : speed; speed > 10 ? speed = 10 : speed;\" />\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"channelType === 5\">\r\n                <label for=\"value\">GPIO Command</label>\r\n                <select id=\"gpiolevel\" title=\"GPIO Level\" [(ngModel)]=\"gpioLevel\" (change)=\"selectChange($event)\">\r\n                    <option value=\"0\">Low</option>\r\n                    <option value=\"1\">High</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"runClicked();\">Send</button>\r\n            <button (click)=\"closeModal();\">Cancel</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-62289e24c33d59b39d27286dbf559d688236645ee57fb0c11fbc66e8977402dec220d9f26e29949fc8a4ee40ba9e952ebd88351e00b93c0ec21a3903279826a8",
            "file": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-astros-confirm-modal",
            "styleUrls": [
                "./confirm-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "closeEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmModalEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "confirmEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmModalEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../modal-base/modal-callback-event';\n\nexport interface ConfirmModalEvent {\n  id: string;\n  val: unknown;\n}\n\nexport class ConfirmModalResources {\n  public static action = 'action';\n  public static message = 'message';\n  public static confirmEvent = 'confirm_confirmEvent';\n  public static closeEvent = 'confirm_closeEvent';\n}\n\n@Component({\n  selector: 'app-astros-confirm-modal',\n  templateUrl: './confirm-modal.component.html',\n  styleUrls: ['./confirm-modal.component.scss'],\n  standalone: true,\n})\nexport class ConfirmModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  action!: string;\n  message!: string;\n  confirmEvent!: ConfirmModalEvent;\n  closeEvent!: ConfirmModalEvent;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.action = this.resources.get(ConfirmModalResources.action) as string;\n    this.message = this.resources.get(ConfirmModalResources.message) as string;\n    this.confirmEvent = this.resources.get(\n      ConfirmModalResources.confirmEvent,\n    ) as ConfirmModalEvent;\n    this.closeEvent = this.resources.get(\n      ConfirmModalResources.closeEvent,\n    ) as ConfirmModalEvent;\n  }\n\n  confirm() {\n    const evt = new ModalCallbackEvent(\n      ConfirmModalResources.confirmEvent,\n      this.confirmEvent,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(\n      ConfirmModalResources.closeEvent,\n      this.closeEvent,\n    );\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".confirm-modal {\r\n\r\n    width: 400px;\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            overflow-wrap: break-word;\r\n            display: inline;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./confirm-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"confirm-modal\">\r\n    <h1>Confirm {{action}}</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            {{message}}\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"confirm();\">Yes</button>\r\n            <button (click)=\"closeModal();\">No</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ControllerModalComponent",
            "id": "component-ControllerModalComponent-73c081237821fff93ac73f281795da397d76c09924f6584567c5f2a5a37b46dc3a12aa1a0c9dfca385c9ff445f857fcc7596e320baab10cf2d3b1390b06e5a46",
            "file": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-controller-modal",
            "styleUrls": [
                "./controller-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./controller-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Map<ChannelType, ChannelValue[]>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "availableModules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Map<ChannelType, string>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "channels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelValue[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | LocationDetails>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<ChannelType | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedChannel",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedChannels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedController",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedModule",
                    "defaultValue": "ChannelType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "addChannel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChannels",
                    "args": [
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModules",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "KeyValuePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChannelType } from 'astros-common';\nimport { ChannelValue, LocationDetails } from 'src/app/models/script-resources';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, NgIf, KeyValuePipe } from '@angular/common';\n\nexport class ControllerModalResources {\n  public static controllers = 'controllers';\n  public static modules = 'modules';\n  public static channels = 'channels';\n\n  public static addChannelEvent = 'controller_addChannel';\n  public static removeChannelEvent = 'controller_removeChannel';\n  public static closeEvent = 'controller_close';\n}\n\nexport interface ControllerModalResponse {\n  controller: string;\n  module: ChannelType;\n  channels: number[];\n}\n\n@Component({\n  selector: 'app-controller-modal',\n  templateUrl: './controller-modal.component.html',\n  styleUrls: ['./controller-modal.component.scss'],\n  imports: [FormsModule, NgFor, NgIf, KeyValuePipe],\n})\nexport class ControllerModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  errorMessage: string;\n\n  controllers!: Map<number, LocationDetails>;\n  selectedController = 0;\n\n  private availableModules!: Map<number, Map<ChannelType, string>>;\n  modules: Map<ChannelType, string>;\n  selectedModule: ChannelType = ChannelType.none;\n\n  private availableChannels!: Map<number, Map<ChannelType, ChannelValue[]>>;\n  channels: ChannelValue[];\n  selectedChannel = -1;\n  selectedChannels: unknown[] = [];\n\n  constructor() {\n    super();\n\n    this.errorMessage = '';\n\n    this.modules = new Map<ChannelType, string>();\n    this.channels = new Array<ChannelValue>();\n  }\n\n  ngOnInit(): void {\n    this.controllers = this.resources.get(\n      ControllerModalResources.controllers,\n    ) as Map<number, LocationDetails>;\n    this.availableModules = this.resources.get(\n      ControllerModalResources.modules,\n    ) as Map<number, Map<ChannelType, string>>;\n    this.availableChannels = this.resources.get(\n      ControllerModalResources.channels,\n    ) as Map<number, Map<ChannelType, ChannelValue[]>>;\n  }\n\n  modalChange($event: Event) {\n    // convert from string value to number for enum\n    if (($event.target as HTMLInputElement).id === 'controller-select') {\n      this.setModules(+($event.target as HTMLInputElement).value);\n    } else if (($event.target as HTMLInputElement).id === 'module-select') {\n      this.setChannels(+($event.target as HTMLInputElement).value);\n    }\n  }\n\n  addChannel() {\n    if (\n      +this.selectedController !== 4 &&\n      +this.selectedModule === ChannelType.none\n    ) {\n      this.errorMessage = 'Module Selection Required';\n      return;\n    }\n\n    if (\n      +this.selectedModule !== ChannelType.none &&\n      +this.selectedChannels.length < 1\n    ) {\n      this.errorMessage = 'Channel Selection Required';\n      return;\n    }\n\n    const evt = new ModalCallbackEvent(\n      ControllerModalResources.addChannelEvent,\n      {\n        controller: +this.selectedController,\n        module:\n          +this.selectedController === 4\n            ? ChannelType.audio\n            : +this.selectedModule,\n        channels: this.selectedChannels,\n      },\n    );\n\n    this.modalCallback.emit(evt);\n    this.clearOptions();\n  }\n\n  closeModal() {\n    this.clearOptions();\n    const evt = new ModalCallbackEvent(\n      ControllerModalResources.closeEvent,\n      null,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  private clearOptions() {\n    this.selectedController = 0;\n    this.selectedModule = ChannelType.none;\n    this.selectedChannel = -1;\n    document\n      .getElementById('module-select')\n      ?.setAttribute('disabled', 'disabled');\n    document\n      .getElementById('channel-select')\n      ?.setAttribute('disabled', 'disabled');\n  }\n\n  private setModules(controllerId: number) {\n    if (controllerId === 4) {\n      this.selectedModule = ChannelType.none;\n      this.selectedChannel = -1;\n      document\n        .getElementById('module-select')\n        ?.setAttribute('disabled', 'disabled');\n      document\n        .getElementById('channel-select')\n        ?.setAttribute('disabled', 'disabled');\n    } else {\n      const mods = this.availableModules.get(+this.selectedController);\n      if (mods) {\n        this.modules = mods;\n        document.getElementById('module-select')?.removeAttribute('disabled');\n        //this.selectedModule = ChannelType.none;\n        this.setChannels(this.selectedModule);\n      }\n    }\n  }\n\n  private setChannels(channelType: ChannelType) {\n    if (channelType === ChannelType.none) {\n      this.selectedChannel = -1;\n      document\n        .getElementById('channel-select')\n        ?.setAttribute('disabled', 'disabled');\n    } else {\n      const chs = this.availableChannels\n        .get(+this.selectedController)\n        ?.get(+channelType);\n      if (chs) {\n        this.channels = chs;\n        document.getElementById('channel-select')?.removeAttribute('disabled');\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".channel-modal {\r\n\r\n    width: 400px;\r\n  \r\n    select {\r\n      display: block;\r\n      font-size: x-large;\r\n      margin: 20px 10px;\r\n      width: 380px;\r\n    }\r\n  }\r\n  \r\n  .error {\r\n    font-size: large;\r\n    text-align: center;\r\n    color: crimson;\r\n  }\r\n\r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./controller-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 47
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"channel-modal\">\r\n    <h1>Select Channel</h1>\r\n    <div class=\"modal-body\">\r\n        <select id=\"controller-select\" title=\"Contoller\" [(ngModel)]=\"selectedController\"\r\n            (change)=\"modalChange($event)\">\r\n            <option value=\"0\" disabled selected>Select Contoller</option>\r\n            <option *ngFor=\"let kv of controllers | keyvalue\" value=\"{{kv.key}}\">{{kv.value.name}}\r\n            </option>\r\n        </select>\r\n        <select id=\"module-select\" title=\"Module\" disabled [(ngModel)]=\"selectedModule\"\r\n            (change)=\"modalChange($event)\">\r\n            <option value=\"0\" disabled selected>Select Module</option>\r\n            <option *ngFor=\"let kv of modules | keyvalue\" value=\"{{kv.key}}\">{{kv.value}}</option>\r\n        </select>\r\n        <select id=\"channel-select\" \r\n            title=\"Channel\" \r\n            disabled \r\n            \r\n            [(ngModel)]=\"selectedChannels\"\r\n            [multiple]=\"true\"\r\n            (change)=\"modalChange($event)\">\r\n            <option value=\"-1\" disabled selected>Select Channel</option>\r\n            <ng-container *ngFor=\"let ch of channels\">\r\n                <option *ngIf=\"ch.available && ch.channel.channelName.toLowerCase() !== 'reserved'\" value=\"{{ch.channel.id}}\">{{ch.channel.id}} - {{ch.channel.channelName}}</option>\r\n            </ng-container>\r\n        </select>\r\n        <div class=\"error\">{{errorMessage}}</div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addChannel();\">Add</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "EspModuleComponent",
            "id": "component-EspModuleComponent-f86b68df7e596b52cb6f01c1e9c2752f07c6ae773e1ac86dcee05b28bc901619eeb68d212eaed83de35cf7f737b3cb6f2d823ec675a448d4db0338e82860f4a4",
            "file": "src/app/components/esp-module/esp/esp-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-esp-module",
            "styleUrls": [
                "./esp-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./esp-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "ControllerLocation",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addModuleEvent",
                    "defaultValue": "new EventEmitter<AddModuleEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "openServoTestModal",
                    "defaultValue": "new EventEmitter<ServoTestEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeModuleEvent",
                    "defaultValue": "new EventEmitter<RemoveModuleEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addIcon",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "i2cPanelOpenState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "i2cUpdateTrigger",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "uartPanelOpenState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "addI2cModule",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUartModule",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "i2cAddressChanged",
                    "args": [
                        {
                            "name": "evt",
                            "type": "AddressChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "AddressChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moduleCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeModule",
                    "args": [
                        {
                            "name": "evt",
                            "type": "RemoveModuleEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "RemoveModuleEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testServoModal",
                    "args": [
                        {
                            "name": "module",
                            "type": "ModuleType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "ModuleType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatAccordion"
                },
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionPanelDescription"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "MatCheckbox"
                },
                {
                    "name": "UartModuleComponent",
                    "type": "component"
                },
                {
                    "name": "I2cModuleComponent",
                    "type": "component"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  MatExpansionPanel,\n  MatAccordion,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n  MatExpansionPanelDescription,\n} from '@angular/material/expansion';\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ControllerLocation, ModuleSubType, ModuleType } from 'astros-common';\nimport { UartModuleComponent } from '../uart/uart-module/uart-module.component';\nimport { NgIf, NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { \n  I2cModuleComponent,\n  AddressChangeEvent,\n } from '../i2c/i2c-module/i2c-module.component';\nimport {\n  AddModuleEvent,\n  RemoveModuleEvent,\n  ServoTestEvent,\n} from '../utility/module-events';\n\n@Component({\n  selector: 'app-esp-module',\n  templateUrl: './esp-module.component.html',\n  styleUrls: ['./esp-module.component.scss'],\n  imports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    NgIf,\n    FormsModule,\n    MatExpansionPanelDescription,\n    NgFor,\n    MatCheckbox,\n    UartModuleComponent,\n    I2cModuleComponent,\n    FontAwesomeModule,\n  ],\n})\nexport class EspModuleComponent {\n  @Output()\n  removeModuleEvent = new EventEmitter<RemoveModuleEvent>();\n\n  @Output()\n  addModuleEvent = new EventEmitter<AddModuleEvent>();\n\n  @Output()\n  openServoTestModal = new EventEmitter<ServoTestEvent>();\n\n  @Input()\n  isMaster = false;\n\n  @Input()\n  location!: ControllerLocation;\n\n  addIcon = faPlus;\n\n  uartPanelOpenState = false;\n  i2cPanelOpenState = false;\n  i2cUpdateTrigger = 0;\n\n  moduleCallback(_: unknown) {\n    throw new Error('Method not implemented.');\n  }\n\n  addUartModule(evt: Event) {\n    evt.stopPropagation();\n\n    if (!this.uartPanelOpenState) {\n      this.uartPanelOpenState = true;\n    }\n\n    this.addModuleEvent.emit({\n      locationId: this.location.locationId,\n      module: ModuleType.uart,\n    });\n  }\n\n  addI2cModule(evt: Event) {\n    evt.stopPropagation();\n\n\n    if (!this.i2cPanelOpenState) {\n      this.i2cPanelOpenState = true;\n    }\n\n    this.addModuleEvent.emit({\n      locationId: this.location.locationId,\n      module: ModuleType.i2c,\n    });\n  }\n\n  removeModule(evt: RemoveModuleEvent) {\n    this.removeModuleEvent.emit({\n      locationId: this.location.locationId,\n      id: evt.id,\n      module: evt.module,\n    });\n  }\n\n  i2cAddressChanged(evt: AddressChangeEvent) {\n    // if the new address in use, swap it to the old address\n      const m1 = this.location.i2cModules.find(\n        (m) => m.i2cAddress === evt.new\n      );\n\n      if (m1) {\n        m1.i2cAddress = evt.old;\n      }\n\n      const m2 = this.location.i2cModules.find(\n        (m) => m.i2cAddress === evt.old\n      );\n\n      if (m2) {\n        m2.i2cAddress = evt.new;\n      }\n\n      this.i2cUpdateTrigger++;\n  }\n\n\n  testServoModal(\n    module: ModuleType,\n    subType: ModuleSubType,\n    channelId: string,\n  ) {\n    this.openServoTestModal.emit({\n      locationId: this.location.locationId,\n      moduleType: module,\n      moduleSubType: subType,\n      channelId: channelId,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"./src/assets/styles/variables\" as v;\r\n\r\n.header-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: -webkit-fill-available;\r\n    margin-right: 30px;\r\n\r\n    .header-spacer {\r\n        flex-grow: 1;\r\n    }\r\n\r\n \r\n    .header-button {\r\n        button {\r\n            height: 30px;\r\n            font-size: small;\r\n            padding: 5px 10px;\r\n        }\r\n    }\r\n}\r\n\r\n.uart-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        padding-bottom: 10px;\r\n    }\r\n}\r\n\r\n.uart-module {\r\n\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n\r\n    .type {\r\n        width: 200px;\r\n        margin-right: 20px;\r\n\r\n        select {\r\n            padding-top: 4px;\r\n            width: 100%;\r\n            max-width: 300px;\r\n            font-size: large;\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    .input {\r\n        flex-grow: 1;\r\n        margin: 0px;\r\n        max-width: 400px;\r\n\r\n        input {\r\n            padding: 2px;\r\n            font-size: large;\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.servo-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        border: 2px solid v.$color-dark;\r\n        padding: 10px;\r\n    }\r\n\r\n   \r\n}\r\n\r\n.i2c-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        border: 2px solid v.$color-dark;\r\n        padding: 10px;\r\n    }\r\n\r\n    .i2c-channel {\r\n\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n\r\n        .label {\r\n            font-size: large;\r\n            width: 120px;\r\n        }\r\n\r\n        .input {\r\n            flex-grow: 1;\r\n            max-width: 400px;\r\n\r\n            input {\r\n                font-size: large;\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        .enabled {\r\n            width: 120px;\r\n            text-align: center;\r\n            margin: 0px;\r\n            margin-right: 20px;\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n.gpio-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        border: 2px solid v.$color-dark;\r\n        padding: 10px;\r\n    }\r\n\r\n    .gpio-channel {\r\n\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n\r\n        .label {\r\n            font-size: large;\r\n            width: 120px;\r\n        }\r\n\r\n        .input {\r\n            flex-grow: 1;\r\n            max-width: 400px;\r\n\r\n            input {\r\n                font-size: large;\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        .enabled {\r\n            width: 120px;\r\n            text-align: center;\r\n            margin: 0px;\r\n            margin-right: 20px;\r\n\r\n        }\r\n\r\n        .default-low {\r\n            width: 120px;\r\n            text-align: center;\r\n            margin: 0px;\r\n            margin-right: 20px;\r\n\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./esp-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-accordion>\r\n    <mat-expansion-panel [expanded]=\"uartPanelOpenState\" (closed)=\"uartPanelOpenState = false\">\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>Serial Modules</mat-panel-title>\r\n            <mat-panel-description>\r\n                <div class=\"header-box\">\r\n                    <div class=\"header-spacer\"></div>\r\n                    <div class=\"header-button\">\r\n                        <button (click)=\"addUartModule($event)\">\r\n                            <fa-icon [icon]=\"addIcon\"/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n        <ul *ngIf=\"(location?.uartModules)\" class=\"uart-list\">\r\n            <li *ngFor=\"let module of location.uartModules\">\r\n                <app-uart-module \r\n                    (removeModuleEvent)=\"removeModule($event)\" \r\n                    [module]=\"module\" \r\n                    [isMaster]=\"isMaster\"/>\r\n            </li>\r\n        </ul>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel [expanded]=\"i2cPanelOpenState\" (closed)=\"i2cPanelOpenState = false\">\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>I2C configuration</mat-panel-title>\r\n            <mat-panel-description>\r\n                <div class=\"header-box\">\r\n                    <div class=\"header-spacer\"></div>\r\n                    <div class=\"header-button\">\r\n                        <button (click)=\"addI2cModule($event)\">\r\n                            <fa-icon [icon]=\"addIcon\"/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n        <ul *ngIf=\"(location?.i2cModules)\" class=\"i2c-list\">\r\n            <li *ngFor=\"let module of location.i2cModules\">\r\n                <app-i2c-module \r\n                    (removeModuleEvent)=\"removeModule($event)\" \r\n                    (i2cAddressChangedEvent)=\"i2cAddressChanged($event)\"\r\n                    [updateTrigger]=\"i2cUpdateTrigger\"\r\n                    [module]=\"module\" \r\n                    />\r\n            </li> \r\n        </ul>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>GPIO configuration</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <ul *ngIf=\"(location?.gpioModule)\" class=\"servo-list\">\r\n            <li *ngFor=\"let channel of location.gpioModule.channels\">\r\n                <app-gpio-channel [channel]=\"channel\"></app-gpio-channel>\r\n            </li>\r\n        </ul>\r\n    </mat-expansion-panel>\r\n</mat-accordion>"
        },
        {
            "name": "FormatModalComponent",
            "id": "component-FormatModalComponent-89f92a0787056b759c53faf0b4f36538d71f94a1629af85b7e02ec0b48738aa1185ad2cc50a971e78e9cff1775506f1a78faf4fe195d0e32f61e442793849857",
            "file": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-format-modal",
            "styleUrls": [
                "./format-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./format-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "controllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Controller[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ok",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\ninterface ResourceController {\n  id: number;\n  name: string;\n  address: string;\n}\n\ninterface Controller {\n  id: number;\n  name: string;\n  address: string;\n  selected: boolean;\n}\n\nexport class FormatModalResources {\n  public static controllers = 'controllers';\n\n  public static formatSdEvent = 'format_formatSD';\n  public static closeEvent = 'format_close';\n}\n\n@Component({\n  selector: 'app-format-modal',\n  templateUrl: './format-modal.component.html',\n  styleUrls: ['./format-modal.component.scss'],\n  imports: [NgFor, FormsModule],\n})\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\n  controllers: Controller[] = [];\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(FormatModalResources.controllers)) {\n      for (const controller of this.resources.get(\n        FormatModalResources.controllers,\n      ) as ResourceController[]) {\n        this.controllers.push({\n          id: controller.id,\n          name: controller.name,\n          address: controller.address,\n          selected: false,\n        });\n      }\n    }\n  }\n\n  ok() {\n    const result = [];\n\n    for (const controller of this.controllers) {\n      if (controller.selected) {\n        result.push({ name: controller.name, address: controller.address });\n      }\n    }\n\n    const evt = new ModalCallbackEvent(\n      FormatModalResources.formatSdEvent,\n      result,\n    );\n    this.modalCallback.emit(evt);\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(FormatModalResources.closeEvent, null);\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".format-modal {\r\n\r\n    width: 400px;\r\n\r\n    .modal-body {\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n\r\n        .content {\r\n            width: 300px;\r\n            height: 120px;\r\n            overflow-x: hidden;\r\n            overflow-y: auto;\r\n            display: inline;\r\n\r\n             \r\n                ::ng-deep .mat-checkbox .mat-checkbox-frame {\r\n                    border-color: black;\r\n                    background-color: #dddddd\r\n                }\r\n\r\n                ::ng-deep .mat-checkbox-checked.mat-accent:not(.mat-checkbox-disabled) .mat-checkbox-background {\r\n                    border-color: black;\r\n                    background-color:  #dddddd !important;\r\n                  }\r\n\r\n                .controller {\r\n                    font-size: 20px;\r\n                    padding-bottom: 4px;\r\n\r\n                    input {\r\n                        height: 20px;\r\n                        width: 20px;\r\n                        vertical-align: text-bottom;\r\n                    }\r\n\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n.modal-buttons {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.button-spacer {\r\n    flex-grow: 1;\r\n}\r\n\r\n.button-grouper {\r\n    button {\r\n        width: 100px;\r\n        font-size: large;\r\n        padding: 5px 0px;\r\n        margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n        display: none;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 620px) {\r\n    .scripter-modal {\r\n        width: 400px;\r\n    }\r\n}",
                    "styleUrl": "./format-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"format-modal\">\r\n    <h1>Format Module SD Card</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <ng-container *ngFor=\"let ctl of controllers\">\r\n                <div class=\"controller\">\r\n                    <label><input type=\"checkbox\" [(ngModel)]=\"ctl.selected\">{{ctl.name}}</label>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"ok();\">OK</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "GenericI2cModuleComponent",
            "id": "component-GenericI2cModuleComponent-74b7620c66132b80e3098a52b4f97b19841b980a7f7e377b3442b447b98e90d77b5e5e4c6ce3962048cbd82b1258868ff648a70cc94434283e4ebf84b748ad03",
            "file": "src/app/components/esp-module/i2c/i2c-submodules/generic-i2c-module/generic-i2c-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-i2c-module",
            "styleUrls": [
                "../base-i2c-sub-module/base-i2c-sub-module.component.scss",
                "./generic-i2c-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-i2c-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "I2cModule",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "i2cAddressChangedEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "addresses",
                    "defaultValue": "Array.from(Array(128).keys()).map((val) => val.toString())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                },
                {
                    "name": "i2cAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                },
                {
                    "name": "onI2cAddressChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseI2cSubModuleComponent } from '../base-i2c-sub-module/base-i2c-sub-module.component';\r\nimport { NgFor, NgIf } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-generic-i2c-module',\r\n  imports: [\r\n    FormsModule,\r\n    NgIf,\r\n    NgFor\r\n  ],\r\n  templateUrl: './generic-i2c-module.component.html',\r\n  styleUrls: [\r\n    '../base-i2c-sub-module/base-i2c-sub-module.component.scss',\r\n    './generic-i2c-module.component.scss'\r\n  ]\r\n})\r\nexport class GenericI2cModuleComponent\r\n  extends BaseI2cSubModuleComponent\r\n  implements OnInit {\r\n\r\n  ngOnInit(): void {\r\n    if (this.module) {\r\n      this.i2cAddress = this.module.i2cAddress.toString();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".i2c-settings {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    select {\r\n        width: 140px;\r\n        height: 30px;\r\n        font-size: medium;\r\n    }\r\n}",
                    "styleUrl": "../base-i2c-sub-module/base-i2c-sub-module.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./generic-i2c-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "BaseI2cSubModuleComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"i2c-settings\">\r\n    <select *ngIf=\"module\" [(ngModel)]=\"i2cAddress\" (ngModelChange)=\"onI2cAddressChange($event)\">\r\n        <option *ngFor=\"let addr of addresses\" [value]=\"addr\">Address {{addr}}</option>\r\n    </select>\r\n</div>"
        },
        {
            "name": "GenericSerialModuleComponent",
            "id": "component-GenericSerialModuleComponent-b33dacf378aef4f2e7f1b561e2361788b851f2a8d7645a59b61dd8fcdd025b0977136849a28a841007da045a2e1e48e8fc218812810dc26bcbb6351688339127",
            "file": "src/app/components/esp-module/uart/uart-submodules/generic-serial-module/generic-serial-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-serial-module",
            "styleUrls": [
                "../base-uart-sub-module/base-uart-sub-module.component.scss",
                "./generic-serial-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-serial-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "UartModule",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBaudRateChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "onChannelChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseUartSubModuleComponent } from '../base-uart-sub-module/base-uart-sub-module.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgIf } from '@angular/common';\n\n@Component({\n  selector: 'app-generic-serial-module',\n  templateUrl: './generic-serial-module.component.html',\n  styleUrls: [\n    '../base-uart-sub-module/base-uart-sub-module.component.scss',\n    './generic-serial-module.component.scss',\n  ],\n  imports: [NgIf, FormsModule],\n})\nexport class GenericSerialModuleComponent\n  extends BaseUartSubModuleComponent\n  implements OnInit\n{\n  ngOnInit(): void {\n    if (this.module) {\n      this.uartChannel = this.module.uartChannel.toString();\n      this.baudRate = this.module.baudRate.toString();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".uart-settings {\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  select {\r\n      width: 100px;\r\n      height: 30px;\r\n      font-size: medium;\r\n  }\r\n\r\n  .uart-settings-spacer {\r\n      width: 20px;\r\n  }\r\n}",
                    "styleUrl": "../base-uart-sub-module/base-uart-sub-module.component.scss"
                },
                {
                    "data": ".uart-settings {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    .uart-settings-spacer {\r\n        width: 20px;\r\n    }\r\n}",
                    "styleUrl": "./generic-serial-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "BaseUartSubModuleComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"uart-settings\">\r\n    <select [(ngModel)]=\"uartChannel\" (ngModelChange)=\"onChannelChange($event)\">\r\n        <option *ngIf=\"!isMaster\" value=\"1\">Channel 1</option>\r\n        <option value=\"2\">Channel 2</option>\r\n    </select>\r\n    <div class=\"uart-settings-spacer\"></div>\r\n    <select [(ngModel)]=\"baudRate\" (ngModelChange)=\"onBaudRateChange($event)\">\r\n        <option value=\"9600\">9600</option>\r\n        <option value=\"19200\">19200</option>\r\n        <option value=\"38400\">38400</option>\r\n        <option value=\"57600\">57600</option>\r\n        <option value=\"115200\">115200</option>\r\n    </select>\r\n</div>\r\n"
        },
        {
            "name": "GpioChannelComponent",
            "id": "component-GpioChannelComponent-902026df1a8adca97041603809e9ef684d5debced2a309d418d2db26964d650adb587427c7fc8a7fd7c846b500ddc569e4c8cc0b475478f241800e7e84d8ec66",
            "file": "src/app/components/esp-module/gpio/gpio-channel/gpio-channel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gpio-channel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./gpio-channel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "GpioChannel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { GpioChannel } from 'astros-common';\r\n\r\n@Component({\r\n  selector: 'app-gpio-channel',\r\n  imports: [],\r\n  templateUrl: './gpio-channel.component.html',\r\n  styleUrl: './gpio-channel.component.scss'\r\n})\r\nexport class GpioChannelComponent {\r\n  @Input()\r\n  channel!: GpioChannel;\r\n}\r\n",
            "styleUrl": "./gpio-channel.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>gpio-channel works!</p>\r\n"
        },
        {
            "name": "GpioEventModalComponent",
            "id": "component-GpioEventModalComponent-5ddd19b6f98d76278ced2b4715d3370cd84310efc8b367e3515ec113af83afea67eb22ecb0dd8c5af5a7dea59c6c0d2d7f94c96bb4ef7a48575e7c02da03c3a5",
            "file": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gpio-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./gpio-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gpio-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "state",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GpioEvent, ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class GpioEventModalResources {\n  public static gpioId = 'gpioId';\n}\n\n@Component({\n  selector: 'app-gpio-event-modal',\n  templateUrl: './gpio-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './gpio-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class GpioEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  channelId!: number;\n  state = 0;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      ScriptEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    this.channelId = this.resources.get(\n      GpioEventModalResources.gpioId,\n    ) as number;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.state = payload.setHigh ? 1 : 0;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  selectChange($event: Event) {\n    this.state = +($event.target as HTMLInputElement).value;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new GpioEvent(\n      +this.channelId,\n      +this.state === 1 ? true : false,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "\r\nselect {\r\n    display: block;\r\n    font-size: x-large;\r\n    margin: 20px 10px;\r\n    width: 380px;\r\n  }\r\n",
                    "styleUrl": "./gpio-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>GPIO Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\"\r\n                    ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" [ngModel]=\"eventTime | number : '1.0-1'\"\r\n                    (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">State</label>\r\n                <select id=\"state-select\" title=\"State\" [(ngModel)]=\"state\"\r\n                (change)=\"selectChange($event)\">\r\n                <option value=\"0\" selected>Low</option>\r\n                <option value=\"1\">High</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3da8bed71f6e90cd0c86751453adedc364a45b140dce7ea9838605cca134324482f5b07bbd97864c26637d9c968dc5c36020ed190df1e9a1f042ea9a8a13dfd2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"logout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"login.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"createAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "createAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter"
                },
                {
                    "name": "login",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"logout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"login.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"createAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  login = new EventEmitter<Event>();\n\n  @Output()\n  logout = new EventEmitter<Event>();\n\n  @Output()\n  createAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-2d73f81cdf645422dd5528f14c895afe9880ecb8569f0fc7a8c985476161acc44e6f3f5c39dac0a7f6f921afdd5cedb744142819aa43a4f9188c7b497c672594",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  standalone: true,\n})\nexport class HomeComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"page\">\r\n    Home\r\n</div>"
        },
        {
            "name": "HumanCyborgModalComponent",
            "id": "component-HumanCyborgModalComponent-215458fed2e1d5efeb5cd27ccb04f03a08fbf38384e9d32cac645f126b90e333041ae4774139effc91d90fc64cfee34e3d18fdb04c5c2d859f93fe8b6c510ef8",
            "file": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-human-cyborg-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./human-cyborg-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./human-cyborg-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "commandCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "commands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcrCommandListItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "faRemove",
                    "defaultValue": "faBan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "hasValueA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HumanCyborgRelationsCmd[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "hasValueB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HumanCyborgRelationsCmd[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "selectedCommands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcrCommand[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "valueA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "valueB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addCommand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "categoryChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "commandChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatSelectedCommand",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HcrCommand",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HcrCommand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrHasAValue",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrHasBValue",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrListItem",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: HumanCyborgRelationsCmd; name: any; }",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrName",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCommand",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAvailableCommands",
                    "args": [
                        {
                            "name": "category",
                            "type": "HcrCommandCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "HcrCommandCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport {\n  HcrCommand,\n  HcrCommandCategory,\n  HumanCyborgRelationsCmd,\n  HumanCyborgRelationsEvent,\n  HumanCyborgRelationsModule,\n  ScriptEvent,\n} from 'astros-common';\nimport { faBan } from '@fortawesome/free-solid-svg-icons';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, DecimalPipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\ninterface HcrCommandListItem {\n  id: HumanCyborgRelationsCmd;\n  name: string;\n}\n\nexport class HcrModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-human-cyborg-modal',\n  templateUrl: './human-cyborg-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './human-cyborg-modal.component.scss',\n  ],\n  imports: [FormsModule, NgFor, FontAwesomeModule, DecimalPipe],\n})\nexport class HumanCyborgModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  faRemove = faBan;\n\n  uartChannel!: number;\n  baudRate!: number;\n  commandCategory: string;\n  command!: string;\n  valueA!: string;\n  valueB!: string;\n\n  selectedCommands: HcrCommand[];\n  commands: HcrCommandListItem[];\n\n  hasValueA: HumanCyborgRelationsCmd[];\n  hasValueB: HumanCyborgRelationsCmd[];\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.selectedCommands = new Array<HcrCommand>();\n    this.commands = new Array<HcrCommandListItem>();\n    this.commandCategory = HcrCommandCategory.stimuli.toString();\n    this.setAvailableCommands(+this.commandCategory);\n\n    this.hasValueA = new Array<HumanCyborgRelationsCmd>();\n    this.hasValueA.push(\n      HumanCyborgRelationsCmd.minSecondsBetweenMusings,\n      HumanCyborgRelationsCmd.maxSecondsBetweenMusings,\n      HumanCyborgRelationsCmd.playWavOnA,\n      HumanCyborgRelationsCmd.playWavOnB,\n      HumanCyborgRelationsCmd.vocalizerVolume,\n      HumanCyborgRelationsCmd.wavAVolume,\n      HumanCyborgRelationsCmd.wavBVolume,\n      HumanCyborgRelationsCmd.setHappyLevel,\n      HumanCyborgRelationsCmd.setSadLevel,\n      HumanCyborgRelationsCmd.setMadLevel,\n      HumanCyborgRelationsCmd.setScaredLevel,\n    );\n\n    this.hasValueB = new Array<HumanCyborgRelationsCmd>();\n    this.hasValueB.push(\n      HumanCyborgRelationsCmd.playSdRandomOnA,\n      HumanCyborgRelationsCmd.playSdRandomOnB,\n    );\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      HcrModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(HcrModalResources.baudRate) as number;\n    this.scriptEvent = this.resources.get(\n      HcrModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.selectedCommands.push(...payload.commands);\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  categoryChange(_: unknown) {\n    this.errorMessage = '';\n    this.setAvailableCommands(+this.commandCategory);\n  }\n\n  commandChange(_: unknown) {\n    this.errorMessage = '';\n    if (this.hcrHasBValue(+this.command)) {\n      document.getElementById('value-a')?.removeAttribute('disabled');\n      document.getElementById('value-b')?.removeAttribute('disabled');\n      return;\n    }\n    if (this.hcrHasAValue(+this.command)) {\n      document.getElementById('value-a')?.removeAttribute('disabled');\n      document.getElementById('value-b')?.setAttribute('disabled', 'disabled');\n      return;\n    }\n\n    document.getElementById('value-a')?.setAttribute('disabled', 'disabled');\n    document.getElementById('b')?.setAttribute('disabled', 'disabled');\n  }\n\n  setAvailableCommands(category: HcrCommandCategory) {\n    this.commands.splice(0);\n\n    switch (category) {\n      case HcrCommandCategory.stimuli:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.mildHappy),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeHappy),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildSad),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeSad),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildAngry),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeAngry),\n          this.hcrListItem(HumanCyborgRelationsCmd.mildScared),\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeScared),\n          this.hcrListItem(HumanCyborgRelationsCmd.overload),\n        );\n        break;\n      case HcrCommandCategory.muse:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.enableMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.disableMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.toggleMuse),\n          this.hcrListItem(HumanCyborgRelationsCmd.triggerMusing),\n          this.hcrListItem(HumanCyborgRelationsCmd.minSecondsBetweenMusings),\n          this.hcrListItem(HumanCyborgRelationsCmd.maxSecondsBetweenMusings),\n        );\n        break;\n      case HcrCommandCategory.sdWav:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnB),\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnB),\n        );\n        break;\n      case HcrCommandCategory.stop:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.panicStop),\n          this.hcrListItem(HumanCyborgRelationsCmd.gracefulStop),\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnA),\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnB),\n        );\n        break;\n      case HcrCommandCategory.volume:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.vocalizerVolume),\n          this.hcrListItem(HumanCyborgRelationsCmd.wavAVolume),\n          this.hcrListItem(HumanCyborgRelationsCmd.wavBVolume),\n        );\n        break;\n      case HcrCommandCategory.override:\n        this.commands.push(\n          this.hcrListItem(HumanCyborgRelationsCmd.enableImprov),\n          this.hcrListItem(HumanCyborgRelationsCmd.enableCanonical),\n          this.hcrListItem(HumanCyborgRelationsCmd.enablePersonalityOverride),\n          this.hcrListItem(HumanCyborgRelationsCmd.disablePersonalityOverride),\n          this.hcrListItem(HumanCyborgRelationsCmd.zeroEmotions),\n          this.hcrListItem(HumanCyborgRelationsCmd.setHappyLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setSadLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setMadLevel),\n          this.hcrListItem(HumanCyborgRelationsCmd.setScaredLevel),\n        );\n        break;\n    }\n\n    if (this.commands.length > 0) {\n      this.command = this.commands[0].id.toString();\n    }\n  }\n\n  addCommand() {\n    let missingA = false;\n    let missingB = false;\n\n    if (this.hcrHasBValue(+this.command)) {\n      if (this.valueA === undefined || this.valueA === null) {\n        missingA = true;\n      }\n      if (this.valueB === undefined || this.valueB === null) {\n        missingB = true;\n      }\n    }\n\n    if (this.hcrHasAValue(+this.command)) {\n      if (this.valueA === undefined || this.valueA === null) {\n        missingA = true;\n      }\n    }\n\n    if (missingA || missingB) {\n      this.errorMessage = `Required Values Missing: ${missingA ? 'A' : ''}${missingA && missingB ? ',' : ''}${missingB ? 'B' : ''}`;\n      return;\n    }\n\n    this.selectedCommands.push(\n      new HcrCommand(\n        crypto.randomUUID().toString(),\n        +this.commandCategory,\n        +this.command,\n        +this.valueA,\n        +this.valueB,\n      ),\n    );\n  }\n\n  removeCommand(id: string) {\n    const cmdIdx = this.selectedCommands?.findIndex((x) => x.id === id);\n    if (cmdIdx != undefined && cmdIdx > -1) {\n      this.selectedCommands.splice(cmdIdx, 1);\n    }\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new HumanCyborgRelationsEvent(\n      this.uartChannel,\n      this.baudRate,\n      this.selectedCommands,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  formatSelectedCommand(cmd: HcrCommand) {\n    if (this.hcrHasBValue(cmd.command)) {\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA} ${cmd.valueB}`;\n    }\n\n    if (this.hcrHasAValue(cmd.command)) {\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA}`;\n    }\n\n    return this.hcrName(cmd.command);\n  }\n\n  hcrListItem(cmd: HumanCyborgRelationsCmd) {\n    return { id: cmd, name: this.hcrName(cmd) };\n  }\n\n  hcrName(cmd: HumanCyborgRelationsCmd) {\n    return HumanCyborgRelationsModule.getCommandName(cmd);\n  }\n\n  hcrHasBValue(cmd: HumanCyborgRelationsCmd) {\n    return this.hasValueB.find((x) => x === cmd) !== undefined;\n  }\n\n  hcrHasAValue(cmd: HumanCyborgRelationsCmd) {\n    return this.hasValueA.find((x) => x === cmd) !== undefined;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": ".hcr-primary-label {\r\n    font-weight:500;\r\n}\r\n\r\n.hcr-listbox-container {\r\n    display: block;\r\n    width: 306px;\r\n    border: 1px solid black;\r\n}\r\n\r\n.hcr-listbox {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    height: 80px;\r\n    overflow: auto;\r\n}\r\n\r\n.hcr-list-item {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.hcr-cmd-label{\r\n    flex-grow: 1;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n.hcr-remove-cmd{\r\n    font-size: large;\r\n    padding: 0;\r\n    margin: 0px 4px;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: black;\r\n    cursor: pointer;\r\n}\r\n\r\n.hcr-button-container {\r\n    margin-top: 4px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.hcr-button {\r\n        height: 28px;\r\n        font-size: large;\r\n        width: 60px;\r\n        padding: 0px;\r\n\r\n}",
                    "styleUrl": "./human-cyborg-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 57
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Human Cyborg Relations Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div class=\"hcr-listbox-container\">\r\n                <ul class=\"hcr-listbox\">\r\n                    <li *ngFor=\"let command of selectedCommands\">\r\n                        <div class=\"hcr-list-item\">\r\n                            <div class=\"hcr-cmd-label\">{{formatSelectedCommand(command)}}</div>\r\n                            <div>\r\n                                <button class=\"hcr-remove-cmd\" title=\"remove\" (click)=\"removeCommand(command.id)\"><fa-icon [icon]=\"faRemove\"></fa-icon></button>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <hr/>\r\n            <div>\r\n                <label class=\"hcr-primary-label\" htmlFor=\"commandCategory\">Command Category</label>\r\n                <select id=\"commandCategory\" title=\"Command Category\" [(ngModel)]=\"commandCategory\" (change)=\"categoryChange($event)\">\r\n                    <option value=\"1\">Stimuli</option>\r\n                    <option value=\"2\">Muse</option>\r\n                    <option value=\"3\">SD Wav</option>\r\n                    <option value=\"4\">Stop</option>\r\n                    <option value=\"5\">Volume</option>\r\n                    <option value=\"6\">Override</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label class=\"hcr-primary-label\" htmlFor=\"command\">Command</label>\r\n                <select id=\"command\" title=\"Command\" [(ngModel)]=\"command\" (change)=\"commandChange($event)\">\r\n                    <option [ngValue]=\"null\" disabled>Select Command</option>\r\n                    <option *ngFor=\"let command of commands\" [ngValue]=\"command.id\">{{command.name}}</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label for=\"valueA\">Value A</label>\r\n                <input id=\"value-a\" name=\"valueA\" matInput placeholder=\"Value A\" type=\"number\" step=\"1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"valueA | number : '1.0-1'\" (ngModelChange)=\"valueA = $event\" disabled/>\r\n            </div>\r\n            <div>\r\n                <label for=\"valueB\">Value B</label>\r\n                <input id=\"value-b\" name=\"valueB\" matInput placeholder=\"Value B\" type=\"number\" step=\"1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"valueB | number : '1.0-1'\" (ngModelChange)=\"valueB = $event\" disabled/>\r\n            </div>\r\n            <div class=\"hcr-button-container\">\r\n                <button class=\"hcr-button\" (click)=\"addCommand()\">Add</button>\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "I2cEventModalComponent",
            "id": "component-I2cEventModalComponent-b79500fca870d01343eea03be1d2f92293295d708001eb1321a4967f501244bef12f2f7a83b67dca54b08ffa3202f8927ec8f9117c27748a41401c850f58ebd8",
            "file": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-i2c-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./i2c-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./i2c-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { I2cEvent, ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class I2cEventModalResources {\n  public static i2cId = 'i2cId';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-i2c-event-modal',\n  templateUrl: './i2c-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './i2c-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class I2cEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  channelId!: number;\n  message: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.message = '';\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      I2cEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    this.channelId = this.resources.get(I2cEventModalResources.i2cId) as number;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.message = payload.message;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new I2cEvent(+this.channelId, this.message);\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./i2c-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>I2C Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\"\r\n                    ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" [ngModel]=\"eventTime | number : '1.0-1'\"\r\n                    (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">I2C Message</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"message\" />\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "I2cModuleComponent",
            "id": "component-I2cModuleComponent-8a31ad039659bd399b79dde9bd0f6735d7f36e7da2b87964e302263603682a70fc90d4efda2f2c87c2c7441caa68d1997312e047782f58e021b339a67213f15c",
            "file": "src/app/components/esp-module/i2c/i2c-module/i2c-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-i2c-module",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./i2c-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "I2cModule",
                    "decorators": []
                },
                {
                    "name": "updateTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "i2cAddressChangedEvent",
                    "defaultValue": "new EventEmitter<AddressChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeModuleEvent",
                    "defaultValue": "new EventEmitter<RemoveModuleEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "i2cContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'i2cContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "removeIcon",
                    "defaultValue": "faTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "subtypeName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methodsClass": [
                {
                    "name": "nameClicked",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeModule",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                },
                {
                    "name": "MatExpansionPanelDescription"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from '@angular/material/expansion';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { I2cModule, I2cType, ModuleType } from 'astros-common';\nimport { RemoveModuleEvent } from '../../utility/module-events';\nimport { GenericI2cModuleComponent } from '../i2c-submodules/generic-i2c-module/generic-i2c-module.component';\nimport { Pca9685ModuleComponent } from '../i2c-submodules/pca9685-module/pca9685-module.component';\nimport { BaseI2cSubModuleComponent } from '../i2c-submodules/base-i2c-sub-module/base-i2c-sub-module.component';\n\nexport interface AddressChangeEvent {\n  old: number;\n  new: number;\n} \n\n@Component({\n  selector: 'app-i2c-module',\n  imports: [\n    MatExpansionPanel,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    FormsModule,\n    FontAwesomeModule,\n  ],\n  templateUrl: './i2c-module.component.html',\n  styleUrl: './i2c-module.component.scss',\n})\nexport class I2cModuleComponent implements AfterViewInit, AfterContentInit {\n  @ViewChild('i2cContainer', { read: ViewContainerRef })\n  i2cContainer!: ViewContainerRef;\n\n  @Input()\n  module!: I2cModule;\n\n  // here to trigger change detection for object property changes\n  @Input()\n  set updateTrigger(val: number) {\n    console.log('I2C Module Update Trigger: ', val);\n    this.setModule();\n   }\n  \n  @Output()\n  removeModuleEvent = new EventEmitter<RemoveModuleEvent>();\n\n  @Output()\n  i2cAddressChangedEvent = new EventEmitter<AddressChangeEvent>();\n\n  subtypeName = '';\n  removeIcon = faTimes;\n  component!: ComponentRef<unknown>;\n\n  nameClicked(evt: MouseEvent) {\n    evt.stopPropagation();\n  }\n\n  ngAfterViewInit(): void {\n    this.setModule();\n  }\n\n  ngAfterContentInit(): void {\n    switch (this.module.type) {\n      case I2cType.genericI2C:\n        this.subtypeName = 'Generic I2C';\n        break;\n      case I2cType.humanCyborgRelations:\n        this.subtypeName = 'Human Cyborg Relations';\n        break;\n      case I2cType.pwmBoard:\n        this.subtypeName = 'PCA9685 PWM Board';\n        break;\n      default:\n        break;\n    }\n  }\n\n  setModule() {\n    this.i2cContainer?.clear();\n\n    let component!: ComponentRef<BaseI2cSubModuleComponent>;\n\n    switch (this.module.type) {\n      case I2cType.genericI2C:\n\n        component = this.i2cContainer.createComponent(\n          GenericI2cModuleComponent,\n        ) as ComponentRef<GenericI2cModuleComponent>;\n        break;\n      case I2cType.humanCyborgRelations:\n      case I2cType.pwmBoard:\n        component = this.i2cContainer.createComponent(\n          Pca9685ModuleComponent\n        ) as ComponentRef<Pca9685ModuleComponent>;\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      component.instance.module = this.module;\n      component.instance.i2cAddressChangedEvent.subscribe((val: string) => {\n\n        console.log('I2C Address Changed: ', val);\n\n        this.i2cAddressChangedEvent.emit({\n          old: this.module.i2cAddress,\n          new: parseInt(val, 10),\n        });\n      });\n    }\n  }\n\n  removeModule(event: Event) {\n    event.stopPropagation();\n    this.removeModuleEvent.emit({\n      locationId: this.module.locationId,\n      id: this.module.id,\n      module: ModuleType.i2c,\n    });\n  }\n}\n",
            "styleUrl": "./i2c-module.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit",
                "AfterContentInit"
            ],
            "accessors": {
                "updateTrigger": {
                    "name": "updateTrigger",
                    "setSignature": {
                        "name": "updateTrigger",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n            <div class=\"header-name\">\r\n                <input \r\n                    matInput \r\n                    placeholder=\"Name\" \r\n                    [(ngModel)]=\"module.name\" \r\n                    (keydown.space)=\"$event.stopImmediatePropagation()\"\r\n                    (click)=\"nameClicked($event)\" \r\n                />\r\n            </div>\r\n        </mat-panel-title>\r\n        <mat-panel-description>\r\n            <div class=\"header-box\">\r\n                <div class=\"header-spacer\"></div>\r\n                <div class=\"subtype-name\">\r\n                    <p >{{ subtypeName }}</p>\r\n                </div>\r\n                <div class=\"header-button\">\r\n                    <button\r\n                        (keydown.enter)=\"$event.preventDefault();removeModule($event);\" \r\n                        (keydown.space)=\"$event.preventDefault();removeModule($event);\"\r\n                        (click)=\"removeModule($event)\">\r\n                        <fa-icon [icon]=\"removeIcon\"/>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <ng-template #i2cContainer></ng-template>\r\n</mat-expansion-panel>"
        },
        {
            "name": "KangarooEventModalComponent",
            "id": "component-KangarooEventModalComponent-52a9dd775b5c767247fe0dc9f153c1b8eafc493c645eb2c5e071dca31e6519534c6c91cea1febce0fde369ab650dd3b3343a8bfd82b1b914c840e2139bbb2452",
            "file": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kangaroo-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./kangaroo-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kangaroo-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "ch1Action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "ch1PosDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "ch1Position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "ch1SpdDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "ch1Speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "ch2Action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "ch2PosDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "ch2Position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "ch2SpdDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "ch2Speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "channel1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "channel2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "kangaroo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KangarooX2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  KangarooAction,\n  KangarooX2,\n  KangarooEvent,\n  ScriptEvent,\n} from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class KangarooEventModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static kangaroo = 'kangaroo';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-kangaroo-event-modal',\n  templateUrl: './kangaroo-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './kangaroo-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class KangarooEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uartChannel!: number;\n  baudRate!: number;\n  kangaroo!: KangarooX2;\n\n  channel1: string;\n  ch1Action: string;\n  ch1Speed?: number;\n  ch1Position?: number;\n  ch1SpdDisabled: boolean;\n  ch1PosDisabled: boolean;\n\n  channel2: string;\n  ch2Action: string;\n  ch2Speed?: number;\n  ch2Position?: number;\n  ch2SpdDisabled: boolean;\n  ch2PosDisabled: boolean;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n\n    this.channel1 = 'Channel 1';\n    this.channel2 = 'Channel 2';\n\n    this.ch1Action = '0';\n    this.ch2Action = '0';\n\n    this.ch1SpdDisabled = true;\n    this.ch1PosDisabled = true;\n\n    this.ch2SpdDisabled = true;\n    this.ch2PosDisabled = true;\n\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      KangarooEventModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(\n      KangarooEventModalResources.baudRate,\n    ) as number;\n    this.kangaroo = this.resources.get(\n      KangarooEventModalResources.kangaroo,\n    ) as KangarooX2;\n\n    this.scriptEvent = this.resources.get(\n      KangarooEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.ch1Action = payload.ch1Action.toString();\n      this.ch1Speed = payload.ch1Speed;\n      this.ch1Position = payload.ch1Position;\n\n      this.ch2Action = payload.ch2Action.toString();\n      this.ch2Speed = payload.ch2Speed;\n      this.ch2Position = payload.ch2Position;\n    }\n\n    this.ch1SpdDisabled =\n      +this.ch1Action !== KangarooAction.speed &&\n      +this.ch1Action !== KangarooAction.position;\n    this.ch1PosDisabled = +this.ch1Action !== KangarooAction.position;\n\n    this.ch2SpdDisabled =\n      +this.ch2Action !== KangarooAction.speed &&\n      +this.ch2Action !== KangarooAction.position;\n    this.ch2PosDisabled = +this.ch2Action !== KangarooAction.position;\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  modalChange($event: Event) {\n    if (($event.target as HTMLInputElement).id === 'ch1select') {\n      this.ch1SpdDisabled = +this.ch1Action !== 3 && +this.ch1Action !== 4;\n      this.ch1PosDisabled = +this.ch1Action !== 4;\n\n      if (+this.ch1Action !== 3 && +this.ch1Action !== 4) {\n        this.ch1Speed = undefined;\n      }\n      if (+this.ch1Action !== 4) {\n        this.ch1Position = undefined;\n      }\n    } else if (($event.target as HTMLInputElement).id === 'ch2select') {\n      this.ch2SpdDisabled = +this.ch2Action !== 3 && +this.ch2Action !== 4;\n      this.ch2PosDisabled = +this.ch2Action !== 4;\n\n      if (+this.ch2Action !== 3 && +this.ch2Action !== 4) {\n        this.ch2Speed = undefined;\n      }\n      if (+this.ch2Action !== 4) {\n        this.ch2Position = undefined;\n      }\n    }\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    const data = new KangarooEvent(\n      this.uartChannel,\n      this.baudRate,\n      +this.ch1Action,\n      this.ch1Speed ?? 0,\n      this.ch1Position ?? 0,\n      +this.ch2Action,\n      this.ch2Speed ?? 0,\n      this.ch2Position ?? 0,\n    );\n\n    this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": ".kangaroo-channel-label {\r\n    font-size: larger;\r\n    font-weight:500;\r\n    margin-bottom: 12px !important;\r\n}\r\n\r\n.kangaroo-input{\r\n    \r\n    display: inline !important;\r\n    width: 200px !important;\r\n}\r\n\r\n.kangaroo-speed-label {\r\n\r\n    margin-right: 42px;\r\n    display: inline !important; \r\n}\r\n\r\n.kangaroo-position-label {\r\n\r\n    margin-right: 25px;\r\n    display: inline !important; \r\n}",
                    "styleUrl": "./kangaroo-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 52
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Kangaroo Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <hr/>\r\n            <div>\r\n                <label class=\"kangaroo-channel-label\" for=\"ch2select\">{{kangaroo.ch1Name}}</label>\r\n                <select id=\"ch1select\" title=\"channel 1\" [(ngModel)]=\"ch1Action\" (change)=\"modalChange($event)\">\r\n                    <option value=\"0\" selected>None</option>\r\n                    <option value=\"1\">Start</option>\r\n                    <option value=\"2\">Home</option>\r\n                    <option value=\"3\">Speed</option>\r\n                    <option value=\"4\">Position</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label class=\"kangaroo-speed-label\" for=\"ch1spd\">Speed</label>\r\n                <input class=\"kangaroo-input\" name=\"ch1spd\" matInput placeholder=\"Speed\" [disabled]=\"ch1SpdDisabled\"  [(ngModel)]=\"ch1Speed\" type=\"number\" />\r\n                <label class=\"kangaroo-position-label\" for=\"ch1pos\">Position</label>\r\n                <input class=\"kangaroo-input\" name=\"ch1pos\" matInput placeholder=\"Position\" [disabled]=\"ch1PosDisabled\" [(ngModel)]=\"ch1Position\" type=\"number\" />\r\n            </div>\r\n            <hr/>\r\n            <div>\r\n                <label class=\"kangaroo-channel-label\" for=\"ch2select\">{{kangaroo.ch2Name}}</label>\r\n                <select id=\"ch2select\" title=\"channel 2\" [(ngModel)]=\"ch2Action\" (change)=\"modalChange($event)\">\r\n                    <option value=\"0\" selected>None</option>\r\n                    <option value=\"1\">Start</option>\r\n                    <option value=\"2\">Home</option>\r\n                    <option value=\"3\">Speed</option>\r\n                    <option value=\"4\">Position</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"kangaroo-input\">\r\n                <label class=\"kangaroo-speed-label\" for=\"ch2spd\">Speed</label>\r\n                <input class=\"kangaroo-input\" name=\"ch2spd\" matInput placeholder=\"Speed\" [disabled]=\"ch2SpdDisabled\" [(ngModel)]=\"ch2Speed\" type=\"number\" />\r\n                <label class=\"kangaroo-position-label\" for=\"ch2pos\">Position</label>\r\n                <input class=\"kangaroo-input\" name=\"ch2pos\" matInput placeholder=\"Position\" [disabled]=\"ch2PosDisabled\" [(ngModel)]=\"ch2Position\" type=\"number\" />\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "KangarooModuleComponent",
            "id": "component-KangarooModuleComponent-f9eadb234d8bce888b73603f0561b1bc092f458c108be6234264eb4272a379270d4e469a011bc18a46f26537e035177b7d122df997a1e5ec746c8e94ecb0139b",
            "file": "src/app/components/esp-module/uart/uart-submodules/kangaroo-module/kangaroo-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kangaroo-module",
            "styleUrls": [
                "../base-uart-sub-module/base-uart-sub-module.component.scss",
                "./kangaroo-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kangaroo-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "UartModule",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "subModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KangarooX2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBaudRateChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "onChannelChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { KangarooX2 } from 'astros-common';\nimport { FormsModule } from '@angular/forms';\nimport { BaseUartSubModuleComponent } from '../base-uart-sub-module/base-uart-sub-module.component';\nimport { NgIf } from '@angular/common';\n\n@Component({\n  selector: 'app-kangaroo-module',\n  templateUrl: './kangaroo-module.component.html',\n  styleUrls: [\n    '../base-uart-sub-module/base-uart-sub-module.component.scss',\n    './kangaroo-module.component.scss',\n  ],\n  imports: [\n    NgIf,\n    FormsModule\n  ],\n})\nexport class KangarooModuleComponent\n  extends BaseUartSubModuleComponent\n  implements OnInit {\n  subModule!: KangarooX2;\n\n  ngOnInit(): void {\n    if (this.module) {\n      this.uartChannel = this.module.uartChannel.toString();\n      this.baudRate = this.module.baudRate.toString();\n      this.subModule = this.module.subModule as KangarooX2;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".uart-settings {\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  select {\r\n      width: 100px;\r\n      height: 30px;\r\n      font-size: medium;\r\n  }\r\n\r\n  .uart-settings-spacer {\r\n      width: 20px;\r\n  }\r\n}",
                    "styleUrl": "../base-uart-sub-module/base-uart-sub-module.component.scss"
                },
                {
                    "data": ".kangaroo{\r\n    margin-top: 20px;\r\n.kangaroo-label{\r\n            display: inline !important; \r\n            font-size: large;\r\n            margin-right: 20px;\r\n        }\r\n.kangaroo-input {\r\n            display: inline !important; \r\n            padding: 2px;\r\n            font-size: large;\r\n            width: 400px;\r\n        }\r\n}",
                    "styleUrl": "./kangaroo-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "BaseUartSubModuleComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"uart-settings\">\r\n    <select [(ngModel)]=\"uartChannel\" (ngModelChange)=\"onChannelChange($event)\">\r\n        <option *ngIf=\"!isMaster\" value=\"1\">Channel 1</option>\r\n        <option value=\"2\">Channel 2</option>\r\n    </select>\r\n    <div class=\"uart-settings-spacer\"></div>\r\n    <select [(ngModel)]=\"baudRate\" (ngModelChange)=\"onBaudRateChange($event)\">\r\n        <option value=\"9600\">9600</option>\r\n        <option value=\"19200\">19200</option>\r\n        <option value=\"38400\">38400</option>\r\n        <option value=\"57600\">57600</option>\r\n        <option value=\"115200\">115200</option>\r\n    </select>\r\n</div>\r\n<div class=\"kangaroo\">\r\n    <div >\r\n        <label class=\"kangaroo-label\" for=\"ch1Name\">Channel 1</label>\r\n        <input *ngIf=\"(subModule)\" class=\"kangaroo-input\" name=\"ch1Name\" placeholder=\"Channel 1\"  [(ngModel)]=\"subModule.ch1Name\" />\r\n    </div>\r\n    <div >\r\n        <label class=\"kangaroo-label\" for=\"ch2Name\">Channel 2</label>\r\n        <input *ngIf=\"(subModule)\" class=\"kangaroo-input\" name=\"ch2Name\" placeholder=\"Channel 2\"  [(ngModel)]=\"subModule.ch2Name\" />\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "LoadingModalComponent",
            "id": "component-LoadingModalComponent-1b801c18d1dc893e0f1cad61bfddb45b9676fe106824bf0b108f8ba62f7addc396a30ea9ac66cc288f41e7334694ab85728ffa8e04bb562f438347589d083300",
            "file": "src/app/components/modals/modules/loading-modal/loading-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-modal",
            "styleUrls": [
                "./loading-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllersResponse",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "controllersLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "controllersMsg",
                    "defaultValue": "TransmissionType.controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "disableButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "locations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AstrOsLocationCollection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "locationsLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "message",
                    "defaultValue": "'Loading Controllers...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "checkLoadedState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { ControllerService } from '@src/services';\nimport {\n  AstrOsLocationCollection,\n  ControllersResponse,\n  ControlModule,\n  TransmissionType,\n} from 'astros-common';\nimport { Subscription } from 'rxjs';\nimport { ModalCallbackEvent } from '../..//modal-base/modal-callback-event';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\n\nexport class LoadingModalResources {\n  public static closeEvent = 'loading_closeEvent';\n}\n\nexport interface LoadingModalResponse {\n  controllers: ControlModule[];\n  locations: AstrOsLocationCollection;\n}\n\n@Component({\n  selector: 'app-loading-modal',\n  templateUrl: './loading-modal.component.html',\n  styleUrls: ['./loading-modal.component.scss'],\n  standalone: true,\n})\nexport class LoadingModalComponent\n  extends ModalBaseComponent\n  implements OnInit\n{\n  subscription!: Subscription;\n\n  message = 'Loading Controllers...';\n  controllersMsg = TransmissionType.controllers;\n  locations!: AstrOsLocationCollection;\n  controllers!: ControllersResponse;\n\n  locationsLoaded = false;\n  controllersLoaded = false;\n\n  disableButton = true;\n\n  constructor(\n    private socket: WebsocketService,\n    private controllerService: ControllerService,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    const locationsObserver = {\n      next: (result: AstrOsLocationCollection) => {\n        console.log('Loaded locations');\n        this.locations = result;\n        this.locationsLoaded = true;\n        this.checkLoadedState();\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.getLoadedLocations().subscribe(locationsObserver);\n\n    const observer = {\n      next: (_: unknown) => {\n        console.log('Synced controllers');\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.syncControllers().subscribe(observer);\n\n    this.subscription = this.socket.messages.subscribe((msg: unknown) => {\n      console.log('Received message', msg);\n      if (msg && typeof msg === 'object' && 'type' in msg)\n        if (msg.type === this.controllersMsg) {\n          this.controllers = msg as ControllersResponse;\n          this.controllersLoaded = true;\n          this.checkLoadedState();\n        }\n    });\n  }\n\n  checkLoadedState() {\n    if (this.locationsLoaded && this.controllersLoaded) {\n      if (this.controllers.success) {\n        this.closeModal();\n      } else {\n        this.disableButton = false;\n        this.message = 'Failed to load controllers, using cached values.';\n      }\n    }\n  }\n\n  closeModal(): void {\n    this.subscription?.unsubscribe();\n    const evt = new ModalCallbackEvent(LoadingModalResources.closeEvent, {\n      controllers: this.controllers.controllers,\n      locations: this.locations,\n    });\n\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-modal {\r\n\r\n  width: 300px;\r\n\r\n  select {\r\n    display: block;\r\n    font-size: large;\r\n    margin-top: 8px;\r\n    width: 300px;\r\n  }\r\n\r\n  .modal-body {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    font-size: large;\r\n\r\n    .spacer {\r\n      flex-grow: 1;\r\n    }\r\n\r\n    .content {\r\n      width: 300px;\r\n      display: inline;\r\n    }\r\n\r\n    label {\r\n      display: block;\r\n      width: 300px;\r\n      margin-bottom: 2px;\r\n    }\r\n  }\r\n}\r\n\r\n.modal-buttons {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.button-spacer {\r\n  flex-grow: 1;\r\n}\r\n\r\n.button-grouper {\r\n  button {\r\n    width: 100px;\r\n    font-size: large;\r\n    padding: 5px 0px;\r\n    margin: 0px 5px;\r\n  }\r\n\r\n  .hidden {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 620px) {\r\n  .loading-modal {\r\n    width: 400px;\r\n  }\r\n}",
                    "styleUrl": "./loading-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"loading-modal\">\r\n    <br>\r\n    <br> \r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"label\">{{message}}</div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"closeModal();\"  [disabled]=\"disableButton\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-205692a8915844ceb5a2ff431a72333e3e117d06a098a102c8f2aa92b0c0f434b8c136678a4d83661e7d87b1d66520b050a0639d2f87a55d021a1d3ba49c978f",
            "file": "src/app/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "credentials",
                    "defaultValue": "{\n    username: '',\n    password: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TokenPayload",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  AuthenticationService,\n  TokenPayload,\n} from '../../services/auth/authentication.service';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  imports: [FormsModule],\n})\nexport class LoginComponent {\n  credentials: TokenPayload = {\n    username: '',\n    password: '',\n  };\n\n  constructor(\n    private auth: AuthenticationService,\n    private router: Router,\n  ) {}\n\n  login() {\n    this.auth.login(this.credentials).subscribe(\n      () => {\n        this.router.navigateByUrl('/status');\n      },\n      (err) => {\n        console.error(err);\n      },\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\nform {\r\n    margin: 2rem;\r\n    padding: 1rem;\r\n}\r\n\r\n\r\n.form-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.form-border {\r\n    flex: 1;\r\n}\r\n\r\n\r\n.form-group{\r\n    label {\r\n        font-size: medium;\r\n    }\r\n\r\n    input{\r\n        margin-bottom: 1.5rem;\r\n    }\r\n\r\n    input[type=\"username\"], input[type=\"password\"] {\r\n        font-size: medium; \r\n        padding: .5rem;   \r\n    }\r\n\r\n    label, input {\r\n        display: block;\r\n    }\r\n\r\n    button {\r\n        margin: 1rem;\r\n        float: left;\r\n    }\r\n}\r\n\r\n.form-button {\r\n\r\n    width: 100%;\r\n\r\n    button {\r\n        float: right;\r\n    }\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n    <div class=\"form-border\"></div>\r\n    <form (submit)=\"login()\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"username\" class=\"form-control\" name=\"username\" placeholder=\"Enter username\" [(ngModel)]=\"credentials.username\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\"\r\n          [(ngModel)]=\"credentials.password\" />\r\n      </div>\r\n      <div class=\"form-button\">\r\n        <button type=\"submit\" class=\"btn btn-default\">Sign in!</button>\r\n      </div>\r\n    </form>\r\n    <div class=\"form-border\"></div>\r\n  </div>\r\n"
        },
        {
            "name": "M5PaperConfigComponent",
            "id": "component-M5PaperConfigComponent-8640b39d4aba81b573a275210dff9320372ef02e43bf08583c02cc0853af3b02b550047815470b1de832d57922ecc9ef304b8d5967487e6d52656a8073f6c740",
            "file": "src/app/pages/remote-config/m5-paper-config/m5-paper-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-m5-paper-config",
            "styleUrls": [
                "./m5-paper-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./m5-paper-config.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "M5Page",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "faBackward",
                    "defaultValue": "faChevronLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "faForward",
                    "defaultValue": "faChevronRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "m5Config",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "M5Page[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pageNumber",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "scripts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptSelection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageBackward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageForward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport { M5Page, Script } from 'astros-common';\nimport { RemotesService } from 'src/app/services/remotes/remotes.service';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor } from '@angular/common';\n\ninterface ScriptSelection {\n  id: string;\n  name: string;\n}\n\n@Component({\n  selector: 'app-m5-paper-config',\n  templateUrl: './m5-paper-config.component.html',\n  styleUrls: ['./m5-paper-config.component.scss'],\n  imports: [FontAwesomeModule, FormsModule, NgFor],\n})\nexport class M5PaperConfigComponent implements OnInit {\n  faForward = faChevronRight;\n  faBackward = faChevronLeft;\n  pageNumber = 1;\n\n  scripts: ScriptSelection[] = [];\n\n  m5Config: M5Page[] = [];\n\n  currentPage: M5Page;\n  currentIndex = 0;\n\n  constructor(\n    private scriptService: ScriptsService,\n    private remoteService: RemotesService,\n  ) {\n    this.m5Config.push(new M5Page());\n\n    this.currentPage = this.m5Config[this.currentIndex];\n  }\n\n  ngOnInit(): void {\n    const scriptObserver = {\n      next: (result: Script[]) => {\n        const scriptList = result.sort((a, b) => {\n          if (a.scriptName > b.scriptName) {\n            return 1;\n          }\n          if (a.scriptName < b.scriptName) {\n            return -1;\n          }\n          return 0;\n        });\n\n        for (const s of scriptList) {\n          this.scripts.push({ id: s.id, name: s.scriptName });\n        }\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    const configObserver = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'value' in result) {\n          const config = JSON.parse(result.value as string) as M5Page[];\n\n          if (config.length != 0) {\n            this.m5Config = config;\n            this.currentPage = this.m5Config[0];\n          }\n        } else {\n          this.m5Config = new Array<M5Page>();\n          this.m5Config.push(new M5Page());\n          this.currentPage = this.m5Config[0];\n        }\n      },\n    };\n\n    this.scriptService.getAllScripts().subscribe(scriptObserver);\n    this.remoteService.getRemoteConfig().subscribe(configObserver);\n  }\n\n  selectionChange(button: number, id: string) {\n    const sIdx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    const scriptName = this.scripts[sIdx].name;\n\n    switch (button) {\n      case 1:\n        this.currentPage.button1.id = id;\n        this.currentPage.button1.name = scriptName;\n        break;\n      case 2:\n        this.currentPage.button2.id = id;\n        this.currentPage.button2.name = scriptName;\n        break;\n      case 3:\n        this.currentPage.button3.id = id;\n        this.currentPage.button3.name = scriptName;\n        break;\n      case 4:\n        this.currentPage.button4.id = id;\n        this.currentPage.button4.name = scriptName;\n        break;\n      case 5:\n        this.currentPage.button5.id = id;\n        this.currentPage.button5.name = scriptName;\n        break;\n      case 6:\n        this.currentPage.button6.id = id;\n        this.currentPage.button6.name = scriptName;\n        break;\n      case 7:\n        this.currentPage.button7.id = id;\n        this.currentPage.button7.name = scriptName;\n        break;\n      case 8:\n        this.currentPage.button8.id = id;\n        this.currentPage.button8.name = scriptName;\n        break;\n      case 9:\n        this.currentPage.button9.id = id;\n        this.currentPage.button9.name = scriptName;\n        break;\n    }\n  }\n\n  pageForward() {\n    this.currentIndex++;\n    if (this.m5Config.length < this.currentIndex + 1) {\n      this.m5Config.push(new M5Page());\n    }\n\n    this.currentPage = this.m5Config[this.currentIndex];\n    this.pageNumber = this.currentIndex + 1;\n  }\n\n  pageBackward() {\n    this.currentIndex--;\n    if (this.currentIndex < 0) {\n      this.currentIndex = 0;\n      return;\n    }\n\n    this.currentPage = this.m5Config[this.currentIndex];\n    this.pageNumber = this.currentIndex + 1;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../../../../assets/styles/variables\" as v;\r\n\r\n.container {\r\n\r\n    .page-select {\r\n        margin-top: 20px;\r\n        margin-bottom: 20px;\r\n        width: 100%;\r\n        display: flex;\r\n        flex-wrap: nowrap;\r\n\r\n\r\n        button {\r\n            font-size: x-large;\r\n            color: black;\r\n            border-radius: 10%;\r\n            background: none;\r\n        }\r\n\r\n        .page-number {\r\n            font-size: xx-large;\r\n            font-family: v.$swfont;\r\n            margin: 12px;\r\n        }\r\n\r\n        .spacer {\r\n            flex-grow: 3;\r\n        }\r\n    }\r\n\r\n    .page {\r\n        display: grid;\r\n        grid-template-columns: repeat(3, 1fr);\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-column-gap: 20px;\r\n        grid-row-gap: 20px;\r\n        width: 1200px;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .button-select {\r\n        background-color: v.$dark-blue;\r\n        border: 2px solid black;\r\n        border-radius: 10%;\r\n\r\n        select {\r\n            display: block;\r\n            font-size: large;\r\n            margin: 20px 10px;\r\n            width: 360px;\r\n        }\r\n    }\r\n\r\n    .col1-row1 {\r\n        grid-area: 1 / 1 / 2 / 2;\r\n    }\r\n\r\n    .col2-row1 {\r\n        grid-area: 1 / 2 / 2 / 3;\r\n    }\r\n\r\n    .col3-row1 {\r\n        grid-area: 1 / 3 / 2 / 4;\r\n    }\r\n\r\n    .col1-row2 {\r\n        grid-area: 2 / 1 / 3 / 2;\r\n    }\r\n\r\n    .col2-row2 {\r\n        grid-area: 2 / 2 / 3 / 3;\r\n    }\r\n\r\n    .col3-row2 {\r\n        grid-area: 2 / 3 / 3 / 4;\r\n    }\r\n\r\n    .col1-row3 {\r\n        grid-area: 3 / 1 / 4 / 2;\r\n    }\r\n\r\n    .col2-row3 {\r\n        grid-area: 3 / 2 / 4 / 3;\r\n    }\r\n\r\n    .col3-row3 {\r\n        grid-area: 3 / 3 / 4 / 4;\r\n    }\r\n}",
                    "styleUrl": "./m5-paper-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"page-select\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"page-back\">\r\n            <button title=\"Backward\" (click)=\"pageBackward()\"><fa-icon [icon]=\"faBackward\"></fa-icon></button>\r\n        </div>\r\n        <div class=\"page-number\">Page {{pageNumber}}</div>\r\n        <div class=\"page-forward\">\r\n            <button title=\"Forward\" (click)=\"pageForward()\"><fa-icon [icon]=\"faForward\"></fa-icon></button>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"page\">\r\n        <div class=\"col1-row1 button-select\">\r\n            <select #btn1 id=\"btn1-select\" title=\"Script\" [(ngModel)]=\"currentPage.button1.id\" (change)=\"selectionChange(1, btn1.value)\">\r\n                <option value=\"0\" selected>None</option>\r\n                <ng-container *ngFor=\"let script of scripts\">\r\n                    <option value=\"{{script.id}}\">{{script.name}}</option>\r\n                </ng-container>\r\n            </select>\r\n        </div>\r\n        <div class=\"col2-row1 button-select\">             \r\n            <select #btn2 id=\"btn2-select\" title=\"Script\" [(ngModel)]=\"currentPage.button2.id\" (change)=\"selectionChange(2, btn2.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col3-row1 button-select\">            \r\n            <select #btn3 id=\"btn3-select\" title=\"Script\" [(ngModel)]=\"currentPage.button3.id\" (change)=\"selectionChange(3, btn3.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col1-row2 button-select\">            \r\n            <select #btn4 id=\"btn4-select\" title=\"Script\" [(ngModel)]=\"currentPage.button4.id\" (change)=\"selectionChange(4, btn4.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col2-row2 button-select\">             \r\n            <select #btn5 id=\"btn5-select\" title=\"Script\" [(ngModel)]=\"currentPage.button5.id\" (change)=\"selectionChange(5, btn5.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col3-row2 button-select\">             \r\n            <select #btn6 id=\"btn6-select\" title=\"Script\" [(ngModel)]=\"currentPage.button6.id\" (change)=\"selectionChange(6, btn6.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col1-row3 button-select\">             \r\n            <select #btn7 id=\"btn7-select\" title=\"Script\" [(ngModel)]=\"currentPage.button7.id\" (change)=\"selectionChange(7, btn7.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col2-row3 button-select\">             \r\n            <select #btn8 id=\"btn8-select\" title=\"Script\" [(ngModel)]=\"currentPage.button8.id\"  (change)=\"selectionChange(8, btn8.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col3-row3 button-select\">             \r\n            <select #btn9 id=\"btn9-select\" title=\"Script\" [(ngModel)]=\"currentPage.button9.id\" (change)=\"selectionChange(9, btn9.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "MaestroChannelComponent",
            "id": "component-MaestroChannelComponent-dc60132c3a9d07909482e64ded47c34d2d0a865103a7534ddd5f0b635abe00d0087bf6c3c99890121a41b0f7689f2a1ae171f79e2cbd7c078635385d750aa975",
            "file": "src/app/components/esp-module/uart/uart-submodules/maestro-channel/maestro-channel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-maestro-channel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./maestro-channel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "MaestroChannel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "type",
                    "defaultValue": "'0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTypeChanged",
                    "args": [
                        {
                            "name": "evt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testServoModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ServoSettingsComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgIf } from '@angular/common';\nimport { AfterContentInit, Component, Input } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ServoSettingsComponent } from '@src/components/esp-module/shared/servo-settings/servo-settings.component';\nimport { MaestroChannel } from 'astros-common';\n\n@Component({\n  selector: 'app-maestro-channel',\n  imports: [\n    ServoSettingsComponent,\n    FormsModule,\n    NgIf\n  ],\n  templateUrl: './maestro-channel.component.html',\n  styleUrl: './maestro-channel.component.scss',\n})\nexport class MaestroChannelComponent\n implements AfterContentInit {\n  @Input() channel!: MaestroChannel;\n\n  type = '0';\n\n  ngAfterContentInit(): void {\n    if (this.channel) {\n      if (!this.channel.enabled) {\n        this.type = '0';\n        return;\n      }\n      this.type = this.channel.isServo ? '1' : '2';\n    }\n  }\n\n  onTypeChanged(evt: string): void {\n    console.log(evt);\n    switch (evt) {\n      case '0':\n        this.channel.enabled = false;\n        break;\n      case '1':\n        this.channel.enabled = true;\n        this.channel.isServo = true;\n        break;\n      case '2':\n        this.channel.enabled = true;\n        this.channel.isServo = false;\n        break;\n    }\n  }\n\n  testServoModal(): void {\n    console.log('testServoModal');\n  }\n}\n",
            "styleUrl": "./maestro-channel.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<div class=\"maestro-channel\">\r\n    <div class=\"label-row\">\r\n        <div *ngIf=\"channel\" class=\"label\">Channel {{channel.id}}</div>\r\n        <div class=\"type-select\">\r\n            <select [(ngModel)]=\"type\" (ngModelChange)=\"onTypeChanged($event)\">\r\n                <option value=\"0\">Disabled</option>\r\n                <option value=\"1\">Servo</option>\r\n                <option value=\"2\">Output</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"test-button\">\r\n            <button (click)=\"testServoModal()\">Test</button>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"channel\" class=\"servo-settings\">\r\n        <app-servo-settings  [enabled]=\"channel.enabled\" [name]=\"channel.channelName\"\r\n            [isServo]=\"channel.isServo\" [invert]=\"channel.inverted\" [minPulse]=\"channel.minPos\"\r\n            [maxPulse]=\"channel.maxPos\" [homePosition]=\"channel.homePos\" />\r\n    </div>\r\n</div>"
        },
        {
            "name": "MaestroModuleComponent",
            "id": "component-MaestroModuleComponent-315b7ceca22ac5538ad85be7f925712561cabd4ed89b37b5522875c68e731c0623d247767c0152e1952d95dd917ea7af65d6c6474b663230aa5be710cd048de9",
            "file": "src/app/components/esp-module/uart/uart-submodules/maestro-module/maestro-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-maestro-module",
            "styleUrls": [
                "../base-uart-sub-module/base-uart-sub-module.component.scss",
                "./maestro-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./maestro-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "UartModule",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableChannels",
                    "defaultValue": "Array.from({ length: 24 }, (_, i) => i + 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "channelCount",
                    "defaultValue": "\"24\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "listSize",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MaestroModule",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChannelCountChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBaudRateChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                },
                {
                    "name": "onChannelChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseUartSubModuleComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MaestroChannelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MaestroModule } from 'astros-common';\nimport { BaseUartSubModuleComponent } from '../base-uart-sub-module/base-uart-sub-module.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor, NgIf } from '@angular/common';\nimport { MaestroChannelComponent } from '../maestro-channel/maestro-channel.component';\n\n@Component({\n  selector: 'app-maestro-module',\n  templateUrl: './maestro-module.component.html',\n  styleUrls: [\n    '../base-uart-sub-module/base-uart-sub-module.component.scss',\n    './maestro-module.component.scss',\n  ],\n  imports: [NgIf, NgFor, FormsModule, MaestroChannelComponent],\n})\nexport class MaestroModuleComponent\n  extends BaseUartSubModuleComponent\n  implements OnInit\n{\n  subModule!: MaestroModule;\n\n  channelCount = \"24\";\n  listSize = 24;\n\n  availableChannels = Array.from({ length: 24 }, (_, i) => i + 1);\n\n  ngOnInit(): void {\n    if (this.module) {\n      this.uartChannel = this.module.uartChannel.toString();\n      this.baudRate = this.module.baudRate.toString();\n      this.subModule = this.module.subModule as MaestroModule;\n      this.channelCount = this.subModule.boards[0].channelCount.toString();\n    }\n  }\n  \n  onChannelCountChange(val: string): void {\n    this.listSize = parseInt(val);\n    for (let i = 23; i > this.listSize; i--) {\n      this.subModule.boards[0].channels[i].enabled = false;\n    } \n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".uart-settings {\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  select {\r\n      width: 100px;\r\n      height: 30px;\r\n      font-size: medium;\r\n  }\r\n\r\n  .uart-settings-spacer {\r\n      width: 20px;\r\n  }\r\n}",
                    "styleUrl": "../base-uart-sub-module/base-uart-sub-module.component.scss"
                },
                {
                    "data": "@use '@angular/material' as mat;\r\n@use \"../../../../../../assets/styles/variables\" as v;\r\n\r\n.uart-settings {\r\n padding-bottom: 10px;\r\n}\r\n\r\n\r\n.servo-list {\r\n\r\n    padding-left: 0px;\r\n    li {\r\n        background: v.$color-list-light-grey; ;\r\n        list-style: none;\r\n        border-bottom: 2px solid #e0e0e0;\r\n\r\n        .servo-list-item{\r\n            margin-left: 10px;\r\n        }\r\n \r\n    }\r\n    li:nth-child(odd) {\r\n        background: v.$color-list-med-grey; \r\n    }\r\n}",
                    "styleUrl": "./maestro-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "BaseUartSubModuleComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"uart-settings\">\r\n    <select [(ngModel)]=\"uartChannel\" (ngModelChange)=\"onChannelChange($event)\">\r\n        <option *ngIf=\"!isMaster\" value=\"1\">Channel 1</option>\r\n        <option value=\"2\">Channel 2</option>\r\n    </select>\r\n    <div class=\"uart-settings-spacer\"></div>\r\n    <select [(ngModel)]=\"baudRate\" (ngModelChange)=\"onBaudRateChange($event)\">\r\n        <option value=\"9600\">9600</option>\r\n        <option value=\"19200\">19200</option>\r\n        <option value=\"38400\">38400</option>\r\n        <option value=\"57600\">57600</option>\r\n        <option value=\"115200\">115200</option>\r\n    </select>\r\n    <div class=\"uart-settings-spacer\"></div>\r\n    <select [(ngModel)]=\"channelCount\" (ngModelChange)=\"onChannelCountChange($event)\">\r\n        <option value=\"6\">6</option>\r\n        <option value=\"12\">12</option>\r\n        <option value=\"18\">18</option>\r\n        <option value=\"24\">24</option>\r\n    </select>\r\n</div>\r\n<hr />\r\n<ul *ngIf=\"subModule && subModule.boards[0]\" class=\"servo-list\">\r\n    <ng-container *ngFor=\"let channel of subModule.boards[0].channels; let i = index\">\r\n        <li *ngIf=\"i < subModule.boards[0].channelCount\">\r\n            <div class=\"servo-list-item\">\r\n                <app-maestro-channel [channel]=\"channel\" />\r\n            </div>\r\n        </li>\r\n    </ng-container>\r\n</ul>"
        },
        {
            "name": "ModalBaseComponent",
            "id": "component-ModalBaseComponent-d5ed3f419c931a9fe967322b9d02bbe4b77af6798b9d3848a0ec585d2378750bb1023e613fe21e843300b3da7bc99ea1651316980bb7fab3f848abcfc8385acf",
            "file": "src/app/components/modals/modal-base/modal-base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-base",
            "styleUrls": [
                "./modal-base.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ModalCallbackEvent } from './modal-callback-event';\n\n@Component({\n  selector: 'app-modal-base',\n  template: '',\n  standalone: true,\n  styleUrls: ['./modal-base.component.scss'],\n})\nexport abstract class ModalBaseComponent {\n  @Input()\n  resources!: Map<string, unknown>;\n\n  @Output() modalCallback = new EventEmitter<ModalCallbackEvent>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-base.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-38e9db096889eb20095e4a3e7bbb27bc3d33de8158756095ea98aa40d127ad9465e38f534cb3049c6a2816b0a13d36249f9e29dfc35b70783e52d87752f6d8ec",
            "file": "src/app/components/modals/modal-base/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-astros-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disableBackgroundClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  Renderer2,\n  OnDestroy,\n} from '@angular/core';\nimport { ModalService } from 'src/app/services/modal/modal.service';\n\n@Component({\n  selector: 'app-astros-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  standalone: true,\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n  @Input() id: string;\n  @Input() disableBackgroundClick: string;\n\n  private element: ElementRef;\n\n  constructor(\n    private renderer: Renderer2,\n    private modalService: ModalService,\n    private el: ElementRef,\n  ) {\n    this.id = '';\n    this.disableBackgroundClick = '';\n    this.element = el;\n  }\n\n  ngOnInit(): void {\n    if (!this.id || this.id === '') {\n      console.error('modal must have an id');\n      return;\n    }\n\n    this.renderer.appendChild(document.body, this.element.nativeElement);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.element.nativeElement.addEventListener('click', (el: any) => {\n      if (\n        el.target.className === 'astros-modal-background' &&\n        !+this.disableBackgroundClick\n      ) {\n        this.close();\n      }\n    });\n\n    this.modalService.add(this);\n  }\n\n  ngOnDestroy(): void {\n    this.modalService.remove(this.id);\n    this.element.nativeElement.remove();\n  }\n\n  open(): void {\n    this.element.nativeElement.style.display = 'block';\n    document.body.classList.add('astros-modal-open');\n  }\n\n  close(): void {\n    this.element.nativeElement.style.display = 'none';\n    document.body.classList.remove('astro-modal-open');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".astros-modal {\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1000;\r\n}\r\n\r\n.astros-modal-body{\r\n    padding: 2rem;\r\n    background: #fff;\r\n    margin: 4rem;\r\n}\r\n\r\n.astros-modal-background{\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n\r\n    background-color: #000;\r\n    opacity: 0.75;\r\n\r\n    z-index: 900;\r\n}\r\n\r\nbody.astros-modal-open{\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"astros-modal-background\"></div>\r\n<div class=\"astros-modal\">\r\n    <div class=\"astros-modal-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ModulesComponent",
            "id": "component-ModulesComponent-182006d8469ab78687b5757a42731145b3d84539e98721c3acbf56de13dd8e9daeefc632984a3d3f19b4459be29029f367b2986afe26a5ced21db750f4f079d4",
            "file": "src/app/pages/modules/modules.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modules",
            "styleUrls": [
                "./modules.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modules.component.html"
            ],
            "viewProviders": [
                {
                    "name": "MatExpansionPanel"
                }
            ],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableCoreControllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "availableDomeControllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "backgroundClickDisabled",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "bodyCaption",
                    "defaultValue": "{ str: 'Module Down' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "bodyEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'body', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "bodyLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "bodyWarning",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreCaption",
                    "defaultValue": "{ str: 'Module Down' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "coreEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'core', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "coreWarning",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "domeCaption",
                    "defaultValue": "{ str: 'Module Down' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "domeEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dome', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "domeLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "domeWarning",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "isLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "moduleDown",
                    "defaultValue": "'Module Down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notSynced",
                    "defaultValue": "'Not Synced'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "possibleControllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                }
            ],
            "methodsClass": [
                {
                    "name": "addGPIOchannel",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gpioType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 464,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gpioType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addI2CModule",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 424,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addModalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addModule",
                    "args": [
                        {
                            "name": "value",
                            "type": "AddModuleEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "AddModuleEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUartModule",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subType",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "controllerSelectChanged",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 479,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doAddModule",
                    "args": [
                        {
                            "name": "response",
                            "type": "AddModuleModalResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "AddModuleModalResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateMaestroModule",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getControllerLocation",
                    "args": [
                        {
                            "name": "locationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ControllerLocation",
                    "typeParameters": [],
                    "line": 640,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNextI2CAddress",
                    "args": [
                        {
                            "name": "modules",
                            "type": "I2cModule[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 678,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "modules",
                            "type": "I2cModule[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "el",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 617,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "el",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAlertModal",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openControllerSyncModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openServoTestModal",
                    "args": [
                        {
                            "name": "value",
                            "type": "ServoTestEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 551,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ServoTestEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseModules",
                    "args": [
                        {
                            "name": "locations",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 606,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locations",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeGPIOchannel",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 466,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeI2CModule",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "moduleId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "moduleId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeModule",
                    "args": [
                        {
                            "name": "event",
                            "type": "RemoveModuleEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "RemoveModuleEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeModuleCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeUartModule",
                    "args": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "moduleId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 412,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "moduleId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveModuleSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 493,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "servoTestModalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 580,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subtypeToI2cType",
                    "args": [
                        {
                            "name": "subtype",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "I2cType",
                    "typeParameters": [],
                    "line": 666,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "subtype",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subtypeToUartType",
                    "args": [
                        {
                            "name": "subtype",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UartType",
                    "typeParameters": [],
                    "line": 652,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "subtype",
                            "type": "ModuleSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncModalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncModuleSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 525,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatAccordion"
                },
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "EspModuleComponent",
                    "type": "component"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  MatExpansionPanel,\n  MatAccordion,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from '@angular/material/expansion';\nimport {\n  ControlModule,\n  ControllerStatus,\n  AstrOsLocationCollection,\n  ControllerLocation,\n  ModuleType,\n  UartType,\n  ModuleSubType,\n  UartModule,\n  HumanCyborgRelationsModule,\n  KangarooX2,\n  MaestroModule,\n  I2cModule,\n  I2cType,\n  AstrOsConstants,\n  MaestroBoard,\n  MaestroChannel,\n} from 'astros-common';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport {\n  AlertModalComponent,\n  AlertModalResources,\n  ConfirmModalComponent,\n  ConfirmModalResources,\n  ModalComponent,\n} from '@src/components/modals';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { NgIf, NgFor } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport {\n  AddModuleEvent,\n  RemoveModuleEvent,\n  ServoTestEvent,\n} from '@src/components/esp-module/utility/module-events';\nimport { EspModuleComponent } from '@src/components/esp-module';\nimport {\n  ControllerService,\n  ModalService,\n  SnackbarService,\n  StatusService,\n  WebsocketService,\n} from '@src/services';\nimport {\n  AddModuleModalComponent,\n  AddModuleModalResources,\n  LoadingModalComponent,\n  LoadingModalResources,\n  LoadingModalResponse,\n  ServoTestModalComponent,\n  ServoTestModalResources,\n  ServoTestMessage,\n  AddModuleModalResponse,\n} from '@src/components/modals/modules';\n\ninterface Caption {\n  str: string;\n}\n\n@Component({\n  selector: 'app-modules',\n  templateUrl: './modules.component.html',\n  styleUrls: ['./modules.component.scss'],\n  viewProviders: [MatExpansionPanel],\n  imports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    FontAwesomeModule,\n    NgIf,\n    FormsModule,\n    EspModuleComponent,\n    NgFor,\n    ModalComponent,\n  ],\n})\nexport class ModulesComponent implements AfterViewInit {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  isLoaded = false;\n\n  backgroundClickDisabled = '1';\n\n  possibleControllers: ControlModule[] = [];\n  availableDomeControllers: ControlModule[] = [];\n  availableCoreControllers: ControlModule[] = [];\n\n  coreWarning = faExclamationTriangle;\n  domeWarning = faExclamationTriangle;\n  bodyWarning = faExclamationTriangle;\n\n  @ViewChild('core', { static: false }) coreEl!: ElementRef;\n  @ViewChild('dome', { static: false }) domeEl!: ElementRef;\n  @ViewChild('body', { static: false }) bodyEl!: ElementRef;\n\n  coreLocation!: ControllerLocation;\n  domeLocation!: ControllerLocation;\n  bodyLocation!: ControllerLocation;\n\n  coreCaption: Caption = { str: 'Module Down' };\n  domeCaption: Caption = { str: 'Module Down' };\n  bodyCaption: Caption = { str: 'Module Down' };\n\n  private notSynced = 'Not Synced';\n  private moduleDown = 'Module Down';\n\n  constructor(\n    private controllerService: ControllerService,\n    private websocketService: WebsocketService,\n    private snackBar: SnackbarService,\n    private modalService: ModalService,\n    private renderer: Renderer2,\n    private status: StatusService,\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.openControllerSyncModal();\n  }\n\n  //#region Loading Modal\n\n  openControllerSyncModal() {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(LoadingModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.syncModalCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  syncModalCallback(evt: ModalCallbackEvent) {\n    if (evt.type !== LoadingModalResources.closeEvent) {\n      return;\n    }\n    const response = evt.value as LoadingModalResponse;\n\n    this.parseModules(response.locations);\n\n    // always filter out the master controller since it's always the body module\n    this.possibleControllers = response.controllers.filter(\n      (controller: ControlModule) => controller.id !== 1,\n    );\n\n    this.availableCoreControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.domeLocation.controller?.id,\n    );\n    this.availableDomeControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.coreLocation.controller?.id,\n    );\n\n    this.handleStatus(\n      this.status.getCoreStatus(),\n      this.coreEl,\n      this.coreCaption,\n    );\n    this.handleStatus(\n      this.status.getDomeStatus(),\n      this.domeEl,\n      this.domeCaption,\n    );\n    this.handleStatus(\n      this.status.getBodyStatus(),\n      this.bodyEl,\n      this.bodyCaption,\n    );\n\n    this.status.coreStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.coreEl, this.coreCaption),\n    );\n    this.status.domeStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.domeEl, this.domeCaption),\n    );\n    this.status.bodyStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.bodyEl, this.bodyCaption),\n    );\n\n    this.isLoaded = true;\n\n    this.modalService.close('modules-modal');\n  }\n  //#endregion\n\n  //#region Alert Modal\n  openAlertModal(message: string) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(AlertModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(AlertModalResources.message, message);\n\n    component.instance.modalCallback.subscribe((_: unknown) => {\n      this.modalService.close('modules-modal');\n    });\n\n    this.modalService.open('modules-modal');\n  }\n  //#endregion\n\n  //#region Module Modals\n  addModule(value: AddModuleEvent) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(AddModuleModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(\n      AddModuleModalResources.locationId,\n      value.locationId,\n    );\n    component.instance.resources.set(\n      AddModuleModalResources.moduleType,\n      value.module,\n    );\n\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.addModalCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  addModalCallback(evt: ModalCallbackEvent) {\n    if (evt.type === AddModuleModalResources.closeEvent) {\n      this.modalService.close('modules-modal');\n      this.container.clear();\n      return;\n    }\n\n    if (evt.type !== AddModuleModalResources.addEvent) {\n      return;\n    }\n\n    const response = evt.value as AddModuleModalResponse;\n    this.doAddModule(response);\n\n    this.modalService.close('modules-modal');\n    this.container.clear();\n  }\n\n  removeModule(event: RemoveModuleEvent) {\n    this.container.clear();\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(\n      ConfirmModalResources.action,\n      'Remove Module',\n    );\n    component.instance.resources.set(\n      ConfirmModalResources.message,\n      'Are you sure you want to remove this module?',\n    );\n    component.instance.resources.set(ConfirmModalResources.confirmEvent, event);\n\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.removeModuleCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  removeModuleCallback(evt: ModalCallbackEvent) {\n    console.log('evt', evt);\n    if (evt.type === ConfirmModalResources.closeEvent) {\n      this.modalService.close('modules-modal');\n      this.container.clear();\n      return;\n    }\n\n    if (evt.type !== ConfirmModalResources.confirmEvent) {\n      return;\n    }\n    const response = evt.value as RemoveModuleEvent;\n\n    switch (response.module) {\n      case ModuleType.uart:\n        this.removeUartModule(response.locationId, response.id);\n        break;\n      case ModuleType.i2c:\n        this.removeI2CModule(response.locationId, response.id);\n        break;\n      case ModuleType.gpio:\n        this.removeGPIOchannel(response.locationId, response.id);\n        break;\n    }\n\n    this.modalService.close('modules-modal');\n    this.container.clear();\n  }\n\n  //#endregion\n\n  //#region Module logic\n\n  doAddModule(response: AddModuleModalResponse) {\n    switch (response.moduleType) {\n      case ModuleType.uart:\n        this.addUartModule(response.locationId, response.moduleSubType);\n        break;\n      case ModuleType.i2c:\n        this.addI2CModule(response.locationId, response.moduleSubType);\n        break;\n      case ModuleType.gpio:\n        this.addGPIOchannel(response.locationId, response.moduleSubType);\n        break;\n    }\n  }\n\n  //#region Serial Modules\n  addUartModule(location: string, subType: ModuleSubType) {\n    const controller = this.getControllerLocation(location);\n\n    const defaultChannel = location === AstrOsConstants.BODY ? 2 : 1;\n    const uartType = this.subtypeToUartType(subType);\n\n    const module = new UartModule(\n      crypto.randomUUID(),\n      'New Serial Module',\n      location,\n      uartType,\n      defaultChannel,\n      9600,\n    );\n\n    switch (uartType) {\n      case UartType.humanCyborgRelations:\n        module.subModule = new HumanCyborgRelationsModule();\n        break;\n      case UartType.kangaroo:\n        module.subModule = new KangarooX2(\n          crypto.randomUUID(),\n          'Channel 1',\n          'Channel 2',\n        );\n        break;\n      case UartType.maestro:\n        module.subModule = this.generateMaestroModule();\n        break;\n    }\n\n    controller.uartModules.push(module);\n  }\n\n\n  generateMaestroModule() {\n\n    const subModule = new MaestroModule();\n\n    subModule.boards = [\n      new MaestroBoard(\n        crypto.randomUUID(),\n        0,\n        'Board 1',\n        24\n      )\n    ]\n\n    for (let i = 0; i < 24; i++) {\n     \n      const idx = i + 1;\n      subModule.boards[0].channels.push(\n        new MaestroChannel(\n          idx,\n          `Channel ${i + idx}`,\n          false,\n          subModule.boards[0].id,\n          true,\n          500,\n          2500,\n          1250,\n          false,\n          0,\n          0,\n        )\n      );\n    }\n\n    return subModule;\n  }\n\n  removeUartModule(location: string, moduleId: string) {\n    const controller = this.getControllerLocation(location);\n\n    controller.uartModules = controller.uartModules\n      .filter((module: UartModule) => module.id !== moduleId)\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  //#endregion\n\n  //#region I2C Modules\n\n  addI2CModule(location: string, subType: ModuleSubType) {\n    const controller = this.getControllerLocation(location);\n    const i2cType = this.subtypeToI2cType(subType);\n    const nextAddress = this.getNextI2CAddress(controller.i2cModules);\n\n    if (nextAddress === -1) {\n      this.openAlertModal('All I2C addresses are in use.');\n      return;\n    }\n\n    const module = new I2cModule(\n      crypto.randomUUID(),\n      'New I2C Module',\n      location,\n      nextAddress,\n      i2cType,\n    );\n\n    switch (i2cType) {\n      case I2cType.genericI2C:\n        break;\n      case I2cType.humanCyborgRelations:\n        break;\n      case I2cType.pwmBoard:\n        break;\n    }\n\n    controller.i2cModules.push(module);\n  }\n\n  removeI2CModule(location: string, moduleId: string) {\n    const controller = this.getControllerLocation(location);\n\n    controller.i2cModules = controller.i2cModules\n      .filter((module: I2cModule) => module.id !== moduleId)\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  //#endregion\n\n  addGPIOchannel(location: string, gpioType: ModuleSubType) {}\n\n  removeGPIOchannel(location: string, channelId: string) {\n    const controller = this.getControllerLocation(location);\n\n    /*controller.gpioChannels = controller.gpioChannels.filter(\n      (channel: string) => channel !== channelId,\n    );\n    */\n  }\n\n  //#endregion\n\n  //#region Controller Selection\n\n  controllerSelectChanged(_: unknown) {\n    this.availableCoreControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.domeLocation.controller?.id,\n    );\n    this.availableDomeControllers = this.possibleControllers.filter(\n      (controller: ControlModule) =>\n        controller.id !== this.coreLocation.controller?.id,\n    );\n  }\n\n  //#endregion\n  //#region Data Persistence\n\n  saveModuleSettings() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('module settings saved!');\n            this.snackBar.okToast('Module settings saved!');\n          } else {\n            console.log('module settings save failed!');\n            this.snackBar.okToast('Module settings save failed!');\n          }\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Module settings save failed!');\n      },\n    };\n\n    this.controllerService\n      .saveLocations(\n        new AstrOsLocationCollection(\n          this.coreLocation,\n          this.domeLocation,\n          this.bodyLocation,\n        ),\n      )\n      .subscribe(observer);\n\n    this.status.resetStatus();\n  }\n\n  syncModuleSettings() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('module sync queued!');\n            this.snackBar.okToast('Module sync queued!');\n          } else {\n            console.log('module sync failed to queue');\n            this.snackBar.okToast(`Module sync failed to queue.`);\n          }\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Module sync failed!');\n      },\n    };\n\n    this.controllerService.syncLocationConfig().subscribe(observer);\n  }\n\n  //#endregion\n\n  //#region Servo Test\n\n  openServoTestModal(value: ServoTestEvent) {\n    if (!value.locationId) {\n      this.openAlertModal('Location for this servo is not set.');\n      return;\n    }\n\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    const component = this.container.createComponent(ServoTestModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.resources.set(\n      ServoTestModalResources.controllerId,\n      value.locationId,\n    );\n    component.instance.resources.set(\n      ServoTestModalResources.servoId,\n      value.channelId,\n    );\n\n    component.instance.modalCallback.subscribe((result: ModalCallbackEvent) => {\n      this.servoTestModalCallback(result);\n    });\n\n    this.modalService.open('modules-modal');\n  }\n\n  servoTestModalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ServoTestModalResources.sendServoMove: {\n        const servoTest = evt.value as ServoTestMessage;\n        this.websocketService.sendMessage({\n          msgType: 'SERVO_TEST',\n          data: {\n            controllerId: servoTest.controllerId,\n            servoId: servoTest.servoId,\n            value: servoTest.value,\n          },\n        });\n        break;\n      }\n      case ServoTestModalResources.closeEvent: {\n        this.modalService.close('modules-modal');\n        this.container.clear();\n        break;\n      }\n    }\n  }\n\n  //#endregion\n\n  //#region Helper Functions\n\n  private parseModules(locations: AstrOsLocationCollection) {\n    console.log(locations);\n    try {\n      this.coreLocation = locations.coreModule ?? this.coreLocation;\n      this.domeLocation = locations.domeModule ?? this.domeLocation;\n      this.bodyLocation = locations.bodyModule ?? this.bodyLocation;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  private handleStatus(\n    status: ControllerStatus,\n    el: ElementRef,\n    caption: Caption,\n  ) {\n    switch (status) {\n      case ControllerStatus.up:\n        caption.str = '';\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'hidden');\n        break;\n      case ControllerStatus.needsSynced:\n        caption.str = this.notSynced;\n        this.renderer.setStyle(el.nativeElement, 'color', 'yellow');\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\n        break;\n      case ControllerStatus.down:\n        caption.str = this.moduleDown;\n        this.renderer.setStyle(el.nativeElement, 'color', 'red');\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\n        break;\n    }\n  }\n\n  private getControllerLocation(locationId: string): ControllerLocation {\n    switch (locationId) {\n      case AstrOsConstants.BODY:\n        return this.bodyLocation;\n      case AstrOsConstants.CORE:\n        return this.coreLocation;\n      case AstrOsConstants.DOME:\n        return this.domeLocation;\n    }\n    return this.bodyLocation;\n  }\n\n  private subtypeToUartType(subtype: ModuleSubType): UartType {\n    switch (subtype) {\n      case ModuleSubType.genericSerial:\n        return UartType.genericSerial;\n      case ModuleSubType.humanCyborgRelationsSerial:\n        return UartType.humanCyborgRelations;\n      case ModuleSubType.kangaroo:\n        return UartType.kangaroo;\n      case ModuleSubType.maestro:\n        return UartType.maestro;\n    }\n    return UartType.genericSerial;\n  }\n\n  private subtypeToI2cType(subtype: ModuleSubType): I2cType {\n    switch (subtype) {\n      case ModuleSubType.genericI2C:\n        return I2cType.genericI2C;\n      case ModuleSubType.humanCyborgRelationsI2C:\n        return I2cType.humanCyborgRelations;\n      case ModuleSubType.pwmBoard:\n        return I2cType.pwmBoard;\n    }\n    return I2cType.genericI2C;\n  }\n\n  private getNextI2CAddress(modules: I2cModule[]): number {\n    const addresses = modules.map((module: I2cModule) => module.i2cAddress);\n    for (let i = 0; i < 128; i++) {\n      if (!addresses.includes(i)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n\n//#endregion\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../../../assets/styles/variables\" as v;\r\n\r\n\r\n\r\n.module-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n     \r\n    .spacer {\r\n        flex: 1;\r\n    }\r\n\r\n    .module-body {\r\n        padding: 20px;\r\n        max-width: 1000px;\r\n        flex-grow: 20;\r\n\r\n        .button-bar {\r\n            display: flex;\r\n            flex-direction: row;\r\n            height: 54px;\r\n            line-height: 54px;\r\n\r\n            .title {\r\n                width: 200px;\r\n                font-size: xx-large;\r\n                font-family: v.$swfont;\r\n            }\r\n\r\n            .button-box {\r\n                float: right;\r\n\r\n                button {\r\n                    font-size: x-large;\r\n                    font-family: v.$swfont;\r\n                    background-color: v.$dark-blue;\r\n                }\r\n            }\r\n        }\r\n\r\n        .module-accordian {\r\n            .controller-select {\r\n                select {\r\n                    padding-top: 4px;\r\n                    width: 100%;\r\n                    max-width: 300px;\r\n                    font-size: large;\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .warning {\r\n                margin-right: 20px;\r\n                color: slategray;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n.tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n    border-bottom: 1px dotted lightgray;\r\n}\r\n\r\n.tooltip .tooltiptext {\r\n    visibility: hidden;\r\n    width: 120px;\r\n    background-color: black;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 20px;\r\n    padding: 5px 0;\r\n\r\n    /* Position the tooltip */\r\n    position: absolute;\r\n    z-index: 1;\r\n    top: -5px;\r\n    right: 200%;\r\n}\r\n\r\n.tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n}\r\n\r\n",
                    "styleUrl": "./modules.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"module-container\">\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"module-body\">\r\n        <div class=\"button-bar\">\r\n            <div class=\"title\">\r\n                Modules\r\n            </div>\r\n            <div class=\"spacer\"></div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"saveModuleSettings()\">Save</button>\r\n            </div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"syncModuleSettings()\">Sync</button>\r\n            </div>\r\n        </div>\r\n        <mat-accordion class=\"module-accordian\">\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>Body Module</mat-panel-title>\r\n                    <div class=\"warning tooltip\" #body>\r\n                        <span class=\"tooltiptext\">{{bodyCaption.str}}</span>\r\n                        <fa-icon [icon]=\"bodyWarning\"></fa-icon>\r\n                    </div>\r\n                </mat-expansion-panel-header>\r\n                <ng-container *ngIf=\"isLoaded\">\r\n                    <div class=\"controller-select\">\r\n                        <select title=\"Controller Select\" disabled>\r\n                            <option value=\"0\" selected>Master Controller</option>\r\n                        </select>\r\n                    </div>\r\n                    <app-esp-module (addModuleEvent)=\"addModule($event)\" (removeModuleEvent)=\"removeModule($event)\"\r\n                        (openServoTestModal)=\"openServoTestModal($event)\" [location]=\"bodyLocation\" [isMaster]=\"true\" />\r\n                </ng-container>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>Core Module</mat-panel-title>\r\n                    <div class=\"warning tooltip\" #core>\r\n                        <span class=\"tooltiptext\">{{coreCaption.str}}</span>\r\n                        <fa-icon [icon]=\"coreWarning\"></fa-icon>\r\n                    </div>\r\n                </mat-expansion-panel-header>\r\n                <ng-container *ngIf=\"isLoaded\">\r\n                    <div class=\"controller-select\">\r\n                        <select id=\"core-controller-select\" title=\"Controller Select\"\r\n                            [(ngModel)]=\"coreLocation.controller.id\" (change)=\"controllerSelectChanged($event)\">\r\n                            <option [ngValue]=\"0\" selected>Disabled</option>\r\n                            <ng-container *ngFor=\"let controller of availableCoreControllers\">\r\n                                <option [ngValue]=\"controller.id\">{{controller.name}}</option>\r\n                            </ng-container>\r\n                        </select>\r\n                    </div>\r\n                    <app-esp-module (addModuleEvent)=\"addModule($event)\" (removeModuleEvent)=\"removeModule($event)\"\r\n                        (openServoTestModal)=\"openServoTestModal($event)\" [location]=\"coreLocation\"/>\r\n                </ng-container>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>Dome Module</mat-panel-title>\r\n                    <div class=\"warning tooltip\" #dome>\r\n                        <span class=\"tooltiptext\">{{domeCaption.str}}</span>\r\n                        <fa-icon [icon]=\"domeWarning\"></fa-icon>\r\n                    </div>\r\n                </mat-expansion-panel-header>\r\n                <ng-container *ngIf=\"isLoaded\">\r\n                    <div class=\"controller-select\">\r\n                        <select id=\"dome-controller-select\" title=\"Controller Select\"\r\n                            [(ngModel)]=\"domeLocation.controller.id\" (change)=\"controllerSelectChanged($event)\">\r\n                            <option [ngValue]=\"0\" selected>Disabled</option>\r\n                            <ng-container *ngFor=\"let controller of availableDomeControllers\">\r\n                                <option [ngValue]=\"controller.id\">{{controller.name}}</option>\r\n                            </ng-container>\r\n                        </select>\r\n                    </div>\r\n                    <app-esp-module (addModuleEvent)=\"addModule($event)\" (removeModuleEvent)=\"removeModule($event)\"\r\n                        (openServoTestModal)=\"openServoTestModal($event)\" [location]=\"domeLocation\"/>\r\n                </ng-container>\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n</div>\r\n\r\n<app-astros-modal id=\"modules-modal\" disableBackgroundClick=\"{{backgroundClickDisabled}}\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-98a008193c1f0c4cdc8bc0a0ea834ccfa6ea3349e1b8c7f4e49a10feed7d2b072339a6ef467173d07cea8db226fb9ed166c906ce513a3db9afe2a19fc26b78ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "Pca9685ModuleComponent",
            "id": "component-Pca9685ModuleComponent-9f855929bfabeff768529f02011c6127e7e9f98f0fbada1ce83915c0ab5b285c4cf0904402ccdf4d4a6cca44505ecc1c1d83a611d879f66930e9fe687c786f33",
            "file": "src/app/components/esp-module/i2c/i2c-submodules/pca9685-module/pca9685-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pca9685-module",
            "styleUrls": [
                "../base-i2c-sub-module/base-i2c-sub-module.component.scss",
                "./pca9685-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pca9685-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "I2cModule",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "i2cAddressChangedEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "addresses",
                    "defaultValue": "Array.from(Array(128).keys()).map((val) => val.toString())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                },
                {
                    "name": "i2cAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                },
                {
                    "name": "onI2cAddressChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseI2cSubModuleComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseI2cSubModuleComponent } from '../base-i2c-sub-module/base-i2c-sub-module.component';\r\nimport { NgFor, NgIf } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-pca9685-module',\r\n  imports: [\r\n    FormsModule,\r\n    NgIf,\r\n    NgFor\r\n  ],\r\n  templateUrl: './pca9685-module.component.html',\r\n  styleUrls: [\r\n    '../base-i2c-sub-module/base-i2c-sub-module.component.scss',\r\n    './pca9685-module.component.scss'\r\n  ]\r\n})\r\nexport class Pca9685ModuleComponent\r\n  extends BaseI2cSubModuleComponent\r\n  implements OnInit {\r\n\r\n  ngOnInit(): void {\r\n    if (this.module) {\r\n      this.i2cAddress = this.module.i2cAddress.toString();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".i2c-settings {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    select {\r\n        width: 140px;\r\n        height: 30px;\r\n        font-size: medium;\r\n    }\r\n}",
                    "styleUrl": "../base-i2c-sub-module/base-i2c-sub-module.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./pca9685-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "BaseI2cSubModuleComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"i2c-settings\">\r\n    <select *ngIf=\"module\" [(ngModel)]=\"i2cAddress\" (ngModelChange)=\"onI2CAddressChange($event)\">\r\n        <option *ngFor=\"let addr of addresses\" [value]=\"addr\">Address {{addr}}</option>\r\n    </select>\r\n</div>\r\n<div> \r\n    <h3>Not Yet Implemented</h3>\r\n</div>\r\n"
        },
        {
            "name": "RemoteConfigComponent",
            "id": "component-RemoteConfigComponent-ca09da6db66b84daf3bc85d1ac890422e0b9c356139ab0fbdf855b9540ecf7e2efe0bb4c63c70cce726f5f8b071661e5e1f13a8ce80a8dcb08874259bff5e4de",
            "file": "src/app/pages/remote-config/remote-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-remote-config",
            "styleUrls": [
                "./remote-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./remote-config.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "M5PaperConfigComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'config'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "remoteName",
                    "defaultValue": "'Astr-Os Screen'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "hasSettings",
                    "args": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "M5PaperConfigComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\nimport { M5Page, PageButton } from 'astros-common';\nimport { RemotesService } from 'src/app/services/remotes/remotes.service';\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\nimport { M5PaperConfigComponent } from './m5-paper-config/m5-paper-config.component';\n\n@Component({\n  selector: 'app-remote-config',\n  templateUrl: './remote-config.component.html',\n  styleUrls: ['./remote-config.component.scss'],\n  imports: [M5PaperConfigComponent],\n})\nexport class RemoteConfigComponent {\n  @ViewChild('config') config!: M5PaperConfigComponent;\n\n  remoteName = 'Astr-Os Screen';\n\n  constructor(\n    private remoteService: RemotesService,\n    private snackBar: SnackbarService,\n  ) {}\n\n  saveConfig() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('Config saved!');\n            this.snackBar.okToast('Config saved!');\n          } else {\n            console.log('Config save failed!');\n            this.snackBar.okToast('Script settings save failed!');\n          }\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Config save failed!');\n      },\n    };\n\n    const config = new Array<M5Page>();\n    this.config.m5Config.forEach((page) => {\n      if (this.hasSettings(page)) {\n        config.push(page);\n      }\n    });\n\n    this.remoteService\n      .saveRemoteConfig(JSON.stringify(config))\n      .subscribe(observer);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  hasSettings(page: any): boolean {\n    for (const key in page) {\n      if (Object.prototype.hasOwnProperty.call(page, key)) {\n        const element = page[key] as unknown as PageButton;\n        if (element.id != '0') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../assets/styles/variables' as v;\r\n\r\n.remote-title {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 1200px;\r\n    margin: 0 auto;\r\n  \r\n    .remote-name{\r\n        font-size: xx-large;\r\n        font-family: v.$swfont;\r\n        margin: auto;\r\n    }\r\n\r\n    .spacer {\r\n        flex-grow: 1;\r\n    }\r\n    .button-box {\r\n      float: right;\r\n  \r\n      button{\r\n          font-size: x-large;\r\n          font-family: v.$swfont;\r\n          background-color: v.$dark-blue;\r\n      }\r\n    }\r\n}",
                    "styleUrl": "./remote-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"remote-title\">\r\n    <div class=\"remote-name\">\r\n    {{remoteName}}\r\n    </div>\r\n    <div class=\"spacer\">\r\n    </div>\r\n    <div class=\"button-box\">\r\n        <button (click)=\"saveConfig()\">Save</button>\r\n    </div>\r\n</div>\r\n<app-m5-paper-config #config></app-m5-paper-config>\r\n"
        },
        {
            "name": "ScripterComponent",
            "id": "component-ScripterComponent-b48fba02d8a7ccd79c6e6844ec3cf63aa79a3da33c26abbff668643799d7fc14fe741c3002e843fd3fb03d099e712114ead29b606f3b68b3f4107d5edaa2108a",
            "file": "src/app/pages/scripter/scripter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scripter",
            "styleUrls": [
                "./scripter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scripter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundClickDisabled",
                    "defaultValue": "'0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "characters",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "menuTopLeft",
                    "defaultValue": "{ x: 0, y: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "menuTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "removeChannelEvent",
                    "defaultValue": "'scripter_removeChannel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderedEvents",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resourcesLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "script",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Script",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "scriptChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptChannel[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "scriptId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scriptResources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptResources",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "segmentFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "segments",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "segmentWidth",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timeLineArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                }
            ],
            "methodsClass": [
                {
                    "name": "addChannel",
                    "args": [
                        {
                            "name": "locationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 712,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 783,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "channelCompare",
                    "args": [
                        {
                            "name": "a",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 870,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "channelTestCallback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 677,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEventModal",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isEdit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 439,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isEdit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 795,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateScriptId",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 886,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIdFromChannel",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 548,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKangarooControllerFromChannel",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 535,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUartChannelFromChannel",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleConfirmModalEvent",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ConfirmModalEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 606,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ConfirmModalEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 565,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openChannelAddModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openChannelAddModalKbd",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditEventModal",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openNewEventModal",
                    "args": [
                        {
                            "name": "evt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openScriptTestModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCallback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 629,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeChannel",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 655,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 855,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 810,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveBeforeTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendChannelTest",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "commandType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "commandType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timelineCallback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 616,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "ScriptRowComponent",
                    "type": "component"
                },
                {
                    "name": "MatMenuTrigger"
                },
                {
                    "name": "MatMenu"
                },
                {
                    "name": "MatMenuContent"
                },
                {
                    "name": "MatMenuItem"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewChecked,\n  Component,\n  ComponentRef,\n  OnInit,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  MatMenuTrigger,\n  MatMenu,\n  MatMenuContent,\n  MatMenuItem,\n} from '@angular/material/menu';\nimport { ActivatedRoute } from '@angular/router';\nimport { Guid } from 'guid-typescript';\nimport { ScriptResources } from 'src/app/models/script-resources';\nimport {\n  ChannelSubType,\n  ChannelType,\n  AstrOsLocationCollection,\n  Script,\n  ScriptChannel,\n  ScriptEvent,\n  ControllerLocation,\n  BaseChannel,\n} from 'astros-common';\nimport EventMarkerHelper from './helper/event-marker-helper';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor } from '@angular/common';\nimport { ScriptRowComponent } from './script-row/script-row.component';\nimport {\n  AudioEventModalComponent,\n  ChannelTestModalComponent,\n  ChannelTestModalResources,\n  ChannelTestModalResponse,\n  ControllerModalComponent,\n  ControllerModalResources,\n  ControllerModalResponse,\n  GpioEventModalComponent,\n  GpioEventModalResources,\n  HcrModalResources,\n  HumanCyborgModalComponent,\n  I2cEventModalComponent,\n  I2cEventModalResources,\n  KangarooEventModalComponent,\n  KangarooEventModalResources,\n  ScriptEventModalResources,\n  ScriptEventModalResponse,\n  ScriptTestModalComponent,\n  ScriptTestModalResources,\n  UartEventModalComponent,\n  UartEventModalResources,\n} from '@src/components/modals/scripting';\nimport {\n  ControllerService,\n  ModalService,\n  ScriptsService,\n  SnackbarService,\n} from '@src/services';\nimport {\n  ConfirmModalComponent,\n  ConfirmModalEvent,\n  ConfirmModalResources,\n  ModalComponent,\n} from '@src/components/modals';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\n\nexport interface Item {\n  timeline: string;\n  xPos: number;\n}\n\ntype ScripterModal =\n  | UartEventModalComponent\n  | KangarooEventModalComponent\n  | I2cEventModalComponent\n  | AudioEventModalComponent\n  | GpioEventModalComponent\n  | HumanCyborgModalComponent;\n\n@Component({\n  selector: 'app-scripter',\n  templateUrl: './scripter.component.html',\n  styleUrls: ['./scripter.component.scss'],\n  imports: [\n    FormsModule,\n    NgFor,\n    ScriptRowComponent,\n    MatMenuTrigger,\n    MatMenu,\n    MatMenuContent,\n    MatMenuItem,\n    ModalComponent,\n  ],\n})\nexport class ScripterComponent implements OnInit, AfterViewChecked {\n  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;\n\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  private segmentWidth = 60;\n  private segments = 3000;\n  private segmentFactor = 10;\n  private scriptId: string;\n  private resourcesLoaded = false;\n  private renderedEvents = false;\n  private characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  private removeChannelEvent = 'scripter_removeChannel';\n\n  backgroundClickDisabled = '0';\n\n  script!: Script;\n  scriptChannels: ScriptChannel[];\n\n  timeLineArray: number[];\n  menuTopLeft = { x: 0, y: 0 };\n\n  scriptResources!: ScriptResources;\n\n  components: unknown[];\n\n  constructor(\n    private route: ActivatedRoute,\n    private snackBar: SnackbarService,\n    private modalService: ModalService,\n    private renderer: Renderer2,\n    private controllerService: ControllerService,\n    private scriptService: ScriptsService,\n  ) {\n    this.scriptId = this.route.snapshot.paramMap.get('id') ?? '0';\n\n    this.timeLineArray = Array.from(\n      { length: this.segments },\n      (_, i) => (i + 1) / this.segmentFactor,\n    );\n\n    this.scriptChannels = new Array<ScriptChannel>();\n    this.components = new Array<unknown>();\n  }\n\n  ngAfterViewChecked(): void {\n    // \"this\" needs to exist before we render events\n    if (!this.renderedEvents) {\n      if (this.script != undefined) {\n        for (const ch of this.script.scriptChannels) {\n          for (const kvp of ch.eventsKvpArray) {\n            this.renderEvent(kvp.value);\n          }\n        }\n        this.renderedEvents = true;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    const csObserver = {\n      next: (result: AstrOsLocationCollection) => {\n        const modules = new Array<ControllerLocation>();\n\n        if (result.domeModule) modules.push(result.domeModule);\n        if (result.coreModule) modules.push(result.coreModule);\n        if (result.bodyModule) modules.push(result.bodyModule);\n\n        this.scriptResources = new ScriptResources(modules);\n        this.resourcesLoaded = true;\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.controllerService.getLoadedLocations().subscribe(csObserver);\n\n    if (this.scriptId === '0') {\n      this.scriptId = this.generateScriptId(5);\n      console.log(`new script id:${this.scriptId}`);\n      this.script = new Script(\n        this.scriptId,\n        '',\n        '',\n        new Date(Date.parse('1970-01-01 00:00:00.000')),\n      );\n\n      this.scriptChannels = this.script.scriptChannels;\n    } else {\n      const ssObserver = {\n        next: async (result: Script) => {\n          for (const ch of result.scriptChannels) {\n            ch.events = new Map<number, ScriptEvent>();\n\n            for (const kvp of ch.eventsKvpArray) {\n              ch.events.set(kvp.key, kvp.value);\n            }\n          }\n\n          this.script = result;\n\n          this.scriptChannels = this.script.scriptChannels;\n\n          this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\n\n          if (!this.resourcesLoaded) {\n            await new Promise((f) => setTimeout(f, 1000));\n          }\n\n          this.scriptResources.applyScript(this.script);\n        },\n        error: (err: unknown) => console.error(err),\n      };\n\n      this.scriptService.getScript(this.scriptId).subscribe(ssObserver);\n    }\n  }\n\n  saveScript() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('script settings saved!');\n            this.snackBar.okToast('Script settings saved!');\n          }\n        } else {\n          console.log('script settings save failed!');\n          this.snackBar.okToast('Script settings save failed!');\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Script settings save failed!');\n      },\n    };\n\n    // Maps don't survive JSON.stringify\n    for (const ch of this.script.scriptChannels) {\n      ch.eventsKvpArray = [];\n\n      for (const key of ch.events.keys()) {\n        const val = ch.events.get(key);\n        if (val !== undefined) {\n          ch.eventsKvpArray.push({ key: key, value: val });\n        }\n      }\n    }\n\n    this.scriptService.saveScript(this.script).subscribe(observer);\n  }\n\n  //#region testing methods\n\n  openScriptTestModal() {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    modalResources.set(ScriptTestModalResources.scriptId, this.scriptId);\n\n    const locations = new Array<string>();\n\n    this.script.deploymentStatusKvp.forEach((kvp) => {\n      locations.push(kvp.key);\n    });\n\n    modalResources.set(ScriptTestModalResources.locations, locations);\n\n    const component = this.container.createComponent(ScriptTestModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.components.push(component);\n\n    this.backgroundClickDisabled = '1';\n\n    this.modalService.open('scripter-modal');\n  }\n\n  saveBeforeTest() {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('script settings saved!');\n            this.openScriptTestModal();\n          }\n        } else {\n          console.log('script settings save failed!');\n          this.snackBar.okToast('Script settings save failed!');\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Script settings save failed!');\n      },\n    };\n\n    // Maps don't survive JSON.stringify\n    for (const ch of this.script.scriptChannels) {\n      ch.eventsKvpArray = [];\n\n      for (const key of ch.events.keys()) {\n        const val = ch.events.get(key);\n        if (val !== undefined) {\n          ch.eventsKvpArray.push({ key: key, value: val });\n        }\n      }\n    }\n\n    this.scriptService.saveScript(this.script).subscribe(observer);\n  }\n\n  sendChannelTest(\n    controllerId: number,\n    commandType: ChannelType,\n    command: unknown,\n  ) {\n    const observer = {\n      next: (result: unknown) => {\n        if (result && typeof result === 'object' && 'message' in result) {\n          if (result.message === 'success') {\n            console.log('Test command sent!');\n            this.snackBar.okToast('Test command sent!');\n          }\n        } else {\n          console.log('Test command send failed!');\n          this.snackBar.okToast('Test command send failed!');\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBar.okToast('Test command send failed!');\n      },\n    };\n\n    this.controllerService\n      .sendControllerCommand(controllerId, commandType, command)\n      .subscribe(observer);\n  }\n\n  //#endregion\n\n  openChannelAddModalKbd($event: KeyboardEvent) {\n    if (\n      $event.key === 'a' ||\n      $event.key === 'A' ||\n      $event.key === 'Enter' ||\n      $event.key === ' '\n    ) {\n      this.openChannelAddModal();\n    }\n  }\n\n  openChannelAddModal() {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n\n    modalResources.set(\n      ControllerModalResources.controllers,\n      this.scriptResources.locations,\n    );\n    modalResources.set(\n      ControllerModalResources.modules,\n      this.scriptResources.getAvailableModules(),\n    );\n    modalResources.set(\n      ControllerModalResources.channels,\n      this.scriptResources.getAvailableChannels(),\n    );\n\n    const component = this.container.createComponent(ControllerModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.components.push(component);\n\n    this.modalService.open('scripter-modal');\n  }\n\n  openNewEventModal(evt: unknown) {\n    let time = 0;\n\n    if (evt && typeof evt === 'object' && 'timeline' in evt && 'xPos' in evt) {\n      const line = document.getElementById(`script-row-${evt.timeline}`);\n      const scrollContainer = document.getElementById('scripter-container');\n\n      if (line != null && scrollContainer != null) {\n        const clickPos =\n          (evt.xPos as number) + scrollContainer.scrollLeft - line.offsetLeft;\n\n        time = Math.floor(clickPos / this.segmentWidth);\n\n        const left = time * this.segmentWidth;\n\n        if (Math.floor(clickPos) - left >= 30) {\n          time += 1;\n        }\n      } else {\n        this.snackBar.okToast('Could not determine event time!');\n        console.log('could not determine event time');\n        return;\n      }\n\n      const chIdx = this.scriptChannels\n        .map((ch) => {\n          return ch.id;\n        })\n        .indexOf(evt.timeline as string);\n\n      const ch = this.scriptChannels[chIdx];\n\n      const event = new ScriptEvent(ch.id, ch.type, ch.subType, time, '');\n\n      this.createEventModal(event, false);\n    }\n  }\n\n  openEditEventModal(channelId: string, time: number) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    if (chIdx > -1) {\n      const event = this.scriptChannels[chIdx].events.get(time);\n\n      if (event) {\n        this.createEventModal(event, true);\n      }\n    }\n  }\n\n  createEventModal(event: ScriptEvent, isEdit: boolean) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ScriptEventModalResources.scriptEvent, event);\n\n    if (isEdit) {\n      modalResources.set(\n        ScriptEventModalResources.callbackType,\n        ScriptEventModalResources.editEvent,\n      );\n    }\n\n    let component!: ComponentRef<ScripterModal>;\n\n    switch (event.channelType) {\n      case ChannelType.uart:\n        switch (event.channelSubType) {\n          case ChannelSubType.genericSerial:\n            component = this.container.createComponent(UartEventModalComponent);\n            modalResources.set(\n              UartEventModalResources.channelId,\n              this.getUartChannelFromChannel(event.scriptChannel),\n            );\n            break;\n          case ChannelSubType.kangaroo:\n            component = this.container.createComponent(\n              KangarooEventModalComponent,\n            );\n            modalResources.set(\n              KangarooEventModalResources.channelId,\n              this.getUartChannelFromChannel(event.scriptChannel),\n            );\n            modalResources.set(\n              KangarooEventModalResources.kangaroo,\n              this.getKangarooControllerFromChannel(event.scriptChannel),\n            );\n            break;\n          case ChannelSubType.humanCyborgRelations:\n            component = this.container.createComponent(\n              HumanCyborgModalComponent,\n            );\n            modalResources.set(\n              HcrModalResources.channelId,\n              this.getUartChannelFromChannel(event.scriptChannel),\n            );\n            break;\n        }\n        break;\n      case ChannelType.i2c:\n        component = this.container.createComponent(I2cEventModalComponent);\n        modalResources.set(\n          I2cEventModalResources.i2cId,\n          this.getIdFromChannel(event.scriptChannel),\n        );\n        break;\n      /* case ChannelType.servo:\n         component = this.container.createComponent(ServoEventModalComponent);\n         modalResources.set(ModalResources.servoId, this.getIdFromChannel(event.scriptChannel))\n         break; */\n      case ChannelType.audio:\n        component = this.container.createComponent(AudioEventModalComponent);\n        break;\n      case ChannelType.gpio:\n        component = this.container.createComponent(GpioEventModalComponent);\n        modalResources.set(\n          GpioEventModalResources.gpioId,\n          this.getIdFromChannel(event.scriptChannel),\n        );\n        break;\n    }\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n    this.components.push(component);\n\n    this.modalService.open('scripter-modal');\n  }\n\n  //#region resources for modals\n\n  getUartChannelFromChannel(channelId: string) {\n    const _ = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    /*if (chIdx > -1) {\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\n      return uart.id;\n    }*/\n  }\n\n  getKangarooControllerFromChannel(channelId: string) {\n    const _ = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    /*if (chIdx > -1) {\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\n      return uart.module as KangarooController;\n    }*/\n  }\n\n  getIdFromChannel(channelId: string): number | null {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    if (chIdx > -1) {\n      const servo = this.scriptChannels[chIdx].channel as BaseChannel;\n      return servo.id;\n    }\n\n    return null;\n  }\n\n  //#endregion\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ControllerModalResources.addChannelEvent: {\n        const value = evt.value as ControllerModalResponse;\n        this.addChannel(value.controller, value.module, value.channels);\n        break;\n      }\n      case ConfirmModalResources.confirmEvent:\n        this.handleConfirmModalEvent(evt.value as ConfirmModalEvent);\n        break;\n      case ScriptEventModalResources.addEvent: {\n        this.addEvent(evt.value as ScriptEvent);\n        break;\n      }\n      case ScriptEventModalResources.editEvent: {\n        const value = evt.value as ScriptEventModalResponse;\n        this.editEvent(value.scriptEvent, value.time);\n        break;\n      }\n      case ScriptEventModalResources.removeEvent: {\n        const value = evt.value as ScriptEventModalResponse;\n        this.removeEvent(value.scriptEvent.scriptChannel, value.time);\n        break;\n      }\n      case ChannelTestModalResources.channelTest: {\n        const value = evt.value as ChannelTestModalResponse;\n        this.sendChannelTest(\n          value.controllerId,\n          value.commandType,\n          value.command,\n        );\n        break;\n      }\n    }\n\n    this.modalService.close('scripter-modal');\n    this.container.clear();\n    this.components.splice(0, this.components.length);\n    this.backgroundClickDisabled = '0';\n  }\n\n  handleConfirmModalEvent(evt: ConfirmModalEvent) {\n    switch (evt.id) {\n      case this.removeChannelEvent:\n        this.removeChannel(evt.val as string);\n        break;\n    }\n  }\n\n  //#region script row call backs\n\n  timelineCallback(msg: any) {\n    msg.event.preventDefault();\n\n    this.menuTopLeft.x = msg.event.clientX;\n    this.menuTopLeft.y = msg.event.clientY;\n\n    this.menuTrigger.menuData = {\n      item: { timeline: msg.id, xPos: msg.event.clientX },\n    };\n\n    this.menuTrigger.openMenu();\n  }\n\n  removeCallback(msg: string) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ConfirmModalResources.action, 'Delete');\n    modalResources.set(\n      ConfirmModalResources.message,\n      'Are you sure you want to delete channel?',\n    );\n    modalResources.set(ConfirmModalResources.confirmEvent, {\n      id: this.removeChannelEvent,\n      val: msg,\n    });\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.components.push(component);\n\n    this.modalService.open('scripter-modal');\n  }\n\n  private removeChannel(id: string) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(id);\n\n    if (chIdx !== undefined && chIdx > -1) {\n      const channel = this.scriptChannels[chIdx];\n\n      this.scriptChannels.splice(chIdx, 1);\n\n      this.scriptResources.removeChannel(\n        channel.locationId,\n        channel.type,\n        channel.channel?.id,\n      );\n\n      this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\n    }\n  }\n\n  channelTestCallback(msg: string) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(msg);\n\n    if (chIdx !== undefined && chIdx > -1) {\n      const ch = this.scriptChannels[chIdx];\n\n      this.container.clear();\n\n      const modalResources = new Map<string, unknown>();\n\n      modalResources.set(ChannelTestModalResources.channelType, ch.type);\n      modalResources.set(ChannelTestModalResources.channelSubType, ch.subType);\n      modalResources.set(ChannelTestModalResources.channelId, ch.channelNumber);\n      modalResources.set(ChannelTestModalResources.controller, ch.locationId);\n\n      const component = this.container.createComponent(\n        ChannelTestModalComponent,\n      );\n\n      component.instance.resources = modalResources;\n      component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n        this.modalCallback(evt);\n      });\n      this.components.push(component);\n\n      this.modalService.open('scripter-modal');\n    }\n  }\n\n  //#endregion\n\n  private addChannel(\n    locationId: string,\n    channelType: ChannelType,\n    channels: number[],\n  ): void {\n    let name = this.scriptResources.locations.get(locationId)?.name;\n\n    if (!name) {\n      name = '';\n    }\n\n    if (channelType === ChannelType.audio) {\n      const chValue = this.scriptResources.addChannel(\n        locationId,\n        channelType,\n        0,\n      );\n\n      const subType = 0;\n\n      if (chValue === undefined) {\n        return;\n      }\n\n      const ch = new ScriptChannel(\n        Guid.create().toString(),\n        this.scriptId,\n        locationId,\n        channelType,\n        subType,\n        0,\n        chValue,\n        this.segments,\n      );\n\n      this.scriptChannels.push(ch);\n    } else {\n      channels.forEach((channel) => {\n        const chValue = this.scriptResources.addChannel(\n          locationId,\n          channelType,\n          +channel,\n        );\n\n        if (chValue === undefined) {\n          return;\n        }\n        let subType = ChannelSubType.none;\n\n        if (channelType === ChannelType.uart) {\n          subType = chValue.subType;\n        }\n\n        const ch = new ScriptChannel(\n          Guid.create().toString(),\n          this.scriptId,\n          locationId,\n          channelType,\n          subType,\n          channel,\n          chValue,\n          this.segments,\n        );\n\n        this.scriptChannels.push(ch);\n      });\n    }\n\n    this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\n  }\n\n  private addEvent(event: ScriptEvent): void {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(event.scriptChannel);\n\n    this.scriptChannels[chIdx].events.set(event.time, event);\n\n    this.renderEvent(event);\n  }\n\n  private editEvent(event: ScriptEvent, oldTime: number) {\n    //if (event.time !== oldTime) {\n    this.removeEvent(event.scriptChannel, oldTime);\n    this.addEvent(event);\n    // }\n    // else {\n\n    //  const chIdx = this.scriptChannels\n    //    .map((ch) => { return ch.id })\n    //    .indexOf(event.scriptChannel);\n\n    //  this.scriptChannels[chIdx].events.set(event.time, event);\n    //}\n  }\n\n  private renderEvent(event: ScriptEvent) {\n    //channelId: string, time: number) {\n    const line = document.getElementById(`script-row-${event.scriptChannel}`);\n\n    const floater = this.renderer.createElement('div');\n    const displayText = EventMarkerHelper.generateText(event);\n\n    const line1 = this.renderer.createElement('div');\n    const line1txt = this.renderer.createText(displayText[0]);\n    this.renderer.appendChild(line1, line1txt);\n    this.renderer.appendChild(floater, line1);\n\n    const line2 = this.renderer.createElement('div');\n    const line2txt = this.renderer.createText(displayText[1]);\n    this.renderer.appendChild(line2, line2txt);\n    this.renderer.appendChild(floater, line2);\n\n    const line3 = this.renderer.createElement('div');\n    const line3txt = this.renderer.createText(displayText[2]);\n    this.renderer.appendChild(line3, line3txt);\n    this.renderer.appendChild(floater, line3);\n\n    const line4 = this.renderer.createElement('div');\n    const line4txt = this.renderer.createText(displayText[3]);\n    this.renderer.appendChild(line4, line4txt);\n    this.renderer.appendChild(floater, line4);\n\n    this.renderer.setAttribute(floater, 'class', 'scripter-timeline-marker');\n    this.renderer.setAttribute(\n      floater,\n      'id',\n      `event-${event.scriptChannel}-${event.time}`,\n    );\n    this.renderer.setStyle(floater, 'top', `-5px`);\n    this.renderer.setStyle(\n      floater,\n      'left',\n      `${event.time * this.segmentWidth - 37}px`,\n    );\n    this.renderer.listen(floater, 'click', (_) => {\n      this.openEditEventModal(event.scriptChannel, event.time);\n    });\n    this.renderer.appendChild(line, floater);\n  }\n\n  private removeEvent(channelId: string, time: number) {\n    const chIdx = this.scriptChannels\n      .map((ch) => {\n        return ch.id;\n      })\n      .indexOf(channelId);\n\n    this.scriptChannels[chIdx].events.delete(time);\n\n    const element = document.getElementById(`event-${channelId}-${time}`);\n    if (element) {\n      element.parentNode?.removeChild(element);\n    }\n  }\n\n  private channelCompare(a: ScriptChannel, b: ScriptChannel) {\n    let val = a.locationId.localeCompare(b.locationId);\n\n    if (val !== 0) {\n      return val;\n    }\n\n    val = a.type - b.type;\n\n    if (val !== 0) {\n      return val;\n    }\n\n    return a.channel.channelName < b.channel.channelName ? -1 : 1;\n  }\n\n  private generateScriptId(length: number): string {\n    let result = `s${Math.floor(Date.now() / 1000)}`;\n    const charactersLength = this.characters.length;\n    for (let i = 0; i < length; i++) {\n      result += this.characters.charAt(\n        Math.floor(Math.random() * charactersLength),\n      );\n    }\n    return result;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../assets/styles/variables' as v;\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 84%;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n\r\n}\r\n\r\n.script-title {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 8px;\r\n  input {\r\n    font-size: 20px;\r\n    height: 30px;\r\n    width: 100%;\r\n  }\r\n\r\n  .button-box {\r\n    float: right;\r\n\r\n    button{\r\n        font-size: x-large;\r\n        font-family: v.$swfont;\r\n        background-color: v.$dark-blue;\r\n    }\r\n  }\r\n\r\n\r\n  .script-name{\r\n    width: 240px;\r\n  }\r\n\r\n  .script-description{\r\n    flex-grow: 1;\r\n  }\r\n\r\n}\r\n.scripter-container {\r\n  background-color: v.$color-dark;\r\n  flex-grow: 1;\r\n  display: flex;\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n  overflow-y: scroll;\r\n}\r\n\r\n\r\n.scripter-body {\r\ndisplay: flex;\r\nflex-direction: column;\r\n}\r\n\r\n.scripter-header {\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  top: 0px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  z-index: 500;\r\n}\r\n\r\n.scripter-modules {\r\n  flex-basis: 200px;\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  padding-bottom: 17px;\r\n}\r\n\r\n.scripter-module-header {\r\n  cursor: pointer;\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  left: 0px;\r\n  top: 0px;\r\n  background-color: v.$color-medium;\r\n  font-family: v.$swfont;\r\n  font-size: x-large;\r\n  color: white;\r\n  text-shadow:\r\n  -2px -2px 0 v.$dark-blue,\r\n  2px -2px 0 v.$dark-blue,\r\n  -2px 2px 0 v.$dark-blue,\r\n  2px 2px 0 v.$dark-blue;\r\n  border-bottom: 2px solid black;\r\n  border-right: 2px solid black;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  width: 200px;\r\n  text-align: center;\r\n}\r\n\r\n.timeline-spacer {\r\n  width: 29px;\r\n  background-color: v.$color-pale;\r\n  border-bottom: 2px solid black;\r\n}\r\n\r\n.timeline-header {\r\n  width: 60px;\r\n  border-bottom: 2px solid black;\r\n}\r\n\r\n.timeline-gradient {\r\n  -ms-user-select: none;\r\n  -webkit-user-select: none;\r\n  user-select:none;\r\n  text-align: center;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  background-color: v.$color-pale;\r\n  font-weight: 500;  \r\n  color: black;\r\n  \r\n  background-image:\r\n    linear-gradient(90deg,\r\n      rgba(73, 73, 73, 0.5) 0,\r\n      rgba(73, 73, 73, 0.5) 2px,\r\n      transparent 2%),\r\n    linear-gradient(90deg,\r\n      transparent 50%,\r\n      rgba(73, 73, 73, 0.5) 0,\r\n      rgba(73, 73, 73, 0.5) 2px,\r\n      transparent 54%);\r\n\r\n  background-size: 100% 10px;\r\n  background-position: 0px 100%;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.scripter-timeline-marker {\r\n  text-align: center;\r\n  color: white;\r\n  position: absolute;\r\n  height: 74px;\r\n  width: 74px;\r\n  vertical-align: middle;\r\n  line-height: 18px;\r\n  margin-top: 15px;\r\n  padding-top: 2px;\r\n  top: 0px;\r\n  z-index: 100;\r\n  background-color: v.$light-blue;\r\n  border: 2px solid black;\r\n  border-radius: 15%;\r\n  cursor: pointer;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./scripter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 124,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"script-title\">\r\n        <div class=\"script-name\">\r\n            <input matInput placeholder=\"Name\" [ngModel]=\"script.scriptName\" (ngModelChange)=\"script.scriptName=$event\" />\r\n        </div>\r\n        <div class=\"script-description\">\r\n            <input matInput placeholder=\"Description\" [ngModel]=\"script.description\" (ngModelChange)=\"script.description=$event\" />\r\n        </div>\r\n        <div class=\"button-box\">\r\n            <button (click)=\"saveScript()\">Save</button>\r\n            <button (click)=\"saveBeforeTest()\">Test</button>\r\n        </div>\r\n    </div>\r\n    <div id=\"scripter-container\" class=\"scripter-container\">\r\n        <div  class=\"scripter-body\">\r\n            <div class=\"scripter-header\">\r\n                <div class=\"scripter-module-header\" \r\n                (click)=\"openChannelAddModal()\"\r\n                (keypress)=\"openChannelAddModalKbd($event)\"\r\n                tabindex=\"0\">Add Channel</div>\r\n                <div class=\" timeline-spacer\"></div>\r\n                <div *ngFor=\"let item of timeLineArray;\" class=\"timeline-gradient timeline-header\">{{item.toFixed(1)}}</div>\r\n            </div>\r\n            <app-script-row *ngFor=\"let ch of scriptChannels\" id=\"timeline-{{ch.id}}\"\r\n                (timelineCallback)=\"timelineCallback($event)\"\r\n                (removeCallback)=\"removeCallback($event)\"\r\n                (channelTestCallback)=\"channelTestCallback($event)\"\r\n                [channel]=\"ch\"></app-script-row>\r\n        </div>\r\n\r\n\r\n\r\n        <!-- an hidden div is created to set the position of appearance of the menu-->\r\n        <div style=\"visibility: hidden; position: fixed;\" [style.left.px]=\"menuTopLeft.x\" [style.top.px]=\"menuTopLeft.y\"\r\n            [matMenuTriggerFor]=\"rightMenu\"></div>\r\n\r\n\r\n\r\n        <!-- standard material menu -->\r\n        <mat-menu #rightMenu=\"matMenu\">\r\n            <ng-template matMenuContent let-item=\"item\">\r\n                <button (click)=\"openNewEventModal(item)\" mat-menu-item>Add Event</button>\r\n            </ng-template>\r\n        </mat-menu>\r\n    </div>\r\n</div>\r\n\r\n<app-astros-modal id=\"scripter-modal\"  disableBackgroundClick=\"{{backgroundClickDisabled}}\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "ScriptRowComponent",
            "id": "component-ScriptRowComponent-32b18f3c39740d23e4f93526fdf57f23d231d0824c82a77955249356ae3d665deacb6cda9c0e1787b7d00c8a002c7d550c32bfe15f584a13eeeba72b80920b18",
            "file": "src/app/pages/scripter/script-row/script-row.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-script-row",
            "styleUrls": [
                "./script-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./script-row.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "ScriptChannel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "channelTestCallback",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeCallback",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter"
                },
                {
                    "name": "timelineCallback",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptChannel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "faEdit",
                    "defaultValue": "faEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faPlay",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "locationName",
                    "defaultValue": "'Location'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "segments",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "segmentWidth",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timeLineArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "timelineEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'timeline', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "uartType",
                    "defaultValue": "'None'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getLocationName",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTimelineRightClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serialName",
                    "args": [
                        {
                            "name": "type",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  EventEmitter,\n  Component,\n  Input,\n  Output,\n  Renderer2,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport { faTrash, faEdit, faPlay } from '@fortawesome/free-solid-svg-icons';\nimport {\n  UartType,\n  ScriptChannel,\n  AstrOsConstants,\n  ChannelType,\n} from 'astros-common';\nimport { NgIf } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { UartChannel } from 'astros-common/dist/control_module/uart/uart_channel';\n\n@Component({\n  selector: 'app-script-row',\n  templateUrl: './script-row.component.html',\n  styleUrls: ['./script-row.component.scss'],\n  imports: [NgIf, FontAwesomeModule],\n})\nexport class ScriptRowComponent {\n  private segmentWidth = 60;\n  faTrash = faTrash;\n  faEdit = faEdit;\n  faPlay = faPlay;\n\n  locationName = 'Location';\n  uartType = 'None';\n\n  @ViewChild('timeline', { static: false }) timelineEl!: ElementRef;\n\n  _channel!: ScriptChannel;\n\n  @Input()\n  set channel(channel: ScriptChannel) {\n    this._channel = channel;\n    this.locationName = this.getLocationName(channel.locationId);\n    if (channel.type === ChannelType.uart) {\n      const ch = channel.channel as UartChannel;\n      this.uartType = this.serialName(ch.uartType);\n    }\n  }\n  get channel(): ScriptChannel {\n    return this._channel;\n  }\n\n  @Output() timelineCallback = new EventEmitter<unknown>();\n  @Output() removeCallback = new EventEmitter<string>();\n  @Output() channelTestCallback = new EventEmitter<string>();\n\n  timeLineArray: number[];\n  private segments = 3000;\n\n  constructor(private renderer: Renderer2) {\n    this.timeLineArray = Array.from({ length: this.segments }, (_, i) => i + 1);\n  }\n\n  remove(): void {\n    this.removeCallback.emit(this.channel.id);\n  }\n\n  test(): void {\n    this.channelTestCallback.emit(this.channel.id);\n  }\n\n  onTimelineRightClick(event: MouseEvent): void {\n    event.preventDefault();\n\n    this.timelineCallback.emit({ event: event, id: this.channel.id });\n  }\n\n  getLocationName(id: string): string {\n    switch (id) {\n      case AstrOsConstants.BODY:\n        return 'Body';\n      case AstrOsConstants.CORE:\n        return 'Core';\n      case AstrOsConstants.DOME:\n        return 'Dome';\n      case 'AUDIO':\n        return 'Audio Playback';\n      default:\n        return 'Unknown';\n    }\n  }\n\n  serialName(type: UartType): string {\n    switch (type) {\n      case UartType.none:\n        return 'None';\n      case UartType.genericSerial:\n        return 'Generic Serial';\n      case UartType.kangaroo:\n        return 'Kangaroo X2';\n      case UartType.humanCyborgRelations:\n        return 'Human Cyborg Relations';\n      default:\n        return 'None';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles/variables' as v;\r\n\r\n.script-row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.module-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: -webkit-sticky;\r\n    position: sticky;\r\n    left: 0px;\r\n    background-color: v.$light-blue;\r\n    color: white;\r\n    border-bottom: 2px solid black;\r\n    border-right: 2px solid black;\r\n    height: 100px;\r\n    width: 200px;\r\n    text-align: center;\r\n    z-index: 200;\r\n\r\n\r\n    .title {\r\n        font-size: x-large;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        margin: 4px 8px;\r\n        padding: 0px 0px 4px 0px;\r\n    }\r\n\r\n    .spacer{\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .button-bar{\r\n        text-align: right;\r\n        padding: 0px 0px 4px 0px;\r\n        button {\r\n            font-size: large;\r\n            padding: 0;\r\n            margin: 0px 12px 0px 0px;\r\n            border: none;\r\n            background-color: transparent;\r\n            color: white;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n\r\n.timeline-container{\r\n    background-color: rgb(218, 218, 218);\r\n    border-right: 2px solid black;\r\n    border-bottom: 2px solid black;\r\n    display: flex;\r\n    flex-direction: row;\r\n    position: relative;\r\n    width: 180030px;\r\n\r\n    --ruler-unit: 1px;\r\n  /* Tall ticks */\r\n  --ruler-bdw: 2px;\r\n  --ruler-c:  rgb(109, 109, 109);\r\n  --ruler-h: 100px;\r\n  --ruler-space: 60;\r\n  background-image:\r\n  linear-gradient(90deg, var(--ruler-c) 0 var(--ruler-bdw), transparent 0);\r\n  background-repeat: repeat-x;\r\n  background-size:\r\n  calc(var(--ruler-unit) * var(--ruler-space)) var(--ruler-h);\r\n  background-position: -1px 0px;\r\n}\r\n\r\n.scripter-timeline-marker {\r\n    text-align: center;\r\n    color: white;\r\n    position: absolute;\r\n    height: 60px;\r\n    width: 60px;\r\n    vertical-align: middle;\r\n    line-height: 60px;\r\n    margin-top: 15px;\r\n    top: 0px;\r\n    z-index: 100;\r\n    background-color: rgb(43, 74, 133);\r\n    border: 2px solid black;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n  }\r\n\r\n",
                    "styleUrl": "./script-row.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "channel": {
                    "name": "channel",
                    "setSignature": {
                        "name": "channel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "channel",
                                "type": "ScriptChannel",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "channel",
                                "type": "ScriptChannel",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "channel",
                        "type": "",
                        "returnType": "ScriptChannel",
                        "line": 49
                    }
                }
            },
            "templateData": "<div class=\"script-row-container\">\r\n    <div class=\"module-container\">\r\n        <div class=\"title\" *ngIf=\"channel.type !== 1 && channel.type !== 4\">{{channel.channel.channelName}}</div>\r\n        <!--<div class=\"title\" *ngIf=\"channel.type === 1\">{{channel.channel.moduleName}}</div>-->\r\n        <div class=\"title\" *ngIf=\"channel.type === 4\">{{locationName}}</div>\r\n\r\n        <div *ngIf=\"channel.type !== 4\">{{locationName}}</div>\r\n        <div *ngIf=\"channel.type === 1\">{{uartType}}</div>\r\n        <div *ngIf=\"channel.type === 2 && channel.channel.id\"><span>I2C Channel: </span>{{channel.channel.id}} </div>\r\n        <div *ngIf=\"channel.type === 3 && channel.channel.id\"><span>Servo Channel: </span>{{channel.channel.id}} </div>\r\n        <div *ngIf=\"channel.type === 5 && channel.channel.id\"><span>GPIO: </span>{{channel.channel.id}}</div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"button-bar\">\r\n            <button title=\"Test\" (click)=\"test()\"><fa-icon [icon]=\"faPlay\"></fa-icon></button>\r\n            <button title=\"Remove\" (click)=\"remove()\"><fa-icon [icon]=\"faTrash\"></fa-icon></button>\r\n        </div>\r\n    </div>\r\n    <div id=\"script-row-{{channel.id}}\" class=\"timeline-container\" (contextmenu)=\"onTimelineRightClick($event)\"\r\n        #timeline>\r\n    </div>\r\n    <div>"
        },
        {
            "name": "ScriptsComponent",
            "id": "component-ScriptsComponent-3b69b6f06edb3c0ba7a6fbdc813ebead45fc1f42ab01bc77de5cf89c37b8b4f374b4dcb11bd31bd5620f8880f5c762ad42d2b68b03e52d9a0a8485a77db5a3b3",
            "file": "src/app/pages/scripts/scripts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scripts",
            "styleUrls": [
                "./scripts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scripts.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_scripts",
                    "defaultValue": "new Array<Script>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Script[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "faCopy",
                    "defaultValue": "faCopy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "faRun",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "faUpload",
                    "defaultValue": "faUpload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "initialStatusSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "locationMap",
                    "defaultValue": "new Map<number, string>([\n    [1, 'body'],\n    [2, 'core'],\n    [3, 'dome'],\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "scripts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Script[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "copyClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Script | undefined",
                    "typeParameters": [],
                    "line": 410,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUploadStatus",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUploadStatusClass",
                    "args": [
                        {
                            "name": "status",
                            "type": "UploadStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"notuploaded\" | \"uploading\" | \"uploaded\"",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "UploadStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUploadDate",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUploadingStatus",
                    "args": [
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusUpdate",
                    "args": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUploadStatusElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  AfterViewChecked,\n} from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';\nimport {\n  faCopy,\n  faPlay,\n  faTrash,\n  faUpload,\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  ScriptResponse,\n  TransmissionStatus,\n  TransmissionType,\n  UploadStatus,\n  Script,\n} from 'astros-common';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { NgFor } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport {\n  ModalComponent,\n  ConfirmModalComponent,\n  ConfirmModalResources,\n} from '@src/components/modals';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { ModalService } from '@src/services';\n\ninterface DeleteConfirmEvent {\n  id: string;\n  val: string;\n}\n\n@Component({\n  selector: 'app-scripts',\n  templateUrl: './scripts.component.html',\n  styleUrls: ['./scripts.component.scss'],\n  imports: [NgFor, RouterLink, FontAwesomeModule, ModalComponent],\n})\nexport class ScriptsComponent implements OnInit, AfterViewChecked {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  private initialStatusSet = false;\n\n  faTrash = faTrash;\n  faUpload = faUpload;\n  faRun = faPlay;\n  faCopy = faCopy;\n\n  _scripts: Script[] = new Array<Script>();\n\n  scripts: Script[];\n\n  locationMap = new Map<number, string>([\n    [1, 'body'],\n    [2, 'core'],\n    [3, 'dome'],\n  ]);\n\n  constructor(\n    private router: Router,\n    private scriptService: ScriptsService,\n    private socket: WebsocketService,\n    private snackBarService: SnackbarService,\n    private modalService: ModalService,\n  ) {\n    this.scripts = new Array<Script>();\n\n    this.socket.messages.subscribe((msg: unknown) => {\n      if (msg && typeof msg === 'object' && 'type' in msg)\n        if (msg.type === TransmissionType.script) {\n          this.statusUpdate(msg as ScriptResponse);\n        }\n    });\n  }\n\n  ngOnInit(): void {\n    const observer = {\n      next: (result: Script[]) => {\n        this.scripts = result.sort((a, b) => {\n          if (a.scriptName > b.scriptName) {\n            return 1;\n          }\n          if (a.scriptName < b.scriptName) {\n            return -1;\n          }\n          return 0;\n        });\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.scriptService.getAllScripts().subscribe(observer);\n  }\n\n  ngAfterViewChecked() {\n    if (this.initialStatusSet) {\n      return;\n    }\n    if (this.scripts.length === 0) {\n      return;\n    }\n\n    for (const script of this.scripts) {\n      this.updateUploadStatusElement('body', 1, script.id);\n      this.updateUploadStatusElement('core', 2, script.id);\n      this.updateUploadStatusElement('dome', 3, script.id);\n    }\n\n    this.initialStatusSet = true;\n  }\n\n  updateUploadStatusElement(\n    element: string,\n    locationId: number,\n    scriptId: string,\n  ): void {\n    const el = document.getElementById(`${scriptId}_${element}`);\n    if (el === null) {\n      return;\n    }\n    const status = this.getUploadStatus(scriptId, locationId);\n    el.classList.remove('uploaded');\n    el.classList.remove('notuploaded');\n    el.classList.remove('uploading');\n    el.classList.add(status.s);\n\n    const toolTip = document.getElementById(`${scriptId}_${element}_tooltip`);\n    if (toolTip === null) {\n      return;\n    }\n    toolTip.innerText = status.d;\n  }\n\n  setUploadingStatus(scriptId: string): void {\n    const script = this.getScript(scriptId);\n\n    if (!script) {\n      return;\n    }\n\n    for (const location of this.locationMap.entries()) {\n      if (\n        script.deploymentStatusKvp\n          .map((s) => {\n            return s.key;\n          })\n          .indexOf(location[0].toString()) > -1\n      ) {\n        const el = document.getElementById(`${scriptId}_${location[1]}`);\n        if (el === null) {\n          continue;\n        }\n        el.classList.remove('uploaded');\n        el.classList.remove('notuploaded');\n        el.classList.add('uploading');\n\n        const toolTip = document.getElementById(\n          `${scriptId}_${location}_tooltip`,\n        );\n        if (toolTip === null) {\n          continue;\n        }\n        toolTip.innerText = 'Uploading...';\n      }\n    }\n  }\n\n  newScript() {\n    this.router.navigate(['scripter', '0']);\n  }\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case ConfirmModalResources.confirmEvent: {\n        {\n          const evtData = evt.value as DeleteConfirmEvent;\n          if (evtData.id === 'script_delete') {\n            this.removeFile(evtData.val);\n          }\n          break;\n        }\n      }\n    }\n\n    this.modalService.close('scripts-modal');\n    this.container.clear();\n  }\n\n  removeClicked(id: string) {\n    this.container.clear();\n\n    const modalResources = new Map<string, unknown>();\n    modalResources.set(ConfirmModalResources.action, 'Delete');\n    modalResources.set(\n      ConfirmModalResources.message,\n      `Are you sure you want to delete script?`,\n    );\n    modalResources.set(ConfirmModalResources.confirmEvent, {\n      id: 'script_delete',\n      val: id,\n    });\n\n    const component = this.container.createComponent(ConfirmModalComponent);\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.modalService.open('scripts-modal');\n  }\n\n  removeFile(id: string) {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    this.scripts.splice(idx, 1);\n\n    this.scriptService.deleteScript(id).subscribe();\n  }\n\n  runClicked(id: string) {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    const observer = {\n      next: (result: unknown) => {\n        console.log(result);\n        this.snackBarService.okToast('Script run queued!');\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBarService.okToast('Error requesting upload. Check logs.');\n      },\n    };\n\n    this.scriptService.runScript(id).subscribe(observer);\n  }\n\n  copyClicked(id: string) {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    const observer = {\n      next: (result: Script) => {\n        if (result === undefined) {\n          this.snackBarService.okToast('Error copying script. Check logs.');\n        } else {\n          this.scripts.push(result);\n\n          this.scripts.sort((a, b) => {\n            if (a.scriptName > b.scriptName) {\n              return 1;\n            }\n            if (a.scriptName < b.scriptName) {\n              return -1;\n            }\n            return 0;\n          });\n        }\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBarService.okToast('Error copying script. Check logs.');\n      },\n    };\n\n    this.scriptService.copyScript(id).subscribe(observer);\n  }\n\n  uploadClicked(id: string) {\n    const observer = {\n      next: (result: unknown) => console.log(result),\n      error: (err: unknown) => {\n        console.error(err);\n        this.snackBarService.okToast('Error requesting upload. Check logs.');\n      },\n    };\n\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return;\n    }\n\n    this.scriptService.uploadScript(id).subscribe(observer);\n    this.setUploadingStatus(id);\n  }\n\n  statusUpdate(msg: ScriptResponse) {\n    if (msg.status === TransmissionStatus.success) {\n      this.setUploadDate(msg.scriptId, msg.locationId, msg.date);\n    }\n\n    this.updateUploadStatusElement(\n      this.locationMap.get(msg.locationId) as string,\n      msg.locationId,\n      msg.scriptId,\n    );\n  }\n\n  getUploadStatus(id: string, locationId: number): { s: string; d: string } {\n    let dateString = 'Not Uploaded';\n\n    const script = this.getScript(id);\n\n    if (!script) {\n      return { s: 'notuploaded', d: dateString };\n    }\n\n    const sidx = script.deploymentStatusKvp\n      .map((s) => {\n        return s.key;\n      })\n      .indexOf(locationId.toString());\n\n    if (sidx < 0) {\n      return { s: 'notuploaded', d: dateString };\n    }\n\n    const kvp = script.deploymentStatusKvp[sidx];\n    let uploadStatus = kvp.value.value;\n\n    if (kvp.value.date) {\n      const uploaddate = new Date(kvp.value.date);\n      const scriptdate = new Date(script.lastSaved);\n      if (uploaddate < scriptdate) {\n        uploadStatus = UploadStatus.notUploaded;\n        dateString = ' Out of date ';\n      } else {\n        dateString = uploaddate.toLocaleDateString(navigator.language, {\n          year: 'numeric',\n          month: 'numeric',\n          day: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric',\n        });\n      }\n    }\n\n    return { s: this.getUploadStatusClass(uploadStatus), d: dateString };\n  }\n\n  getUploadStatusClass(status: UploadStatus) {\n    switch (status) {\n      case UploadStatus.notUploaded:\n        return 'notuploaded';\n      case UploadStatus.uploading:\n        return 'uploading';\n      case UploadStatus.uploaded:\n        return 'uploaded';\n      default:\n        return 'notuploaded';\n    }\n  }\n\n  setUploadDate(id: string, controllerId: number, date: Date): void {\n    const script = this.getScript(id);\n\n    if (!script) {\n      return;\n    }\n\n    const sidx = script.deploymentStatusKvp\n      .map((s) => {\n        return s.key;\n      })\n      .indexOf(controllerId.toString());\n\n    if (sidx < 0) {\n      return;\n    }\n\n    script.deploymentStatusKvp[sidx].value.date = date;\n  }\n\n  getScript(id: string): Script | undefined {\n    const idx = this.scripts\n      .map((s) => {\n        return s.id;\n      })\n      .indexOf(id);\n\n    if (idx < 0) {\n      return undefined;\n    }\n\n    return this.scripts[idx];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../../../assets/styles/variables\" as v;\r\n\r\n.script-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n    .spacer {\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .script-body {\r\n\r\n        padding: 20px;\r\n        max-width: 1000px;\r\n        flex-grow: 20;\r\n\r\n        .button-bar {\r\n            display: flex;\r\n            flex-direction: row;\r\n            height: 54px;\r\n            line-height: 54px;\r\n\r\n            .title {\r\n                width: 200px;\r\n                font-size: xx-large;\r\n                font-family: v.$swfont;\r\n            }\r\n\r\n\r\n            .button-box {\r\n                float: right;\r\n\r\n                button {\r\n                    font-size: x-large;\r\n                    font-family: v.$swfont;\r\n                    background-color: v.$dark-blue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.script-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n\r\n    .script-line {\r\n        display: flex;\r\n        height: 40px;\r\n        line-height: 40px;\r\n        flex-direction: row;\r\n        border-bottom: solid 2px black;\r\n    }\r\n\r\n    .click-bar {\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .name-section {\r\n        font-size: large;\r\n        flex-basis: 240px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    .desc-section {\r\n        flex-grow: 1;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    .upload-section {\r\n        text-align: center;\r\n        width: 60px;\r\n        height: 24px;\r\n        line-height: 24px;\r\n        border: solid 1px black;\r\n        margin: 4px;\r\n    }\r\n\r\n    .uploaded {\r\n        background-color: green;\r\n        color: white;\r\n    }\r\n\r\n    .uploading {\r\n        background-color: goldenrod;\r\n        color: black;\r\n    }\r\n\r\n    .notuploaded {\r\n        background-color: maroon;\r\n        color: white;\r\n    }\r\n\r\n    .button-container {\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin-left: 12px;\r\n        \r\n        button {\r\n            font-size: large;\r\n            padding: 0;\r\n            margin: 0px 12px 0px 4px;\r\n            border: none;\r\n            background-color: transparent;\r\n            color: black;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n    border-bottom: 1px dotted black;\r\n}\r\n\r\n.tooltip .tooltiptext {\r\n    visibility: hidden;\r\n    width: 120px;\r\n    background-color: black;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 6px;\r\n    padding: 5px 0;\r\n\r\n    /* Position the tooltip */\r\n    position: absolute;\r\n    z-index: 1;\r\n}\r\n\r\n.tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n}",
                    "styleUrl": "./scripts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"script-container\">\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"script-body\">\r\n        <div class=\"button-bar\">\r\n            <div class=\"title\">\r\n                Scripts\r\n            </div>\r\n            <div class=\"spacer\"></div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"newScript()\" class=\"new-script\">New</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"script-list-container\">\r\n            <ul class=\"script-list\">\r\n                <li *ngFor=\"let script of scripts\">\r\n                    <div class=\"script-line\">\r\n                        <div class=\"click-bar\" routerLink=\"/scripter/{{script.id}}\">\r\n                            <div class=\"name-section\">{{script.scriptName}}</div>\r\n                            <div class=\"desc-section\">{{script.description}}</div>\r\n                        </div>\r\n                        <div [attr.id]=\"script.id + '_body'\"\r\n                            class=\"upload-section tooltip\">Body <span class=\"tooltiptext\" [attr.id]=\"script.id + '_body_tooltip'\"></span></div>\r\n                        <div [attr.id]=\"script.id + '_core'\"\r\n                            class=\"upload-section tooltip\">Core <span class=\"tooltiptext\" [attr.id]=\"script.id + '_core_tooltip'\"></span></div>\r\n                        <div [attr.id]=\"script.id + '_dome'\"\r\n                            class=\"upload-section tooltip\">Dome <span class=\"tooltiptext\" [attr.id]=\"script.id + '_dome_tooltip'\"></span></div>\r\n                        <div class=\"button-container\">\r\n                            <div class=\"copy\">\r\n                                <button title=\"Copy\" (click)=\"copyClicked(script.id)\"><fa-icon [icon]=\"faCopy\"></fa-icon></button>\r\n                            </div>\r\n                            <div class=\"upload\">\r\n                                <button title=\"Upload\" (click)=\"uploadClicked(script.id)\"><fa-icon [icon]=\"faUpload\"></fa-icon></button>\r\n                            </div>\r\n                            <div class=\"run\">\r\n                                <button title=\"Run\" (click)=\"runClicked(script.id)\"><fa-icon [icon]=\"faRun\"></fa-icon></button>\r\n                            </div>\r\n                            <div class=\"trash\">\r\n                                <button title=\"Delete\" (click)=\"removeClicked(script.id)\"><fa-icon [icon]=\"faTrash\"></fa-icon></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n</div>\r\n\r\n<app-astros-modal id=\"scripts-modal\" disableBackgroundClick=\"0\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "ScriptTestModalComponent",
            "id": "component-ScriptTestModalComponent-ee5d5106f5a72e27d964d7484465be88aa5569b43d7b4859d088d03053a68e282a9cb1cb5ac4890d581a8eee78536d4d16f830a1275132bdecc03cadb1978ae1",
            "file": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-script-test-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./script-test-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./script-test-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "bodyCaption",
                    "defaultValue": "{ str: 'Uploading' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "bodyUpload",
                    "defaultValue": "TransmissionStatus.sending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransmissionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "coreCaption",
                    "defaultValue": "{ str: 'Uploading' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "coreUpload",
                    "defaultValue": "TransmissionStatus.sending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransmissionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "domeCaption",
                    "defaultValue": "{ str: 'Uploading' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "domeUpload",
                    "defaultValue": "TransmissionStatus.sending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransmissionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "runDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "scriptId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "uploadInProgress",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCaption",
                    "args": [
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "TransmissionStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "TransmissionStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInitialUploadStatus",
                    "args": [
                        {
                            "name": "hasBody",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasCore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasDome",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hasBody",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasCore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasDome",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusUpdate",
                    "args": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  ScriptResponse,\n  TransmissionStatus,\n  TransmissionType,\n} from 'astros-common';\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\n\ninterface Caption {\n  str: string;\n}\n\nexport class ScriptTestModalResources {\n  public static scriptId = 'scriptId';\n  public static locations = 'locations';\n}\n\n@Component({\n  selector: 'app-script-test-modal',\n  templateUrl: './script-test-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './script-test-modal.component.scss',\n  ],\n  standalone: true,\n})\nexport class ScriptTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uploadInProgress = true;\n  runDisabled = true;\n\n  coreUpload: TransmissionStatus = TransmissionStatus.sending;\n  domeUpload: TransmissionStatus = TransmissionStatus.sending;\n  bodyUpload: TransmissionStatus = TransmissionStatus.sending;\n\n  coreCaption: Caption = { str: 'Uploading' };\n  domeCaption: Caption = { str: 'Uploading' };\n  bodyCaption: Caption = { str: 'Uploading' };\n\n  status: string;\n\n  scriptId = '';\n\n  constructor(\n    private socket: WebsocketService,\n    private scriptService: ScriptsService,\n  ) {\n    super();\n    this.status = 'Uploading script...';\n\n    this.socket.messages.subscribe((msg: unknown) => {\n      if (msg && typeof msg === 'object' && 'type' in msg) {\n        if (msg.type === TransmissionType.script) {\n          this.statusUpdate(msg as ScriptResponse);\n        }\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.scriptId = this.resources.get(\n      ScriptTestModalResources.scriptId,\n    ) as string;\n    const locations = this.resources.get(\n      ScriptTestModalResources.locations,\n    ) as number[];\n\n    let hasBody = false;\n    let hasCore = false;\n    let hasDome = false;\n\n    locations.forEach((location: number) => {\n      switch (location) {\n        case 1:\n          hasBody = true;\n          break;\n        case 2:\n          hasCore = true;\n          break;\n        case 3:\n          hasDome = true;\n          break;\n      }\n    });\n\n    this.setInitialUploadStatus(hasBody, hasCore, hasDome);\n\n    const observer = {\n      next: (result: unknown) => console.log(result),\n      error: (err: unknown) => {\n        console.error(err);\n        this.status = 'Error requesting Script Upload';\n        this.coreUpload = TransmissionStatus.failed;\n        this.coreCaption.str = 'Failed';\n        this.domeUpload = TransmissionStatus.failed;\n        this.domeCaption.str = 'Failed';\n        this.bodyUpload = TransmissionStatus.failed;\n        this.bodyCaption.str = 'Failed';\n      },\n    };\n\n    if (this.scriptId != '') {\n      this.scriptService.uploadScript(this.scriptId).subscribe(observer);\n    } else {\n      this.status = 'Script ID missing, close dialog to continue.';\n    }\n  }\n\n  runClicked() {\n    console.log(`Running script: ${this.scriptId}`);\n    this.scriptService.runScript(this.scriptId).subscribe();\n    this.closeModal();\n  }\n\n  setInitialUploadStatus(hasBody: boolean, hasCore: boolean, hasDome: boolean) {\n    if (hasBody) {\n      this.bodyUpload = TransmissionStatus.sending;\n      this.bodyCaption.str = 'Uploading';\n    } else {\n      this.bodyUpload = TransmissionStatus.success;\n      this.bodyCaption.str = 'Not Assigned';\n    }\n\n    if (hasCore) {\n      this.coreUpload = TransmissionStatus.sending;\n      this.coreCaption.str = 'Uploading';\n    } else {\n      this.coreUpload = TransmissionStatus.success;\n      this.coreCaption.str = 'Not Assigned';\n    }\n\n    if (hasDome) {\n      this.domeUpload = TransmissionStatus.sending;\n      this.domeCaption.str = 'Uploading';\n    } else {\n      this.domeUpload = TransmissionStatus.success;\n      this.domeCaption.str = 'Not Assigned';\n    }\n  }\n\n  statusUpdate(msg: ScriptResponse) {\n    switch (msg.locationId) {\n      case 1:\n        this.bodyUpload = msg.status;\n        this.setCaption(this.bodyCaption, msg.status);\n        break;\n      case 2:\n        this.coreUpload = msg.status;\n        this.setCaption(this.coreCaption, msg.status);\n        break;\n      case 3:\n        this.domeUpload = msg.status;\n        this.setCaption(this.domeCaption, msg.status);\n        break;\n    }\n\n    if (this.coreUpload > 1 && this.domeUpload > 1 && this.bodyUpload > 1) {\n      this.status = 'Upload Complete.';\n      this.uploadInProgress = false;\n      if (this.coreUpload + this.domeUpload + this.bodyUpload >= 6) {\n        this.runDisabled = false;\n      }\n    }\n  }\n\n  setCaption(caption: Caption, status: TransmissionStatus) {\n    switch (status) {\n      case TransmissionStatus.success:\n        caption.str = 'Success';\n        break;\n      case TransmissionStatus.failed:\n        caption.str = 'Failed';\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./script-test-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Script Test</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <span>{{status}}</span>\r\n            <div>\r\n                <span>Body: {{bodyCaption.str}}</span>\r\n            </div>\r\n            <div>\r\n                <span>Core: {{coreCaption.str}}</span>\r\n            </div>\r\n            <div>\r\n                <span>Dome: {{domeCaption.str}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"runClicked();\" [disabled]=\"runDisabled ? 'disabled' : null\">Run</button>\r\n            <button (click)=\"closeModal();\">Cancel</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ServoEventModalComponent",
            "id": "component-ServoEventModalComponent-4428d0a9b0281f8862600ea1283f2e75c2b2d38233116c514c4d57996c2bf5a0e362d9a8755c51218131c7de594d8ef1805a3155d4bdccc4ccdfefc55821753c",
            "file": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-servo-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./servo-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./servo-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "acceleration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ServoEventModalResources {\n  public static servoId = 'servoId';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-servo-event-modal',\n  templateUrl: './servo-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './servo-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class ServoEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  channelId!: number;\n  speed: number;\n  position: number;\n  acceleration: number;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.speed = 1;\n    this.position = 0;\n    this.acceleration = 0;\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.scriptEvent = this.resources.get(\n      ServoEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    this.channelId = this.resources.get(\n      ServoEventModalResources.servoId,\n    ) as number;\n\n    if (this.scriptEvent.dataJson != '') {\n      console.log(this.scriptEvent.dataJson);\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.channelId = payload.channelId;\n      this.position = payload.position;\n      this.speed = payload.speed;\n      this.acceleration = payload.acceleration;\n    }\n\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\n\n    //const data = new ServoEvent(+this.channelId, +this.position, +this.speed, +this.acceleration);\n    //this.scriptEvent.dataJson = JSON.stringify(data);\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime * this.timeFactor,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./servo-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Servo Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Position (0 to 100%)</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"position\" type=\"number\" min=\"0\" max=\"100\"\r\n                (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\" \r\n                (change)= \"position < 0 ? position = 0 : position; position > 100 ? position = 100 : position;\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Speed (0 to 255, 0 is unlimited)</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"speed\" type=\"number\" min=\"0\" max=\"255\"\r\n                (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\" \r\n                (change)= \"speed < 0 ? speed = 0 : speed; speed > 255 ? speed = 255 : speed;\"/>\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Accel. (0 to 255, 0 is unlimited)</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"acceleration\" type=\"number\" min=\"0\" max=\"255\"\r\n                (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\" \r\n                (change)= \"acceleration < 0 ? acceleration = 0 : acceleration; acceleration > 255 ? acceleration = 255 : acceleration;\"/>\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ServoSettingsComponent",
            "id": "component-ServoSettingsComponent-a0fb53e4ef865b3dc7ebe0d395893b926115c30c8aee54719b5a668a9ace5c830ef928234d79f8901125fdbc6bd163636d9345559200e3bc3a4fda2eb893bb03",
            "file": "src/app/components/esp-module/shared/servo-settings/servo-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-servo-settings",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./servo-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "enabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "homePosition",
                    "defaultValue": "1500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "invert",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isServo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxPulse",
                    "defaultValue": "2500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minPulse",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "typeLabel",
                    "defaultValue": "\"Default High\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgIf } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\n\r\n@Component({\r\n  selector: 'app-servo-settings',\r\n  imports: [\r\n    MatCheckboxModule,\r\n    FormsModule,\r\n    NgIf\r\n  ],\r\n  templateUrl: './servo-settings.component.html',\r\n  styleUrl: './servo-settings.component.scss'\r\n})\r\nexport class ServoSettingsComponent\r\n  implements OnChanges {\r\n\r\n    @Input()\r\n    enabled: boolean = false;\r\n\r\n    @Input()\r\n    name: string = '';\r\n\r\n    @Input()\r\n    invert: boolean = false;\r\n\r\n    @Input()\r\n    isServo: boolean = false;\r\n\r\n    @Input()\r\n    minPulse: number = 500;\r\n\r\n    @Input()\r\n    maxPulse: number = 2500;\r\n\r\n    @Input()\r\n    homePosition: number = 1500;\r\n\r\n    typeLabel: string = \"Default High\"\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n      this.typeLabel = this.isServo ? \"Inverted\" : \"Default High\"\r\n    }\r\n}\r\n",
            "styleUrl": "./servo-settings.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"enabled\" class=\"servo-channel\">\r\n    <div class=\"servo-channel-row\">\r\n        <div class=\"name\">\r\n            <input matInput placeholder=\"Name\" [(ngModel)]=\"name\" />\r\n        </div>\r\n        <div class=\"type\">\r\n            <mat-checkbox [(ngModel)]=\"invert\" labelPosition=\"before\">{{typeLabel}}</mat-checkbox>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"isServo\" class=\"servo-channel-row\">\r\n        <div class=\"ms-value\">\r\n            <div class=\"label-ms\">Min μS</div>\r\n            <div class=\"limit\">\r\n                <input matInput placeholder=\"500\" [(ngModel)]=\"minPulse\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"ms-value\">\r\n            <div class=\"label-ms\">Max μS</div>\r\n            <div class=\"limit\">\r\n                <input matInput placeholder=\"2500\" [(ngModel)]=\"maxPulse\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"ms-value\">\r\n            <div class=\"label-ms\">Home μS</div>\r\n            <div class=\"limit\">\r\n                <input matInput placeholder=\"500\" [(ngModel)]=\"homePosition\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ServoTestModalComponent",
            "id": "component-ServoTestModalComponent-9a46aba5031cdfe8c123b8cccf337ecf082c55bda3da868f8a5eba5d5201a269e8ae01650fe80488960172a574257aac2d2dcf9909ee966bf6b607a284008eb3",
            "file": "src/app/components/modals/modules/servo-test-modal/servo-test-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-servo-test-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./servo-test-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "controllerId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "disableSlider",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "servoId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "value",
                    "defaultValue": "1500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "enableTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSliderChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatSlider"
                },
                {
                    "name": "MatSliderThumb"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseEventModalComponent } from '../../scripting/base-event-modal/base-event-modal.component';\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\nimport { FormsModule } from '@angular/forms';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class ServoTestModalResources {\n  public static servoId = 'servoId';\n  public static controllerId = 'controllerId';\n  public static sendServoMove = 'servoTest_servoMove';\n  public static closeEvent = 'servoTest_closeEvent';\n}\n\nexport interface ServoTestMessage {\n  controllerId: number;\n  servoId: number;\n  value: number;\n}\n\n@Component({\n  selector: 'app-servo-test-modal',\n  templateUrl: './servo-test-modal.component.html',\n  styleUrl: './servo-test-modal.component.scss',\n  imports: [MatSlider, MatSliderThumb, FormsModule],\n})\nexport class ServoTestModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  servoId = 0;\n  controllerId = 0;\n  disableSlider = true;\n  value = 1500;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.servoId = this.resources.get(\n      ServoTestModalResources.servoId,\n    ) as number;\n    this.controllerId = this.resources.get(\n      ServoTestModalResources.controllerId,\n    ) as number;\n  }\n\n  onSliderChange(_: unknown) {\n    const evt = new ModalCallbackEvent(ServoTestModalResources.sendServoMove, {\n      controllerId: this.controllerId,\n      servoId: this.servoId,\n      value: this.value,\n    });\n    this.modalCallback.emit(evt);\n  }\n\n  enableTest() {\n    this.disableSlider = false;\n  }\n\n  override closeModal(): void {\n    const evt = new ModalCallbackEvent(\n      ServoTestModalResources.closeEvent,\n      null,\n    );\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "styleUrl": "./servo-test-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"servo-test-modal\">\r\n    <div class=\"modal-body\">\r\n        <div class=\"label\">Servo {{servoId}} Test</div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"label\">{{slider.value}}</div>\r\n        <mat-slider \r\n            min=\"500\" \r\n            max=\"2500\" \r\n            default=\"1500\"\r\n            step=\"1\"\r\n            [disabled]=\"disableSlider\"   \r\n        >\r\n            <input matSliderThumb (input)=\"onSliderChange($event)\" [(ngModel)]=\"value\" #slider>\r\n        </mat-slider>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>        \r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"enableTest();\">Enable Test</button>\r\n        </div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-2d4a238526568ee83422ae4420b432b84ddc0fd0a00e414b598ac2740285e8d8a19e4f210e736e76da71c65fc1f5507db254d971a2aa3e494289433d2b012b20",
            "file": "src/app/pages/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [
                "./settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "characters",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "controllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "formatSD",
                    "args": [
                        {
                            "name": "val",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popModal",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { KeyValue } from '@angular/common';\nimport {\n  Component,\n  ComponentRef,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ModalComponent } from '@src/components/modals';\nimport {\n  FormatModalComponent,\n  FormatModalResources,\n} from '@src/components/modals/utility';\nimport { ModalCallbackEvent } from '../../components/modals/modal-base/modal-callback-event';\nimport { ModalService, SettingsService, SnackbarService } from '@src/services';\nimport { ControlModule } from 'astros-common';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n  imports: [ModalComponent],\n})\nexport class SettingsComponent implements OnInit {\n  @ViewChild('modalContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  apiKey = '';\n  private characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  private controllers: ControlModule[] = [];\n\n  constructor(\n    private settingsService: SettingsService,\n    private snackBarService: SnackbarService,\n    private modalService: ModalService,\n  ) {}\n\n  ngOnInit(): void {\n    const apiObs = {\n      next: (result: KeyValue<string, string>) => {\n        this.apiKey = result.value;\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.settingsService.getSetting('apikey').subscribe(apiObs);\n\n    const ctrlObs = {\n      next: (result: ControlModule[]) => {\n        this.controllers = result;\n      },\n      error: (err: unknown) => console.error(err),\n    };\n\n    this.settingsService.getControllers().subscribe(ctrlObs);\n  }\n\n  generateApiKey() {\n    let result = '';\n    const charactersLength = this.characters.length;\n    for (let i = 0; i < 10; i++) {\n      result += this.characters.charAt(\n        Math.floor(Math.random() * charactersLength),\n      );\n    }\n\n    this.apiKey = result;\n\n    const observer = {\n      next: (_: unknown) => {\n        console.log('API key saved');\n      },\n      error: (err: unknown) => {\n        console.error(err);\n        this.apiKey = 'Failed to save API key';\n      },\n    };\n\n    this.settingsService\n      .saveSetting({ key: 'apikey', value: result })\n      .subscribe(observer);\n  }\n\n  modalCallback(evt: ModalCallbackEvent) {\n    switch (evt.type) {\n      case FormatModalResources.formatSdEvent:\n        this.formatSD(evt.value as unknown[]);\n        break;\n    }\n\n    this.modalService.close('scripts-modal');\n    this.container.clear();\n  }\n\n  popModal(val: string) {\n    this.container.clear();\n    const modalResources = new Map<string, unknown>();\n\n    let component: ComponentRef<FormatModalComponent>;\n\n    switch (val) {\n      case 'format':\n        modalResources.set(FormatModalResources.controllers, this.controllers);\n        component = this.container.createComponent(FormatModalComponent);\n        break;\n      default:\n        return;\n    }\n\n    component.instance.resources = modalResources;\n    component.instance.modalCallback.subscribe((evt: ModalCallbackEvent) => {\n      this.modalCallback(evt);\n    });\n\n    this.modalService.open('scripts-modal');\n  }\n\n  formatSD(val: unknown[]) {\n    const observer = {\n      next: (_: unknown) => {\n        this.snackBarService.okToast('Format queued!');\n      },\n      error: (err: unknown) => {\n        this.snackBarService.okToast('Error requesting format. Check logs.');\n        console.error(err);\n      },\n    };\n\n    this.settingsService.formatSD(val).subscribe(observer);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"../../../assets/styles/variables\";\r\n\r\n.container {\r\n        max-width: 800px;\r\n        margin: 0 auto;\r\n \r\n        .setting-row {\r\n\r\n            display: flex;\r\n            flex-direction: row;\r\n            flex-wrap: wrap;\r\n            border-bottom: 2px solid black;\r\n            margin: 20px;\r\n            .key {\r\n                font-size: x-large;\r\n                width: 180px;\r\n                margin: 10px;\r\n\r\n                border-right: 2px solid black;\r\n            }\r\n    \r\n            .value {\r\n                flex-grow: 1;\r\n                \r\n                .properties {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    flex-wrap: nowrap;\r\n\r\n                    .text {\r\n                        flex-grow: 1;\r\n                        font-size: x-large;\r\n                        margin: 10px;\r\n                    }\r\n\r\n                    .button{\r\n                        float: right;\r\n                        \r\n                        button {\r\n                            width: 140px;\r\n                            padding: 3px 20px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n}",
                    "styleUrl": "./settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"setting-row\">\r\n        <div class=\"key\">\r\n            API Key\r\n        </div>\r\n        <div class=\"value\">\r\n            <div class=\"properties\">\r\n                <div class=\"text\">{{apiKey}}</div>\r\n                <div class=\"button\">\r\n                    <button (click)=\"generateApiKey()\">Generate</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"setting-row\">\r\n        <div class=\"key\">\r\n            Format SD Card\r\n        </div>\r\n        <div class=\"value\"><div class=\"properties\">\r\n            <div class=\"text\"></div>\r\n            <div class=\"button\">\r\n                <button (click)=\"popModal('format')\">Format</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<app-astros-modal id=\"scripts-modal\" disableBackgroundClick=\"0\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-63ae997a8abfbbddede28b4e85aeda22887171d4ddc011b0ab89a1b253c801a4f15132ae5038574275195dc2582bac700f4a61b69305a0d88344788e6c101234",
            "file": "src/app/pages/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status",
            "styleUrls": [
                "./status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyDownEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'bodyDown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "bodyNotSyncedEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'bodyNotSynced', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreDownEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'coreDown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreNotSyncedEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'coreNotSynced', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "domeDownEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'domeDown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "domeNotSyncedEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'domeNotSynced', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "syncEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "downEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "syncEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "downEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { ControllerStatus } from 'astros-common';\nimport { StatusService } from 'src/app/services/status/status.service';\n\n@Component({\n  selector: 'app-status',\n  templateUrl: './status.component.html',\n  styleUrls: ['./status.component.scss'],\n  standalone: true,\n})\nexport class StatusComponent implements AfterViewInit {\n  @ViewChild('coreDown', { static: false }) coreDownEl!: ElementRef;\n  @ViewChild('domeDown', { static: false }) domeDownEl!: ElementRef;\n  @ViewChild('bodyDown', { static: false }) bodyDownEl!: ElementRef;\n\n  @ViewChild('coreNotSynced', { static: false }) coreNotSyncedEl!: ElementRef;\n  @ViewChild('domeNotSynced', { static: false }) domeNotSyncedEl!: ElementRef;\n  @ViewChild('bodyNotSynced', { static: false }) bodyNotSyncedEl!: ElementRef;\n\n  constructor(\n    private renderer: Renderer2,\n    private status: StatusService,\n  ) {\n    this.status.coreStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.coreNotSyncedEl, this.coreDownEl),\n    );\n    this.status.domeStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.domeNotSyncedEl, this.domeDownEl),\n    );\n    this.status.bodyStateObserver.subscribe((value) =>\n      this.handleStatus(value, this.bodyNotSyncedEl, this.bodyDownEl),\n    );\n  }\n\n  ngAfterViewInit(): void {\n    this.handleStatus(\n      this.status.getCoreStatus(),\n      this.coreNotSyncedEl,\n      this.coreDownEl,\n    );\n    this.handleStatus(\n      this.status.getDomeStatus(),\n      this.domeNotSyncedEl,\n      this.domeDownEl,\n    );\n    this.handleStatus(\n      this.status.getBodyStatus(),\n      this.bodyNotSyncedEl,\n      this.bodyDownEl,\n    );\n  }\n\n  handleStatus(\n    status: ControllerStatus,\n    syncEl: ElementRef,\n    downEl: ElementRef,\n  ) {\n    switch (status) {\n      case ControllerStatus.up:\n        this.renderer.setStyle(syncEl.nativeElement, 'visibility', 'hidden');\n        this.renderer.setStyle(downEl.nativeElement, 'visibility', 'hidden');\n        break;\n      case ControllerStatus.needsSynced:\n        this.renderer.setStyle(syncEl.nativeElement, 'visibility', 'visible');\n        this.renderer.setStyle(downEl.nativeElement, 'visibility', 'hidden');\n        break;\n      case ControllerStatus.down:\n        this.renderer.setStyle(syncEl.nativeElement, 'visibility', 'hidden');\n        this.renderer.setStyle(downEl.nativeElement, 'visibility', 'visible');\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".img-container {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n\r\nimg {\r\n    max-width: 300px;\r\n\r\n}\r\n\r\n.bottom {\r\n    position: absolute;\r\n    z-index: 0;\r\n}\r\n\r\n.middle {\r\n    position: absolute;\r\n    z-index: 1;\r\n}\r\n\r\n.top {\r\n    position: absolute;\r\n    z-index: 2;\r\n}\r\n\r\n.hidden {\r\n    visibility: hidden;\r\n}\r\n\r\n.blink {\r\n    animation: blink 1s;\r\n    animation-iteration-count: infinite;\r\n}\r\n\r\n@keyframes blink {\r\n    0% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 480px){\r\n    img {\r\n        max-width: 60%;\r\n    }\r\n}",
                    "styleUrl": "./status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"img-container\">\r\n\r\n    <img class=\"bottom\" src=\"../../../assets/img/r2.png\" alt=\"Astromech\">\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/core.png\" alt=\"Astromech Core Down\" #coreDown>\r\n    <img class=\"middle blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/core_yellow.png\" alt=\"Astromech Core Not Synced\" #coreNotSynced>\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/dome.png\" alt=\"Astromech Dome Down\" #domeDown>\r\n    <img class=\"middle blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/dome_yellow.png\" alt=\"Astromech Dome Not Synced\" #domeNotSynced>\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/body.png\" alt=\"Astromech Body Down\" #bodyDown>\r\n    <img class=\"middle blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/body_yellow.png\" alt=\"Astromech Body Not Synced\" #bodyNotSynced>\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/legs.png\" alt=\"Astromech Leg\" #legs>\r\n\r\n</div>"
        },
        {
            "name": "UartEventModalComponent",
            "id": "component-UartEventModalComponent-4b8a74ebea820765ae9176d70e8a063aeabff14683010dea209acb008dc37440cd96a3e627a6859702bff80573a8f82ae12183203dd576b9e7c488163b742610",
            "file": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-uart-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./uart-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./uart-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "eventValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GenericSerialEvent, ScriptEvent } from 'astros-common';\nimport {\n  BaseEventModalComponent,\n  ScriptEventModalResources,\n} from '../base-event-modal/base-event-modal.component';\nimport { FormsModule } from '@angular/forms';\nimport { DecimalPipe } from '@angular/common';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\n\nexport class UartEventModalResources {\n  public static channelId = 'channelId';\n  public static baudRate = 'baudRate';\n  public static scriptEvent = 'scriptEvent';\n}\n\n@Component({\n  selector: 'app-uart-event-modal',\n  templateUrl: './uart-event-modal.component.html',\n  styleUrls: [\n    '../base-event-modal/base-event-modal.component.scss',\n    './uart-event-modal.component.scss',\n  ],\n  imports: [FormsModule, DecimalPipe],\n})\nexport class UartEventModalComponent\n  extends BaseEventModalComponent\n  implements OnInit\n{\n  uartChannel!: number;\n  baudRate!: number;\n  eventValue: string;\n\n  constructor() {\n    super();\n    this.originalEventTime = 0;\n    this.eventTime = 0;\n    this.eventValue = '';\n    this.errorMessage = '';\n    this.callbackType = ScriptEventModalResources.addEvent;\n  }\n\n  ngOnInit(): void {\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\n      this.callbackType = this.resources.get(\n        ScriptEventModalResources.callbackType,\n      ) as string;\n    }\n\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\n      const element = document.getElementById('remove_button');\n      element?.classList.remove('hidden');\n    }\n\n    this.uartChannel = this.resources.get(\n      UartEventModalResources.channelId,\n    ) as number;\n    this.baudRate = this.resources.get(\n      UartEventModalResources.baudRate,\n    ) as number;\n\n    this.scriptEvent = this.resources.get(\n      UartEventModalResources.scriptEvent,\n    ) as ScriptEvent;\n\n    if (this.scriptEvent.dataJson != '') {\n      const payload = JSON.parse(this.scriptEvent.dataJson);\n      this.eventValue = payload.value;\n    }\n\n    this.originalEventTime = this.scriptEvent.time;\n    this.eventTime = this.scriptEvent.time;\n  }\n\n  addEvent() {\n    if (+this.eventTime > this.maxTime) {\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime}`;\n      return;\n    }\n\n    this.scriptEvent.time = +this.eventTime;\n    this.scriptEvent.dataJson = JSON.stringify(\n      new GenericSerialEvent(this.uartChannel, this.baudRate, this.eventValue),\n    );\n\n    const evt = new ModalCallbackEvent(this.callbackType, {\n      scriptEvent: this.scriptEvent,\n      time: this.originalEventTime,\n    });\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./uart-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Serial Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\"\r\n                    ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" [ngModel]=\"eventTime | number : '1.0-1'\"\r\n                    (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Serial Command</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"eventValue\" />\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "UartModuleComponent",
            "id": "component-UartModuleComponent-6c2f59e4eea967b75963e9282c00690ef67ecc31a8087574e42bbc5380c6d758cf1c115cb6d8cfccf6bb1483727cf3a2d23ee7dfbcdee3a6b583965594271f99",
            "file": "src/app/components/esp-module/uart/uart-module/uart-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-uart-module",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./uart-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "UartModule",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "removeModuleEvent",
                    "defaultValue": "new EventEmitter<RemoveModuleEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "removeIcon",
                    "defaultValue": "faTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "subtypeName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "uartContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'uartContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "nameClicked",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeModule",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                },
                {
                    "name": "MatExpansionPanelDescription"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from '@angular/material/expansion';\nimport { ModuleType, UartModule, UartType } from 'astros-common';\nimport { GenericSerialModuleComponent } from '../uart-submodules/generic-serial-module/generic-serial-module.component';\nimport { KangarooModuleComponent } from '../uart-submodules/kangaroo-module/kangaroo-module.component';\nimport { MaestroModuleComponent } from '../uart-submodules/maestro-module/maestro-module.component';\nimport { FormsModule } from '@angular/forms';\nimport { BaseUartSubModuleComponent } from '../uart-submodules/base-uart-sub-module/base-uart-sub-module.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { RemoveModuleEvent } from '../../utility/module-events';\n\n@Component({\n  selector: 'app-uart-module',\n  templateUrl: './uart-module.component.html',\n  styleUrl: './uart-module.component.scss',\n  imports: [\n    MatExpansionPanel,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    FormsModule,\n    FontAwesomeModule,\n  ],\n})\nexport class UartModuleComponent implements AfterViewInit, AfterContentInit {\n  @ViewChild('uartContainer', { read: ViewContainerRef })\n  uartContainer!: ViewContainerRef;\n\n  @Input()\n  isMaster = false;\n\n  @Input()\n  module!: UartModule;\n\n  @Output()\n  removeModuleEvent = new EventEmitter<RemoveModuleEvent>();\n\n  subtypeName = '';\n  removeIcon = faTimes;\n  component!: ComponentRef<unknown>;\n\n  nameClicked(evt: MouseEvent) {\n    evt.stopPropagation();\n  }\n\n  ngAfterViewInit(): void {\n    this.setModule();\n  }\n\n  ngAfterContentInit(): void {\n    switch (this.module.uartType) {\n      case UartType.genericSerial:\n        this.subtypeName = 'Generic Serial';\n        break;\n      case UartType.kangaroo:\n        this.subtypeName = 'Kangaroo X2';\n        break;\n      case UartType.maestro:\n        this.subtypeName = 'Pololu Maestro';\n        break;\n      default:\n        break;\n    }\n  }\n\n  setModule() {\n    this.uartContainer?.clear();\n\n    let component!: ComponentRef<BaseUartSubModuleComponent>;\n\n    switch (this.module.uartType) {\n      case UartType.humanCyborgRelations:\n      case UartType.genericSerial:\n        component = this.uartContainer.createComponent(\n          GenericSerialModuleComponent,\n        ) as ComponentRef<GenericSerialModuleComponent>;\n        break;\n      case UartType.kangaroo:\n        component = this.uartContainer.createComponent(\n          KangarooModuleComponent,\n        ) as ComponentRef<KangarooModuleComponent>;\n        break;\n      case UartType.maestro:\n        component = this.uartContainer.createComponent(\n          MaestroModuleComponent,\n        ) as ComponentRef<MaestroModuleComponent>;\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      component.instance.module = this.module;\n      component.instance.isMaster = this.isMaster;\n    }\n  }\n\n  removeModule(event: Event) {\n    event.stopPropagation();\n    this.removeModuleEvent.emit({\n      locationId: this.module.locationId,\n      id: this.module.id,\n      module: ModuleType.uart,\n    });\n  }\n}\n",
            "styleUrl": "./uart-module.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit",
                "AfterContentInit"
            ],
            "templateData": "<mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n            <div class=\"header-name\">\r\n                <input \r\n                    matInput \r\n                    placeholder=\"Name\" \r\n                    [(ngModel)]=\"module.name\"\r\n                    (keydown.space)=\"$event.stopImmediatePropagation()\"  \r\n                    (click)=\"nameClicked($event)\" \r\n                />\r\n            </div>\r\n        </mat-panel-title>\r\n        <mat-panel-description>\r\n            <div class=\"header-box\">\r\n                <div class=\"header-spacer\"></div>\r\n                <div class=\"subtype-name\">\r\n                    <p >{{ subtypeName }}</p>\r\n                </div>\r\n                <div class=\"header-button\">\r\n                    <button\r\n                        (keydown.enter)=\"$event.preventDefault();removeModule($event);\"\r\n                        (keydown.space)=\"$event.preventDefault();removeModule($event);\"  \r\n                        (click)=\"removeModule($event)\">\r\n                        <fa-icon [icon]=\"removeIcon\"/>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n    <ng-template #uartContainer></ng-template>\r\n</mat-expansion-panel>"
        },
        {
            "name": "UploadModalComponent",
            "id": "component-UploadModalComponent-6c0c31ceb402785cd09a79426ad6a385426fb2a54f21933a96723349d8b364c55c0595dfcd57b03d37ff19790aac037ace36da3280e884f033d2de019d6b8f68",
            "file": "src/app/components/modals/utility/upload-modal/upload-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upload-modal",
            "styleUrls": [
                "./upload-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upload-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "faFiles",
                    "defaultValue": "faFileAudio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isUploading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "path",
                    "defaultValue": "'/api/audio/savefile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "uploadQueue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileUpload[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "addToQueue",
                    "args": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "toRemove",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toRemove",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "uploadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient, HttpEventType } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { faFileAudio, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { ModalBaseComponent } from '../../modal-base/modal-base.component';\nimport { ModalCallbackEvent } from '../../modal-base/modal-callback-event';\nimport { FileUpload } from 'src/app/models/upload-file';\nimport { NgFor, NgStyle, DecimalPipe } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nexport class UploadModalResources {\n  public static message = 'message';\n  public static refreshEvent = 'upload_refreshEvent';\n  public static closeEvent = 'upload_closeEvent';\n}\n\n@Component({\n  selector: 'app-upload-modal',\n  templateUrl: './upload-modal.component.html',\n  styleUrls: ['./upload-modal.component.scss'],\n  imports: [NgFor, NgStyle, FontAwesomeModule, DecimalPipe],\n})\nexport class UploadModalComponent extends ModalBaseComponent {\n  faTrash = faTrash;\n  faFiles = faFileAudio;\n\n  uploadQueue: FileUpload[];\n  isUploading: boolean;\n\n  path = '/api/audio/savefile';\n\n  response: string;\n\n  private token: string;\n\n  constructor(private http: HttpClient) {\n    super();\n\n    this.response = '';\n\n    this.token = localStorage.getItem('astros-token') || '';\n    this.uploadQueue = new Array<FileUpload>();\n    this.isUploading = false;\n  }\n\n  removeFile(toRemove: unknown) {\n    let filename = '';\n\n    if (toRemove && typeof toRemove === 'object' && 'name' in toRemove) {\n      filename = toRemove.name as string;\n    } else {\n      filename = toRemove as string;\n    }\n\n    const idx = this.uploadQueue\n      .map((file) => {\n        if (typeof file.fileData === 'object' && 'name' in file.fileData) {\n          return file.fileData.name;\n        }\n        return file.fileData;\n      })\n      .indexOf(filename);\n\n    this.uploadQueue.splice(idx, 1);\n  }\n\n  addToQueue(evt: Event) {\n    const files = (evt.target as HTMLInputElement).files;\n\n    if (!files) {\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n      if (file !== null) {\n        this.uploadQueue.push(new FileUpload(file));\n      }\n    }\n  }\n\n  uploadAll() {\n    this.isUploading = true;\n\n    for (const file of this.uploadQueue) {\n      const formData = new FormData();\n\n      formData.append('file', file.fileData);\n\n      file.subscription = this.http\n        .post(this.path, formData, {\n          reportProgress: true,\n          observe: 'events',\n        })\n        .subscribe((evt) => {\n          if (evt.type === HttpEventType.UploadProgress && evt.total) {\n            file.uploadProgress = Math.round(100 * (evt.loaded / evt.total));\n          }\n        });\n    }\n  }\n\n  cancelAll() {\n    for (const file of this.uploadQueue) {\n      file.subscription?.unsubscribe();\n    }\n    this.isUploading = true;\n  }\n\n  reset() {\n    for (const file of this.uploadQueue) {\n      file.subscription?.unsubscribe();\n      file.subscription = undefined;\n      file.uploadProgress = undefined;\n    }\n\n    this.uploadQueue.splice(0, this.uploadQueue.length);\n    this.isUploading = false;\n  }\n\n  closeModal() {\n    const evt = new ModalCallbackEvent(UploadModalResources.refreshEvent, null);\n    this.modalCallback.emit(evt);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".upload-modal {\r\n\r\n    width: 600px;\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 500px;\r\n            overflow-wrap: break-word;\r\n            display: inline;\r\n\r\n            input[type='file'] {\r\n             display: none;\r\n            }\r\n            .upload-button{\r\n              border: 1px solid dimgray;\r\n              display: inline-block;\r\n              margin-top: 8px;\r\n              padding: 6px 12px;\r\n              cursor: pointer;\r\n            }\r\n\r\n            .upload-icon{\r\n              margin-right: 8px;\r\n              color: dimgray;\r\n            }\r\n\r\n            .file-list {\r\n                margin: 0;\r\n                padding: 0;\r\n                list-style-type: none;\r\n            \r\n                .file-line {\r\n                    display: flex;\r\n                    height: 40px;\r\n                    line-height: 40px;\r\n                    flex-direction: row;\r\n                    font-size: large;\r\n                    border-bottom: solid 2px black;\r\n            \r\n                    .name-section {\r\n                    \r\n                        flex-basis: 240px;\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                    }\r\n                    \r\n                    .size-section {\r\n                        flex-grow: 1;\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                        text-align: right;\r\n                        margin-right: 20px;\r\n                    }\r\n            \r\n\r\n                    .progress {\r\n                      width: 80px;\r\n                      height: 100%;\r\n                      margin-top: 4px;\r\n                    }\r\n\r\n                    .progress-background {\r\n                      width: 100%;\r\n                      margin-bottom: 0px;\r\n                      height: 80%;\r\n                      background: lightgrey;\r\n                      border-radius: 4px;\r\n                    }\r\n\r\n                    .progress-bar {\r\n                      width: 100%;\r\n                      height: 100%;\r\n                      float: right;\r\n                      background: green;\r\n                      border-radius: 4px;\r\n                    }\r\n\r\n                    button {\r\n                        font-size: large;\r\n                        padding: 0;\r\n                        margin: 0px 12px;\r\n                        border: none;\r\n                        background-color: transparent;\r\n                        color: dimgray;\r\n                        cursor: pointer;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./upload-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "templateData": "<div class=\"upload-modal\">\r\n    <h1>Upload Audio Files</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <ul class=\"file-list\">\r\n                    <li *ngFor=\"let file of uploadQueue\">\r\n                        <div class=\"file-line\">\r\n                            <div class=\"name-section\">{{file?.fileData?.name}}</div>\r\n                            <div class=\"size-section\">{{file?.fileData?.size/1024/1024 | number:'.2' }} MB</div>\r\n                            <div class=\"progress\">\r\n                                <div class=\"progress-background\">\r\n                                    <div title=\"progress\" class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': file.uploadProgress + '%' }\"></div>\r\n                                </div>\r\n                            </div>\r\n                            <button title=\"Remove\" (click)=\"removeFile(file.fileData)\">\r\n                                <fa-icon [icon]=\"faTrash\"></fa-icon>\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <label for=\"file-upload\" class=\"upload-button\">\r\n                    <fa-icon class=\"upload-icon\" [icon]=\"faFiles\"></fa-icon>Choose Files\r\n                </label>\r\n                <input id=\"file-upload\" title=\"Upload File\" type=\"file\" (change)=\"addToQueue($event)\" multiple />\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button [disabled]=\"isUploading || uploadQueue.length === 0\" (click)=\"uploadAll()\">Upload</button>\r\n            <button (click)=\"cancelAll()\">Abort</button>\r\n            <button (click)=\"cancelAll(); closeModal();\">Cancel</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b6b10433c2ce78db4c97417844bd9f0db47ccd0fd359b5a67a4cfb4bd8fc0106acf46583c00bb256d5fb49a6afa103dab95622bac78dc33f97f214905a2627a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth.guard';\nimport { AudioFilesComponent } from './pages/audio-files/audio-files.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { ModulesComponent } from './pages/modules/modules.component';\nimport { RemoteConfigComponent } from './pages/remote-config/remote-config.component';\nimport { ScripterComponent } from './pages/scripter/scripter.component';\nimport { ScriptsComponent } from './pages/scripts/scripts.component';\nimport { SettingsComponent } from './pages/settings/settings.component';\nimport { StatusComponent } from './pages/status/status.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'status', component: StatusComponent, canActivate: [AuthGuard] },\n  { path: 'scripts', component: ScriptsComponent, canActivate: [AuthGuard] },\n  { path: 'modules', component: ModulesComponent, canActivate: [AuthGuard] },\n  {\n    path: 'scripter/:id',\n    component: ScripterComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'audio-files',\n    component: AudioFilesComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'remote',\n    component: RemoteConfigComponent,\n    canActivate: [AuthGuard],\n  },\n  { path: 'utility', component: SettingsComponent, canActivate: [AuthGuard] },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ScripterModal",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "UartEventModalComponent | KangarooEventModalComponent | I2cEventModalComponent | AudioEventModalComponent | GpioEventModalComponent | HumanCyborgModalComponent",
                "file": "src/app/pages/scripter/scripter.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "MockType",
                "childs": [
                    {
                        "name": "Default",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ControllersResponseSuccess",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ControllersResponseFailure",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/websocket/websocket.mock.ts"
            }
        ],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/services/websocket/websocket.mock.ts": [
                {
                    "name": "MockType",
                    "childs": [
                        {
                            "name": "Default",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ControllersResponseSuccess",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ControllersResponseFailure",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/websocket/websocket.mock.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/pages/scripter/scripter.component.ts": [
                {
                    "name": "ScripterModal",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "UartEventModalComponent | KangarooEventModalComponent | I2cEventModalComponent | AudioEventModalComponent | GpioEventModalComponent | HumanCyborgModalComponent",
                    "file": "src/app/pages/scripter/scripter.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/esp/esp-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EspModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/gpio/gpio-channel/gpio-channel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GpioChannelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/i2c/i2c-module/i2c-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "I2cModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/i2c/i2c-module/i2c-module.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddressChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/i2c/i2c-submodules/base-i2c-sub-module/base-i2c-sub-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseI2cSubModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/i2c/i2c-submodules/generic-i2c-module/generic-i2c-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericI2cModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/i2c/i2c-submodules/pca9685-module/pca9685-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Pca9685ModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/shared/servo-settings/servo-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServoSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/uart/uart-module/uart-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UartModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/uart/uart-submodules/base-uart-sub-module/base-uart-sub-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseUartSubModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/uart/uart-submodules/generic-serial-module/generic-serial-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericSerialModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/uart/uart-submodules/kangaroo-module/kangaroo-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KangarooModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/uart/uart-submodules/maestro-channel/maestro-channel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MaestroChannelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/uart/uart-submodules/maestro-module/maestro-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MaestroModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/utility/module-events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddModuleEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/utility/module-events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RemoveModuleEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-module/utility/module-events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServoTestEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/alert-modal/alert-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/alert-modal/alert-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AlertModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfirmModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmModalEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modal-base/modal-base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modal-base/modal-callback-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalCallbackEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modal-base/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddModuleModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddModuleModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddModuleModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/add-module-modal/add-module-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModuleSubTypeSelection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/loading-modal/loading-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/loading-modal/loading-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadingModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/loading-modal/loading-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadingModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/servo-test-modal/servo-test-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServoTestModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/servo-test-modal/servo-test-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServoTestModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modules/servo-test-modal/servo-test-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServoTestMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AudioEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScriptEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScriptEventModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChannelTestModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChannelTestModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChannelTestModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ControllerModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ControllerModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControllerModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GpioEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GpioEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HumanCyborgModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HcrModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HcrCommandListItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "I2cEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "I2cEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KangarooEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "KangarooEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptTestModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScriptTestModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Caption",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServoEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServoEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UartEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UartEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormatModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormatModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Controller",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/utility/format-modal/format-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResourceController",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/utility/upload-modal/upload-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/utility/upload-modal/upload-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UploadModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/http-client.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpClientMock",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/script-resources.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChannelValue",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/script-resources.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LocationDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/script-resources.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScriptResources",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/models/upload-file.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileUpload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/audio-files/audio-files.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioFilesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/audio-files/audio-files.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteConfirmEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/modules.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModulesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/49",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/modules.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Caption",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/remote-config/m5-paper-config/m5-paper-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "M5PaperConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/remote-config/m5-paper-config/m5-paper-config.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScriptSelection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/remote-config/remote-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoteConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/helper/event-marker-helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventMarkerHelper",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/script-row/script-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/scripter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScripterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/scripter.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/scripter.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ScripterModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripts/scripts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripts/scripts.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteConfirmEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/audio/audio.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AudioServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/audio/audio.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AudioService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenPayload",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetails",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/controllers/controller.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ControllerServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/controllers/controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ControllerService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/remotes/remotes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RemotesService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scripts/scripts.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScriptsServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scripts/scripts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScriptsService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/settings/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/snackbar/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/status/status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/websocket/websocket.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketMock",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/websocket/websocket.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketMockControllersFailure",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/websocket/websocket.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketMockControllersSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/websocket/websocket.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketMockDefault",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/websocket/websocket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}