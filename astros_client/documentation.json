{
    "pipes": [],
    "interfaces": [
        {
            "name": "Caption",
            "id": "interface-Caption-aa7d0ddb1e015961aa63725f54c719ae33772753dbe1a74c7633191564bd96159546d924ebc0286f5252f956a52d3858349e9ae20fb73c82e9505b1e74be0f58",
            "file": "src/app/pages/modules/modules.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatExpansionPanel, MatAccordion, MatExpansionPanelHeader, MatExpansionPanelTitle } from '@angular/material/expansion';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ControlModule, ControllerStatus, AstrOsLocationCollection, ControllerLocation } from 'astros-common';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { StatusService } from 'src/app/services/status/status.service';\r\nimport { ModalService } from 'src/app/services/modal/modal.service';\r\nimport { LoadingModalComponent } from '../../components/modals/loading-modal/loading-modal.component';\r\nimport { ServoTestModalComponent } from '../../components/modals/servo-test-modal/servo-test-modal.component';\r\nimport { ModalCallbackEvent, ModalResources } from 'src/app/shared/modal-resources';\r\nimport { AlertModalComponent } from 'src/app/components/modals/alert-modal/alert-modal.component';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgIf, NgFor } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { EspModuleComponent } from './esp-module/esp-module.component';\r\nimport { ModalComponent } from 'src/app/components/modals/modal.component';\r\n\r\ninterface Caption { str: string }\r\n\r\n@Component({\r\n  selector: 'app-modules',\r\n  templateUrl: './modules.component.html',\r\n  styleUrls: ['./modules.component.scss'],\r\n  viewProviders: [MatExpansionPanel],\r\n  standalone: true,\r\n  imports: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    FontAwesomeModule,\r\n    NgIf,\r\n    FormsModule,\r\n    EspModuleComponent,\r\n    NgFor,\r\n    ModalComponent\r\n  ]\r\n})\r\nexport class ModulesComponent implements AfterViewInit {\r\n\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n  isLoaded = false;\r\n\r\n  backgroundClickDisabled = '1';\r\n  isMaster = true;\r\n\r\n  possibleControllers: ControlModule[] = [];\r\n  availableDomeControllers: ControlModule[] = [];\r\n  availableCoreControllers: ControlModule[] = [];\r\n\r\n  coreWarning = faExclamationTriangle;\r\n  domeWarning = faExclamationTriangle;\r\n  bodyWarning = faExclamationTriangle;\r\n\r\n  @ViewChild('core', { static: false }) coreEl!: ElementRef;\r\n  @ViewChild('dome', { static: false }) domeEl!: ElementRef;\r\n  @ViewChild('body', { static: false }) bodyEl!: ElementRef;\r\n\r\n  coreLocation!: ControllerLocation;\r\n  domeLocation!: ControllerLocation;\r\n  bodyLocation!: ControllerLocation;\r\n\r\n  coreCaption: Caption = { str: 'Module Down' }\r\n  domeCaption: Caption = { str: 'Module Down' }\r\n  bodyCaption: Caption = { str: 'Module Down' }\r\n\r\n  private notSynced = \"Not Synced\";\r\n  private moduleDown = \"Module Down\";\r\n\r\n  constructor(private controllerService: ControllerService,\r\n    private websocketService: WebsocketService,\r\n    private snackBar: SnackbarService,\r\n    private modalService: ModalService,\r\n    private renderer: Renderer2,\r\n    private status: StatusService) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.openControllerSyncModal();\r\n  }\r\n\r\n  openControllerSyncModal() {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    const component = this.container.createComponent(LoadingModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((result: unknown) => {\r\n      this.syncModalCallback(result);\r\n    });\r\n\r\n    this.modalService.open('modules-modal');\r\n  }\r\n\r\n  syncModalCallback(evt: any) {\r\n    this.parseModules(evt.response.locations);\r\n\r\n    // always filter out the master controller since it's always the body module\r\n    this.possibleControllers = evt.response.controllers.filter((controller: ControlModule) => controller.id !== 1);\r\n\r\n    this.availableCoreControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.domeLocation.controller?.id);\r\n    this.availableDomeControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.coreLocation.controller?.id);\r\n\r\n    this.handleStatus(this.status.getCoreStatus(), this.coreEl, this.coreCaption);\r\n    this.handleStatus(this.status.getDomeStatus(), this.domeEl, this.domeCaption);\r\n    this.handleStatus(this.status.getBodyStatus(), this.bodyEl, this.bodyCaption);\r\n\r\n    this.status.coreStateObserver.subscribe(value => this.handleStatus(value, this.coreEl, this.coreCaption));\r\n    this.status.domeStateObserver.subscribe(value => this.handleStatus(value, this.domeEl, this.domeCaption));\r\n    this.status.bodyStateObserver.subscribe(value => this.handleStatus(value, this.bodyEl, this.bodyCaption));\r\n\r\n    this.isLoaded = true;\r\n\r\n    this.modalService.close('modules-modal');\r\n  }\r\n\r\n  openAlertModal(message: string) {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, any>();\r\n\r\n    const component = this.container.createComponent(AlertModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.resources.set(ModalResources.message, message);\r\n\r\n    component.instance.modalCallback.subscribe((_: unknown) => {\r\n      this.modalService.close('modules-modal');\r\n    });\r\n\r\n    this.modalService.open('modules-modal');\r\n  }\r\n\r\n  openServoTestModal(value: { controllerId: number, channelId: number }) {\r\n\r\n    if (value.controllerId === 0) {\r\n      this.openAlertModal(\"Location for this servo is not set.\");\r\n      return;\r\n    }\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, any>();\r\n\r\n    const component = this.container.createComponent(ServoTestModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.resources.set(ModalResources.controllerId, value.controllerId);\r\n    component.instance.resources.set(ModalResources.servoId, value.channelId);\r\n\r\n    component.instance.modalCallback.subscribe((result: any) => {\r\n      this.servoTestModalCallback(result);\r\n    });\r\n\r\n    this.modalService.open('modules-modal');\r\n  }\r\n\r\n  servoTestModalCallback(evt: any) {\r\n    switch (evt.id) {\r\n      case ModalCallbackEvent.sendServoMove:\r\n\r\n        this.websocketService.sendMessage({ msgType: \"SERVO_TEST\", data: { controllerId: evt.controllerId, servoId: evt.servoId, value: evt.value } });\r\n\r\n        break;\r\n      case ModalCallbackEvent.close:\r\n        this.modalService.close('modules-modal');\r\n        break;\r\n    }\r\n  }\r\n\r\n  controllerSelectChanged(_: unknown) {\r\n\r\n    this.availableCoreControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.domeLocation.controller?.id);\r\n    this.availableDomeControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.coreLocation.controller?.id);\r\n\r\n  }\r\n\r\n  saveModuleSettings() {\r\n    const observer = {\r\n      next: (result: any) => {\r\n        if (result.message === 'success') {\r\n          console.log('module settings saved!')\r\n          this.snackBar.okToast('Module settings saved!');\r\n        } else {\r\n          console.log('module settings save failed!')\r\n          this.snackBar.okToast('Module settings save failed!');\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Module settings save failed!');\r\n      }\r\n    };\r\n\r\n    this.controllerService.saveLocations(new AstrOsLocationCollection(this.coreLocation, this.domeLocation, this.bodyLocation))\r\n      .subscribe(observer);\r\n\r\n    this.status.resetStatus();\r\n  }\r\n\r\n  syncModuleSettings() {\r\n    const observer = {\r\n      next: (result: any) => {\r\n        if (result.message === 'success') {\r\n          console.log('module sync queued!')\r\n          this.snackBar.okToast('Module sync queued!');\r\n        } else {\r\n          console.log('module sync failed to queue')\r\n          this.snackBar.okToast(`Module sync failed to queue.`);\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Module sync failed!');\r\n      }\r\n    };\r\n\r\n    this.controllerService.syncLocationConfig()\r\n      .subscribe(observer);\r\n  }\r\n\r\n  private parseModules(locations: AstrOsLocationCollection) {\r\n\r\n    console.log(locations);\r\n    try {\r\n      this.coreLocation = locations.coreModule ?? this.coreLocation;\r\n      this.domeLocation = locations.domeModule ?? this.domeLocation;\r\n      this.bodyLocation = locations.bodyModule ?? this.bodyLocation;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  handleStatus(status: ControllerStatus, el: ElementRef, caption: Caption) {\r\n    switch (status) {\r\n      case ControllerStatus.up:\r\n        caption.str = '';\r\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'hidden');\r\n        break;\r\n      case ControllerStatus.needsSynced:\r\n        caption.str = this.notSynced;\r\n        this.renderer.setStyle(el.nativeElement, 'color', 'yellow');\r\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\r\n        break;\r\n      case ControllerStatus.down:\r\n        caption.str = this.moduleDown;\r\n        this.renderer.setStyle(el.nativeElement, 'color', 'red');\r\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "str",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Caption",
            "id": "interface-Caption-e20debc8b8023e8ddf985ac947d2587b3580870aedc3f772c6364d3eb2242f8dcda2cd0696c0b186b831a38b1a65bc2bf721dc6786b2dfb22630764e3e9bfaf4-1",
            "file": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  ScriptResponse, \r\n  TransmissionStatus, \r\n  TransmissionType \r\n} from 'astros-common';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\r\n\r\ninterface Caption { str: string }\r\n\r\nexport class ScriptTestModalResources {\r\n  public static scriptId: string = 'scriptId';\r\n  public static locations: string = 'locations';\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-script-test-modal',\r\n  templateUrl: './script-test-modal.component.html',\r\n  styleUrls: ['../base-event-modal/base-event-modal.component.scss', './script-test-modal.component.scss'],\r\n  standalone: true\r\n})\r\nexport class ScriptTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  uploadInProgress = true;\r\n  runDisabled = true;\r\n\r\n  coreUpload: TransmissionStatus = TransmissionStatus.sending;\r\n  domeUpload: TransmissionStatus = TransmissionStatus.sending;\r\n  bodyUpload: TransmissionStatus = TransmissionStatus.sending;\r\n\r\n  coreCaption: Caption = { str: 'Uploading' };\r\n  domeCaption: Caption = { str: 'Uploading' };\r\n  bodyCaption: Caption = { str: 'Uploading' };\r\n\r\n  status: string;\r\n\r\n  scriptId = '';\r\n\r\n  constructor(private socket: WebsocketService, private scriptService: ScriptsService) {\r\n    super();\r\n    this.status = \"Uploading script...\";\r\n\r\n    this.socket.messages.subscribe((msg: unknown) => {\r\n      if (msg && typeof msg === 'object' && 'type' in msg) {\r\n        if (msg.type === TransmissionType.script) {\r\n          this.statusUpdate(msg as ScriptResponse);\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.scriptId = this.resources.get(ScriptTestModalResources.scriptId) as string;\r\n    const locations = this.resources.get(ScriptTestModalResources.locations) as number[];\r\n\r\n    let hasBody = false;\r\n    let hasCore = false;\r\n    let hasDome = false;\r\n\r\n    locations.forEach((location: number) => {\r\n      switch (location) {\r\n        case 1:\r\n          hasBody = true;\r\n          break;\r\n        case 2:\r\n          hasCore = true;\r\n          break;\r\n        case 3:\r\n          hasDome = true;\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.setInitialUploadStatus(hasBody, hasCore, hasDome);\r\n\r\n    const observer = {\r\n      next: (result: unknown) => console.log(result),\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.status = 'Error requesting Script Upload';\r\n        this.coreUpload = TransmissionStatus.failed;\r\n        this.coreCaption.str = 'Failed';\r\n        this.domeUpload = TransmissionStatus.failed;\r\n        this.domeCaption.str = 'Failed';\r\n        this.bodyUpload = TransmissionStatus.failed;\r\n        this.bodyCaption.str = 'Failed';\r\n      }\r\n    };\r\n\r\n    if (this.scriptId != '') {\r\n      this.scriptService.uploadScript(this.scriptId).subscribe(observer);\r\n    }\r\n    else {\r\n      this.status = 'Script ID missing, close dialog to continue.'\r\n    }\r\n  }\r\n\r\n  runClicked() {\r\n    console.log(`Running script: ${this.scriptId}`)\r\n    this.scriptService.runScript(this.scriptId).subscribe();\r\n    this.closeModal();\r\n  }\r\n\r\n  setInitialUploadStatus(hasBody: boolean, hasCore: boolean, hasDome: boolean) {\r\n    if (hasBody) {\r\n      this.bodyUpload = TransmissionStatus.sending;\r\n      this.bodyCaption.str = 'Uploading';\r\n    } else {\r\n      this.bodyUpload = TransmissionStatus.success;\r\n      this.bodyCaption.str = 'Not Assigned';\r\n    }\r\n\r\n    if (hasCore) {\r\n      this.coreUpload = TransmissionStatus.sending;\r\n      this.coreCaption.str = 'Uploading';\r\n    } else {\r\n      this.coreUpload = TransmissionStatus.success;\r\n      this.coreCaption.str = 'Not Assigned';\r\n    }\r\n\r\n    if (hasDome) {\r\n      this.domeUpload = TransmissionStatus.sending;\r\n      this.domeCaption.str = 'Uploading';\r\n    } else {\r\n      this.domeUpload = TransmissionStatus.success;\r\n      this.domeCaption.str = 'Not Assigned';\r\n    }\r\n  }\r\n\r\n  statusUpdate(msg: ScriptResponse) {\r\n    switch (msg.locationId) {\r\n      case 1:\r\n        this.bodyUpload = msg.status;\r\n        this.setCaption(this.bodyCaption, msg.status);\r\n        break;\r\n      case 2:\r\n        this.coreUpload = msg.status;\r\n        this.setCaption(this.coreCaption, msg.status);\r\n        break;\r\n      case 3:\r\n        this.domeUpload = msg.status;\r\n        this.setCaption(this.domeCaption, msg.status);\r\n        break;\r\n    }\r\n\r\n    if (this.coreUpload > 1 && this.domeUpload > 1 && this.bodyUpload > 1) {\r\n      this.status = \"Upload Complete.\"\r\n      this.uploadInProgress = false;\r\n      if (this.coreUpload + this.domeUpload + this.bodyUpload >= 6) {\r\n        this.runDisabled = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  setCaption(caption: Caption, status: TransmissionStatus) {\r\n    switch (status) {\r\n      case TransmissionStatus.success:\r\n        caption.str = \"Success\"\r\n        break;\r\n      case TransmissionStatus.failed:\r\n        caption.str = \"Failed\"\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "str",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Caption-1"
        },
        {
            "name": "ChannelTestModalResponse",
            "id": "interface-ChannelTestModalResponse-77a4059886ef66d051b18bf62614526a4461e5119f3618343f88ece497884b07c24161885d4a291802bf92fbe0580763c5d550f761c4be847f03d54574cf5222",
            "file": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChannelSubType, ChannelType, KangarooAction } from 'astros-common';\r\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\r\nimport { NgIf } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class ChannelTestModalResources {\r\n  public static controller = 'controller';\r\n  public static channelType = 'channelType';\r\n  public static channelSubType = 'channelSubType';\r\n  public static channelId = 'channelId';\r\n\r\n  public static channelTest = 'channelTest_test';\r\n}\r\n\r\nexport interface ChannelTestModalResponse {\r\n  controllerId: number;\r\n  commandType: ChannelType;\r\n  command: unknown;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-channel-test-modal',\r\n    templateUrl: './channel-test-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './channel-test-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgIf, FormsModule]\r\n})\r\nexport class ChannelTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  controllerId = 0;\r\n  channelId = 0;\r\n\r\n  channelType: ChannelType = ChannelType.none;\r\n  channelSubType: ChannelSubType = ChannelSubType.none;\r\n\r\n  speed = 1;\r\n  position = 0;\r\n  value = '';\r\n\r\n  kangarooCh = 1;\r\n  kangarooAction = 1;\r\n  kangarooSpd?: number;\r\n  kangarooPos?: number;\r\n  spdDisabled = true;\r\n  posDisabled = true;\r\n\r\n  gpioLevel = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.callbackType = ChannelTestModalResources.channelTest;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.controllerId = this.resources.get(ChannelTestModalResources.controller) as number;\r\n    this.channelType = this.resources.get(ChannelTestModalResources.channelType) as ChannelType;\r\n    this.channelSubType = this.resources.get(ChannelTestModalResources.channelSubType) as ChannelSubType\r\n    this.channelId = this.resources.get(ChannelTestModalResources.channelId) as number;\r\n  }\r\n\r\n  runClicked() {\r\n    const evt = new ModalCallbackEvent(\r\n      ChannelTestModalResources.channelTest,\r\n      {\r\n        controllerId: this.controllerId,\r\n        commandType: this.channelType,\r\n        command: this.getCommand()  \r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  getCommand(): any {\r\n    switch (this.channelType) {\r\n      case ChannelType.i2c:\r\n        return { id: this.channelId, val: this.value };\r\n      //case ChannelType.servo:\r\n      //  return { id: this.channelId, position: this.position, speed: this.speed };\r\n      case ChannelType.uart:\r\n        if (this.channelSubType === ChannelSubType.kangaroo) {\r\n          return { val: this.getKangarooCommand() };\r\n        } else {\r\n          return { val: this.value };\r\n        }\r\n      case ChannelType.gpio:\r\n        return { id: this.channelId, val: this.gpioLevel };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  selectChange($event: any) {\r\n    if ($event.target.id === 'cmdselect') {\r\n\r\n      this.spdDisabled = +this.kangarooAction !== 3 && +this.kangarooAction !== 4;\r\n      this.posDisabled = +this.kangarooAction !== 4;\r\n\r\n      if (+this.kangarooAction !== 3 && +this.kangarooAction !== 4) {\r\n        this.kangarooSpd = 0;\r\n      }\r\n      if (+this.kangarooAction !== 4) {\r\n        this.kangarooPos = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  getKangarooCommand(): string {\r\n\r\n    let cmd = '';\r\n\r\n    switch (+this.kangarooAction) {\r\n      case KangarooAction.start:\r\n        cmd = 'start'\r\n        break;\r\n      case KangarooAction.home:\r\n        cmd = 'home'\r\n        break;\r\n      case KangarooAction.speed:\r\n        cmd = `s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`\r\n        break;\r\n      case KangarooAction.position:\r\n        cmd = `p${this.kangarooPos === undefined ? 0 : this.kangarooPos} s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`\r\n        break;\r\n    }\r\n\r\n    return `${this.kangarooCh},${cmd}`;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "commandType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "controllerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Controller",
            "id": "interface-Controller-b9189ad0ab5a64050d96da0ca84c6919b4f96537137bf968c41272f03b37e9829286a3f2faa045482d2e220f4b61a62c5aa10b5d35b03636206334bb333247ed",
            "file": "src/app/pages/settings/modals/format-modal/format-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackResult } from 'src/app/modal';\r\nimport { ModalResources } from 'src/app/shared/modal-resources';\r\nimport { NgFor } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\ninterface ResourceController {\r\n  id: number,\r\n  name: string,\r\n  address: string,\r\n}\r\n\r\ninterface Controller {\r\n  id: number,\r\n  name: string,\r\n  address: string,\r\n  selected: boolean\r\n}\r\n\r\n@Component({\r\n    selector: 'app-format-modal',\r\n    templateUrl: './format-modal.component.html',\r\n    styleUrls: ['./format-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgFor, FormsModule]\r\n})\r\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  public static formatSdEvent = 'formatSD';\r\n  public static closeEvent = 'close';\r\n\r\n  controllers: Controller[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ModalResources.controllers)) {\r\n      for (const controller of this.resources.get(ModalResources.controllers) as ResourceController[]) {\r\n        this.controllers.push(\r\n          {\r\n            id: controller.id, name: controller.name, address: controller.address, selected: false\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  ok() {\r\n\r\n    const result = [];\r\n\r\n    for (const controller of this.controllers) {\r\n      if (controller.selected) {\r\n        result.push({ name: controller.name, address: controller.address });\r\n      }\r\n    }\r\n\r\n    this.modalCallback.emit(new ModalCallbackResult( FormatModalComponent.formatSdEvent, result));\r\n  }\r\n\r\n  closeModal() {\r\n    this.modalCallback.emit(new ModalCallbackResult(FormatModalComponent.closeEvent, null));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ControllerModalResponse",
            "id": "interface-ControllerModalResponse-e4bc7b4d3e919662776700231dc8f32d385c1b7fa4b38c53dbbc3cfb3f61466c0793da56a3027457676b1e9d42ad2c07ce1b99136abf45a955dd275c1a16d9d9",
            "file": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChannelType } from 'astros-common';\r\nimport { ChannelValue, LocationDetails } from 'src/app/models/script-resources';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, NgIf, KeyValuePipe } from '@angular/common';\r\n\r\nexport class ControllerModalResources {\r\n  public static controllers: string = 'controllers';\r\n  public static modules: string = 'modules';\r\n  public static channels: string = 'channels';\r\n\r\n  public static addChannelEvent: string = 'controller_addChannel';\r\n  public static closeEvent: string = 'controller_close';\r\n}\r\n\r\nexport interface ControllerModalResponse {\r\n  controller: number;\r\n  module: ChannelType;\r\n  channels: number[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-controller-modal',\r\n    templateUrl: './controller-modal.component.html',\r\n    styleUrls: ['./controller-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, NgFor, NgIf, KeyValuePipe]\r\n})\r\nexport class ControllerModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  errorMessage: string;\r\n\r\n  controllers!: Map<number, LocationDetails>;\r\n  selectedController = 0;\r\n\r\n  private availableModules!: Map<number, Map<ChannelType, string>>;\r\n  modules: Map<ChannelType, string>\r\n  selectedModule: ChannelType = ChannelType.none;\r\n\r\n  private availableChannels!: Map<number, Map<ChannelType, ChannelValue[]>>;\r\n  channels: ChannelValue[]\r\n  selectedChannel = -1;\r\n  selectedChannels: any[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.errorMessage = '';\r\n\r\n    this.modules = new Map<ChannelType, string>();\r\n    this.channels = new Array<ChannelValue>();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.controllers = this.resources.get(ControllerModalResources.controllers) as Map<number, LocationDetails>;\r\n    this.availableModules = this.resources.get(ControllerModalResources.modules) as Map<number, Map<ChannelType, string>>;\r\n    this.availableChannels = this.resources.get(ControllerModalResources.channels) as Map<number, Map<ChannelType, ChannelValue[]>>;\r\n  }\r\n\r\n  modalChange($event: any) {\r\n    // convert from string value to number for enum\r\n    if ($event.target.id === 'controller-select') {\r\n      this.setModules(+$event.target.value);\r\n    }\r\n    else if ($event.target.id === 'module-select') {\r\n      this.setChannels(+$event.target.value);\r\n    }\r\n  }\r\n\r\n  addChannel() {\r\n\r\n    if (+this.selectedController !== 4\r\n      && +this.selectedModule === ChannelType.none) {\r\n      this.errorMessage = 'Module Selection Required'\r\n      return;\r\n    }\r\n\r\n    if (+this.selectedModule !== ChannelType.none\r\n      && +this.selectedChannels.length < 1) {\r\n      this.errorMessage = 'Channel Selection Required'\r\n      return;\r\n    }\r\n\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      ControllerModalResources.addChannelEvent,\r\n      {\r\n        controller: +this.selectedController,\r\n        module: +this.selectedController === 4 ? ChannelType.audio : +this.selectedModule,\r\n        channels: this.selectedChannels\r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n    this.clearOptions()\r\n  }\r\n\r\n  closeModal() {\r\n    this.clearOptions()\r\n    const evt = new ModalCallbackEvent(\r\n      ControllerModalResources.closeEvent,\r\n      null\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  private clearOptions() {\r\n    this.selectedController = 0;\r\n    this.selectedModule = ChannelType.none;\r\n    this.selectedChannel = -1;\r\n    document.getElementById('module-select')?.setAttribute('disabled', 'disabled');\r\n    document.getElementById('channel-select')?.setAttribute('disabled', 'disabled');\r\n  }\r\n\r\n  private setModules(controllerId: number) {\r\n    if (controllerId === 4) {\r\n      this.selectedModule = ChannelType.none;\r\n      this.selectedChannel = -1;\r\n      document.getElementById('module-select')?.setAttribute('disabled', 'disabled');\r\n      document.getElementById('channel-select')?.setAttribute('disabled', 'disabled')\r\n    }\r\n    else {\r\n      const mods = this.availableModules.get(+this.selectedController);\r\n      if (mods) {\r\n        this.modules = mods;\r\n        document.getElementById('module-select')?.removeAttribute('disabled');\r\n        //this.selectedModule = ChannelType.none;\r\n        this.setChannels(this.selectedModule);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setChannels(channelType: ChannelType) {\r\n\r\n    if (channelType === ChannelType.none) {\r\n      this.selectedChannel = -1;\r\n      document.getElementById('channel-select')?.setAttribute('disabled', 'disabled');\r\n    }\r\n    else {\r\n      const chs = this.availableChannels.get(+this.selectedController)?.get(+channelType);\r\n      if (chs) {\r\n        this.channels = chs;\r\n        document.getElementById('channel-select')?.removeAttribute('disabled');\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "channels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "controller",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Item",
            "id": "interface-Item-181d6e32c670248cecee40183ea6887fb570f12087af43d8e1b070872a5288f81646746e595fc3ef14afe55fbcec6825bcc0f8682d7e5b68a3fae165e17bd071",
            "file": "src/app/pages/scripter/scripter.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewChecked, Component, ComponentRef, OnInit, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatMenuTrigger, MatMenu, MatMenuContent, MatMenuItem } from '@angular/material/menu'\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Guid } from 'guid-typescript';\r\nimport { ConfirmModalComponent, ModalService } from 'src/app/modal';\r\nimport { ScriptResources } from 'src/app/models/script-resources';\r\nimport {\r\n  ChannelSubType,\r\n  ChannelType,\r\n  AstrOsLocationCollection,\r\n  Script,\r\n  ScriptChannel,\r\n  ScriptEvent,\r\n  ControllerLocation,\r\n  BaseChannel\r\n} from 'astros-common';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\r\nimport { ControllerModalComponent } from '../../components/modals/scripting/controller-modal/controller-modal.component';\r\nimport { I2cEventModalComponent } from '../../components/modals/i2c-event-modal/i2c-event-modal.component';\r\nimport { ModalCallbackEvent, ModalResources } from '../../shared/modal-resources';\r\nimport { AudioEventModalComponent } from '../../components/modals/scripting/audio-event-modal/audio-event-modal.component';\r\nimport { KangarooEventModalComponent } from '../../components/modals/kangaroo-event-modal/kangaroo-event-modal.component';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { ScriptTestModalComponent } from '../../components/modals/script-test-modal/script-test-modal.component';\r\nimport { ChannelTestModalComponent } from '../../components/modals/channel-test-modal/channel-test-modal.component';\r\nimport EventMarkerHelper from './helper/event-marker-helper';\r\nimport { UartEventModalComponent } from '../../components/modals/scripting/uart-event-modal/uart-event-modal.component';\r\nimport { HumanCyborgModalComponent } from '../../components/modals/human-cyborg-modal/human-cyborg-modal.component';\r\nimport { GpioEventModalComponent } from '../../components/modals/gpio-event-modal/gpio-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor } from '@angular/common';\r\nimport { ScriptRowComponent } from './script-row/script-row.component';\r\nimport { ModalComponent } from '../../services/modal/modal.component';\r\n\r\n\r\nexport interface Item {\r\n  timeline: string;\r\n  xPos: number;\r\n}\r\n\r\ntype ScripterModal  =\r\n  UartEventModalComponent | \r\n  KangarooEventModalComponent | \r\n  I2cEventModalComponent | \r\n  AudioEventModalComponent | \r\n  GpioEventModalComponent | \r\n  HumanCyborgModalComponent;\r\n\r\n\r\n@Component({\r\n  selector: 'app-scripter',\r\n  templateUrl: './scripter.component.html',\r\n  styleUrls: ['./scripter.component.scss'],\r\n  standalone: true,\r\n  imports: [FormsModule, NgFor, ScriptRowComponent, MatMenuTrigger, MatMenu, MatMenuContent, MatMenuItem, ModalComponent]\r\n})\r\nexport class ScripterComponent implements OnInit, AfterViewChecked {\r\n\r\n  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;\r\n\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n  private segmentWidth = 60;\r\n  private segments = 3000;\r\n  private segmentFactor = 10;\r\n  private scriptId: string;\r\n  private resourcesLoaded = false;\r\n  private renderedEvents = false;\r\n  private characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  backgroundClickDisabled = '0';\r\n\r\n  script!: Script;\r\n  scriptChannels: ScriptChannel[];\r\n\r\n  timeLineArray: number[];\r\n  menuTopLeft = { x: 0, y: 0 };\r\n\r\n  scriptResources!: ScriptResources;\r\n\r\n\r\n  components: unknown[];\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private snackBar: SnackbarService,\r\n    private modalService: ModalService,\r\n    private renderer: Renderer2,\r\n    private controllerService: ControllerService,\r\n    private scriptService: ScriptsService) {\r\n\r\n    this.scriptId = this.route.snapshot.paramMap.get('id') ?? '0';\r\n\r\n    this.timeLineArray = Array.from({ length: this.segments }, (_, i) => (i + 1) / this.segmentFactor)\r\n\r\n    this.scriptChannels = new Array<ScriptChannel>();\r\n    this.components = new Array<unknown>();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    // \"this\" needs to exist before we render events\r\n    if (!this.renderedEvents) {\r\n      if (this.script != undefined) {\r\n        for (const ch of this.script.scriptChannels) {\r\n          for (const kvp of ch.eventsKvpArray) {\r\n            this.renderEvent(kvp.value);\r\n          }\r\n        }\r\n        this.renderedEvents = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const csObserver = {\r\n      next: (result: AstrOsLocationCollection) => {\r\n\r\n        const modules = new Array<ControllerLocation>();\r\n\r\n        if (result.domeModule)\r\n          modules.push(result.domeModule);\r\n        if (result.coreModule)\r\n          modules.push(result.coreModule);\r\n        if (result.bodyModule)\r\n          modules.push(result.bodyModule);\r\n\r\n        this.scriptResources = new ScriptResources(modules);\r\n        this.resourcesLoaded = true;\r\n      },\r\n      error: (err: unknown) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.getLoadedLocations().subscribe(csObserver);\r\n\r\n    if (this.scriptId === '0') {\r\n      this.scriptId = this.generateScriptId(5);\r\n      console.log(`new script id:${this.scriptId}`);\r\n      this.script = new Script(this.scriptId, \"\",\r\n        \"\", new Date(Date.parse(\"1970-01-01 00:00:00.000\")));\r\n\r\n      this.scriptChannels = this.script.scriptChannels;\r\n    }\r\n    else {\r\n\r\n      const ssObserver = {\r\n        next: async (result: Script) => {\r\n\r\n          for (const ch of result.scriptChannels) {\r\n            ch.events = new Map<number, ScriptEvent>();\r\n\r\n            for (const kvp of ch.eventsKvpArray) {\r\n              ch.events.set(kvp.key, kvp.value);\r\n            }\r\n          }\r\n\r\n          this.script = result;\r\n\r\n          this.scriptChannels = this.script.scriptChannels;\r\n\r\n          this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\r\n\r\n          if (!this.resourcesLoaded) {\r\n            await new Promise(f => setTimeout(f, 1000));\r\n          }\r\n\r\n          this.scriptResources.applyScript(this.script);\r\n        },\r\n        error: (err: unknown) => console.error(err)\r\n      };\r\n\r\n      this.scriptService.getScript(this.scriptId).subscribe(ssObserver)\r\n    }\r\n\r\n\r\n  }\r\n\r\n  saveScript() {\r\n\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        if (result && typeof result === 'object' && 'message' in result) {\r\n          if (result.message === 'success') {\r\n            console.log('script settings saved!')\r\n            this.snackBar.okToast('Script settings saved!');\r\n          }\r\n        } else {\r\n          console.log('script settings save failed!')\r\n          this.snackBar.okToast('Script settings save failed!');\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Script settings save failed!');\r\n      }\r\n    };\r\n\r\n    // Maps don't survive JSON.stringify\r\n    for (const ch of this.script.scriptChannels) {\r\n\r\n      ch.eventsKvpArray = [];\r\n\r\n      for (const key of ch.events.keys()) {\r\n        ch.eventsKvpArray.push({ key: key, value: ch.events.get(key) });\r\n      }\r\n    }\r\n\r\n    this.scriptService.saveScript(this.script).subscribe(observer);\r\n  }\r\n\r\n  //#region testing methods\r\n\r\n  openScriptTestModal() {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    modalResources.set(ModalResources.scriptId, this.scriptId);\r\n\r\n    const locations = new Array<string>();\r\n\r\n    this.script.deploymentStatusKvp.forEach((kvp) => { locations.push(kvp.key) });\r\n\r\n    modalResources.set(ModalResources.locations, locations);\r\n\r\n    const component = this.container.createComponent(ScriptTestModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.components.push(component);\r\n\r\n    this.backgroundClickDisabled = '1';\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  saveBeforeTest() {\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        if (result && typeof result === 'object' && 'message' in result) {\r\n          if (result.message === 'success') {\r\n            console.log('script settings saved!')\r\n            this.openScriptTestModal();\r\n          }\r\n        } else {\r\n          console.log('script settings save failed!')\r\n          this.snackBar.okToast('Script settings save failed!');\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Script settings save failed!');\r\n      }\r\n    };\r\n\r\n    // Maps don't survive JSON.stringify\r\n    for (const ch of this.script.scriptChannels) {\r\n\r\n      ch.eventsKvpArray = [];\r\n\r\n      for (const key of ch.events.keys()) {\r\n        ch.eventsKvpArray.push({ key: key, value: ch.events.get(key) });\r\n      }\r\n    }\r\n\r\n    this.scriptService.saveScript(this.script).subscribe(observer);\r\n  }\r\n\r\n\r\n  sendChannelTest(controllerId: number, commandType: ChannelType, command: unknown) {\r\n\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        if (result && typeof result === 'object' && 'message' in result) {\r\n          if (result.message === 'success') {\r\n            console.log('Test command sent!')\r\n            this.snackBar.okToast('Test command sent!');\r\n          }\r\n        } else {\r\n          console.log('Test command send failed!')\r\n          this.snackBar.okToast('Test command send failed!');\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Test command send failed!');\r\n      }\r\n    };\r\n\r\n    this.controllerService.sendControllerCommand(controllerId, commandType, command)\r\n      .subscribe(observer);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  openChannelAddModal() {\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    modalResources.set(ModalResources.controllers, this.scriptResources.locations);\r\n    modalResources.set(ModalResources.modules, this.scriptResources.getAvailableModules());\r\n    modalResources.set(ModalResources.channels, this.scriptResources.getAvailableChannels());\r\n\r\n    const component = this.container.createComponent(ControllerModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.components.push(component);\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  openNewEventModal(evt: unknown) {\r\n    let time = 0;\r\n\r\n    if (evt && typeof evt === 'object' && 'timeline' in evt && 'xPos' in evt) {\r\n\r\n      const line = document.getElementById(`script-row-${evt.timeline}`);\r\n      const scrollContainer = document.getElementById(\"scripter-container\");\r\n\r\n      if (line != null && scrollContainer != null) {\r\n\r\n        const clickPos = (evt.xPos as number + scrollContainer.scrollLeft - line.offsetLeft);\r\n\r\n        time = Math.floor(clickPos / this.segmentWidth);\r\n\r\n        const left = (time * this.segmentWidth);\r\n\r\n        if (Math.floor(clickPos) - left >= 30) {\r\n          time += 1\r\n        }\r\n      }\r\n      else {\r\n        this.snackBar.okToast('Could not determine event time!');\r\n        console.log('could not determine event time');\r\n        return;\r\n      }\r\n\r\n      const chIdx = this.scriptChannels\r\n        .map((ch) => { return ch.id })\r\n        .indexOf(evt.timeline as string);\r\n\r\n      const ch = this.scriptChannels[chIdx];\r\n\r\n      const event = new ScriptEvent(ch.id, ch.type, ch.subType, time, '');\r\n\r\n      this.createEventModal(event, false);\r\n    }\r\n  }\r\n\r\n  openEditEventModal(channelId: string, time: number) {\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    if (chIdx > -1) {\r\n      const event = this.scriptChannels[chIdx].events.get(time);\r\n\r\n      if (event) {\r\n        this.createEventModal(event, true);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  createEventModal(event: ScriptEvent, isEdit: boolean) {\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n    modalResources.set(ModalResources.scriptEvent, event)\r\n\r\n    if (isEdit) {\r\n      modalResources.set(ModalResources.callbackType, ModalCallbackEvent.editEvent);\r\n    }\r\n\r\n    let component!: ComponentRef<ScripterModal>;\r\n\r\n    switch (event.channelType) {\r\n      case ChannelType.uart:\r\n        switch (event.channelSubType) {\r\n          case ChannelSubType.genericSerial:\r\n            component = this.container.createComponent(UartEventModalComponent)\r\n            modalResources.set(ModalResources.channelId, this.getUartChannelFromChannel(event.scriptChannel));\r\n            break;\r\n          case ChannelSubType.kangaroo:\r\n            component = this.container.createComponent(KangarooEventModalComponent)\r\n            modalResources.set(ModalResources.channelId, this.getUartChannelFromChannel(event.scriptChannel));\r\n            modalResources.set(ModalResources.kangaroo, this.getKangarooControllerFromChannel(event.scriptChannel));\r\n            break;\r\n          case ChannelSubType.humanCyborgRelations:\r\n            component = this.container.createComponent(HumanCyborgModalComponent)\r\n            modalResources.set(ModalResources.channelId, this.getUartChannelFromChannel(event.scriptChannel));\r\n            break;\r\n        }\r\n        break;\r\n      case ChannelType.i2c:\r\n        component = this.container.createComponent(I2cEventModalComponent);\r\n        modalResources.set(ModalResources.i2cId, this.getIdFromChannel(event.scriptChannel))\r\n        break;\r\n      /* case ChannelType.servo:\r\n         component = this.container.createComponent(ServoEventModalComponent);\r\n         modalResources.set(ModalResources.servoId, this.getIdFromChannel(event.scriptChannel))\r\n         break; */\r\n      case ChannelType.audio:\r\n        component = this.container.createComponent(AudioEventModalComponent);\r\n        break;\r\n      case ChannelType.gpio:\r\n        component = this.container.createComponent(GpioEventModalComponent);\r\n        modalResources.set(ModalResources.gpioId, this.getIdFromChannel(event.scriptChannel))\r\n        break;\r\n    }\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.components.push(component);\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  //#region resources for modals \r\n\r\n  getUartChannelFromChannel(channelId: string) {\r\n    const _ = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    /*if (chIdx > -1) {\r\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\r\n      return uart.id;\r\n    }*/\r\n  }\r\n\r\n  getKangarooControllerFromChannel(channelId: string) {\r\n\r\n    const _ = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    /*if (chIdx > -1) {\r\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\r\n      return uart.module as KangarooController;\r\n    }*/\r\n  }\r\n\r\n  getIdFromChannel(channelId: string): number | null {\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    if (chIdx > -1) {\r\n      const servo = this.scriptChannels[chIdx].channel as BaseChannel;\r\n      return servo.id;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n\r\n  //#endregion\r\n\r\n  modalCallback(evt: any) {\r\n\r\n    switch (evt.id) {\r\n      case ModalCallbackEvent.addChannel:\r\n        this.addChannel(evt.controller, evt.module, evt.channels);\r\n        break;\r\n      case ModalCallbackEvent.removeChannel:\r\n        this.removeChannel(evt.val);\r\n        break;\r\n      case ModalCallbackEvent.addEvent:\r\n        this.addEvent(evt.scriptEvent);\r\n        break;\r\n      case ModalCallbackEvent.editEvent:\r\n        this.editEvent(evt.scriptEvent, evt.originalEventTime);\r\n        break;\r\n      case ModalCallbackEvent.removeEvent:\r\n        this.removeEvent(evt.channelId, evt.time);\r\n        break;\r\n      case ModalCallbackEvent.channelTest:\r\n        this.sendChannelTest(evt.controllerId, evt.commandType, evt.command);\r\n    }\r\n\r\n    this.modalService.close('scripter-modal');\r\n    this.container.clear();\r\n    this.components.splice(0, this.components.length);\r\n    this.backgroundClickDisabled = '0';\r\n  }\r\n\r\n  //#region script row call backs\r\n\r\n  timelineCallback(msg: any) {\r\n\r\n    msg.event.preventDefault();\r\n\r\n    this.menuTopLeft.x = msg.event.clientX;\r\n    this.menuTopLeft.y = msg.event.clientY;\r\n\r\n    this.menuTrigger.menuData = { 'item': { 'timeline': msg.id, 'xPos': msg.event.clientX } };\r\n\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  removeCallback(msg: any) {\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n    modalResources.set(ModalResources.action, 'Delete')\r\n    modalResources.set(ModalResources.message, 'Are you sure you want to delete channel?');\r\n    modalResources.set(ModalResources.confirmEvent, { id: ModalCallbackEvent.removeChannel, val: msg.id });\r\n    modalResources.set(ModalResources.closeEvent, { id: ModalCallbackEvent.close })\r\n\r\n    const component = this.container.createComponent(ConfirmModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n\r\n    this.components.push(component);\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  private removeChannel(id: string) {\r\n\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(id);\r\n\r\n    if (chIdx !== undefined && chIdx > -1) {\r\n      const channel = this.scriptChannels[chIdx];\r\n\r\n      this.scriptChannels.splice(chIdx, 1);\r\n\r\n      this.scriptResources.removeChannel(\r\n        channel.locationId,\r\n        channel.type,\r\n        channel.channel?.id\r\n      );\r\n\r\n      this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\r\n    }\r\n  }\r\n\r\n  channelTestCallback(msg: any) {\r\n\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(msg.id);\r\n\r\n    if (chIdx !== undefined && chIdx > -1) {\r\n\r\n      const ch = this.scriptChannels[chIdx];\r\n\r\n      this.container.clear();\r\n\r\n      const modalResources = new Map<string, unknown>();\r\n\r\n      modalResources.set(ModalResources.channelType, ch.type);\r\n      modalResources.set(ModalResources.channelSubType, ch.subType);\r\n      modalResources.set(ModalResources.channelId, ch.channelNumber);\r\n      modalResources.set(ModalResources.controllerType, ch.locationId);\r\n\r\n      const component = this.container.createComponent(ChannelTestModalComponent);\r\n\r\n      component.instance.resources = modalResources;\r\n      component.instance.modalCallback.subscribe((evt: unknown) => {\r\n        this.modalCallback(evt);\r\n      });\r\n      this.components.push(component);\r\n\r\n      this.modalService.open('scripter-modal');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  private addChannel(locationId: number, channelType: ChannelType, channels: number[]): void {\r\n\r\n    let name = this.scriptResources.locations.get(locationId)?.name;\r\n\r\n    if (!name) {\r\n      name = ''\r\n    }\r\n\r\n    if (channelType === ChannelType.audio) {\r\n      const chValue = this.scriptResources.addChannel(locationId, channelType, 0);\r\n\r\n      const subType = 0;\r\n\r\n      const ch = new ScriptChannel(Guid.create().toString(), this.scriptId, locationId, channelType, subType, 0, chValue, this.segments);\r\n\r\n      this.scriptChannels.push(ch);\r\n    }\r\n    else {\r\n      channels.forEach(channel => {\r\n        const chValue = this.scriptResources.addChannel(locationId, channelType, +channel);\r\n\r\n        let subType = 0;\r\n\r\n        if (channelType === ChannelType.uart) {\r\n          subType = chValue.type;\r\n        }\r\n\r\n        const ch = new ScriptChannel(Guid.create().toString(), this.scriptId, locationId, channelType, subType, channel, chValue, this.segments);\r\n\r\n        this.scriptChannels.push(ch);\r\n      });\r\n    }\r\n\r\n    this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\r\n  }\r\n\r\n  private addEvent(event: ScriptEvent): void {\r\n\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(event.scriptChannel);\r\n\r\n    this.scriptChannels[chIdx].events.set(event.time, event);\r\n\r\n    this.renderEvent(event);\r\n  }\r\n\r\n  private editEvent(event: ScriptEvent, oldTime: number) {\r\n    //if (event.time !== oldTime) {\r\n    this.removeEvent(event.scriptChannel, oldTime);\r\n    this.addEvent(event);\r\n    // }\r\n    // else {\r\n\r\n    //  const chIdx = this.scriptChannels\r\n    //    .map((ch) => { return ch.id })\r\n    //    .indexOf(event.scriptChannel);\r\n\r\n    //  this.scriptChannels[chIdx].events.set(event.time, event);\r\n    //}\r\n  }\r\n\r\n  private renderEvent(event: ScriptEvent) {//channelId: string, time: number) {\r\n    const line = document.getElementById(`script-row-${event.scriptChannel}`);\r\n\r\n    const floater = this.renderer.createElement('div');\r\n    const displayText = EventMarkerHelper.generateText(event);\r\n\r\n    const line1 = this.renderer.createElement('div');\r\n    const line1txt = this.renderer.createText(displayText[0]);\r\n    this.renderer.appendChild(line1, line1txt);\r\n    this.renderer.appendChild(floater, line1);\r\n\r\n    const line2 = this.renderer.createElement('div');\r\n    const line2txt = this.renderer.createText(displayText[1]);\r\n    this.renderer.appendChild(line2, line2txt);\r\n    this.renderer.appendChild(floater, line2);\r\n\r\n    const line3 = this.renderer.createElement('div');\r\n    const line3txt = this.renderer.createText(displayText[2]);\r\n    this.renderer.appendChild(line3, line3txt);\r\n    this.renderer.appendChild(floater, line3);\r\n\r\n    const line4 = this.renderer.createElement('div');\r\n    const line4txt = this.renderer.createText(displayText[3]);\r\n    this.renderer.appendChild(line4, line4txt);\r\n    this.renderer.appendChild(floater, line4);\r\n\r\n    this.renderer.setAttribute(floater, 'class', 'scripter-timeline-marker');\r\n    this.renderer.setAttribute(floater, 'id', `event-${event.scriptChannel}-${event.time}`)\r\n    this.renderer.setStyle(floater, 'top', `-5px`);\r\n    this.renderer.setStyle(floater, 'left', `${(event.time * this.segmentWidth) - 37}px`);\r\n    this.renderer.listen(floater, 'click', (_) => {\r\n      this.openEditEventModal(event.scriptChannel, event.time);\r\n    })\r\n    this.renderer.appendChild(line, floater);\r\n  }\r\n\r\n  private removeEvent(channelId: string, time: number) {\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    this.scriptChannels[chIdx].events.delete(time);\r\n\r\n    const element = document.getElementById(`event-${channelId}-${time}`);\r\n    if (element) {\r\n      element.parentNode?.removeChild(element);\r\n    }\r\n  }\r\n\r\n  private channelCompare(a: ScriptChannel, b: ScriptChannel) {\r\n    let val = a.locationId - b.locationId;\r\n\r\n    if (val !== 0) {\r\n      return val;\r\n    }\r\n\r\n    val = a.type - b.type;\r\n\r\n    if (val !== 0) {\r\n      return val;\r\n    }\r\n\r\n    return a.channel.channelName < b.channel.channelName ? -1 : 1;\r\n  }\r\n\r\n  private generateScriptId(length: number): string {\r\n    let result = `s${Math.floor(Date.now() / 1000)}`;\r\n    const charactersLength = this.characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n      result += this.characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "timeline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "xPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoadingModalResponse",
            "id": "interface-LoadingModalResponse-31bf043342fe134972cea03a8500285802753d20bc69acbb37730baf58525fdbb30b68f6821450d79722acaa3223503cb40d7221892f26e55ffbb54b6dd7d002",
            "file": "src/app/components/modals/loading-modal/loading-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseEventModalComponent } from '../scripting/base-event-modal/base-event-modal.component';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { AstrOsLocationCollection, ControllersResponse, TransmissionType } from 'astros-common';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport class LoadingModalResources {\r\n  public static closeEvent: string = 'loading_closeEvent';\r\n}\r\n\r\nexport interface LoadingModalResponse {\r\n  controllers: unknown[];\r\n  locations: unknown[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-loading-modal',\r\n    templateUrl: './loading-modal.component.html',\r\n    styleUrls: ['./loading-modal.component.scss'],\r\n    standalone: true\r\n})\r\nexport class LoadingModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  subscription!: Subscription;\r\n\r\n  message = \"Loading Controllers...\";\r\n  controllersMsg = TransmissionType.controllers;\r\n  locations!: AstrOsLocationCollection;\r\n  controllers!: ControllersResponse;\r\n\r\n  locationsLoaded = false;\r\n  controllersLoaded = false;\r\n\r\n  disableButton = true;\r\n\r\n  constructor(private socket: WebsocketService,\r\n    private controllerService: ControllerService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    const locationsObserver = {\r\n      next: (result: any) => {\r\n        this.locations = result;\r\n        this.locationsLoaded = true;\r\n        this.controllersLoaded = true;\r\n        this.controllers = { success: true, controllers: [] , type: TransmissionType.controllers, message: \"\" };\r\n        this.checkLoadedState();\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.getLoadedLocations().subscribe(locationsObserver);\r\n\r\n    return;\r\n    const observer = {\r\n      next: (_: any) => { \r\n        console.log(\"Synced controllers\");\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.syncControllers().subscribe(observer);\r\n\r\n    this.subscription = this.socket.messages.subscribe((msg: any) => {\r\n      if (msg.type === this.controllersMsg) {\r\n        this.controllers = msg as ControllersResponse;\r\n        this.controllersLoaded = true;\r\n        this.checkLoadedState();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkLoadedState() {\r\n    if (this.locationsLoaded && this.controllersLoaded) {\r\n      if (this.controllers.success) {\r\n        this.closeModal();\r\n      } else {\r\n        this.disableButton = false;\r\n        this.message = \"Failed to load controllers, using cached values.\";\r\n      }\r\n    }\r\n  }\r\n\r\n  override closeModal(): void {\r\n    //this.subscription.unsubscribe();\r\n    const evt = new ModalCallbackEvent(\r\n      LoadingModalResources.closeEvent,\r\n      { \r\n        controllers: this.controllers.controllers, \r\n        locations: this.locations \r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "locations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResourceController",
            "id": "interface-ResourceController-b9189ad0ab5a64050d96da0ca84c6919b4f96537137bf968c41272f03b37e9829286a3f2faa045482d2e220f4b61a62c5aa10b5d35b03636206334bb333247ed",
            "file": "src/app/pages/settings/modals/format-modal/format-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackResult } from 'src/app/modal';\r\nimport { ModalResources } from 'src/app/shared/modal-resources';\r\nimport { NgFor } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\ninterface ResourceController {\r\n  id: number,\r\n  name: string,\r\n  address: string,\r\n}\r\n\r\ninterface Controller {\r\n  id: number,\r\n  name: string,\r\n  address: string,\r\n  selected: boolean\r\n}\r\n\r\n@Component({\r\n    selector: 'app-format-modal',\r\n    templateUrl: './format-modal.component.html',\r\n    styleUrls: ['./format-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgFor, FormsModule]\r\n})\r\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  public static formatSdEvent = 'formatSD';\r\n  public static closeEvent = 'close';\r\n\r\n  controllers: Controller[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ModalResources.controllers)) {\r\n      for (const controller of this.resources.get(ModalResources.controllers) as ResourceController[]) {\r\n        this.controllers.push(\r\n          {\r\n            id: controller.id, name: controller.name, address: controller.address, selected: false\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  ok() {\r\n\r\n    const result = [];\r\n\r\n    for (const controller of this.controllers) {\r\n      if (controller.selected) {\r\n        result.push({ name: controller.name, address: controller.address });\r\n      }\r\n    }\r\n\r\n    this.modalCallback.emit(new ModalCallbackResult( FormatModalComponent.formatSdEvent, result));\r\n  }\r\n\r\n  closeModal() {\r\n    this.modalCallback.emit(new ModalCallbackResult(FormatModalComponent.closeEvent, null));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ScriptEventModalResponse",
            "id": "interface-ScriptEventModalResponse-41f9556827a68abaad3e9d48be6628fc5f29f258996e14775ce436c91c3d8150a1828e9727434dcd752056ce921cd904d736927c2ea62b8730371ccce7faa8bc",
            "file": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\nimport { ScriptEvent } from 'astros-common';\r\n\r\nexport class ScriptEventModalResources {\r\n  public static scriptEvent: string = 'scriptEvent';\r\n  public static callbackType: string = 'callbackType';\r\n  public static addEvent: string = 'script_addEvent';\r\n  public static editEvent: string = 'script_editEvent';\r\n  public static removeEvent: string = 'script_removeEvent';\r\n  public static closeEvent: string = 'script_closeEvent';\r\n}\r\n\r\nexport interface ScriptEventModalResponse {\r\n  scriptEvent: ScriptEvent;\r\n  time: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-base-event-modal',\r\n  template: '',\r\n  styleUrls: ['./base-event-modal.component.scss'],\r\n  standalone: true\r\n})\r\nexport class BaseEventModalComponent extends ModalBaseComponent {\r\n\r\n  protected scriptEvent!: ScriptEvent;\r\n  protected originalEventTime: number;\r\n  protected callbackType: string;\r\n\r\n  eventTime: number;\r\n  protected maxTime = 3000;\r\n  protected timeFactor = 10;\r\n\r\n  errorMessage: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  removeEvent() {\r\n    const evt = new ModalCallbackEvent(\r\n      ScriptEventModalResources.removeEvent,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  closeModal() {\r\n    const evt = new ModalCallbackEvent(\r\n      ScriptEventModalResources.closeEvent,\r\n      null\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ServoTestMessage",
            "id": "interface-ServoTestMessage-e91905c810f4988980bf05e071521cf56bcc0c9f1dba16876567224feeebfb06d16009000c8d6d47c8bb17578e73935c5f6d54c5d1fd0b4d0638403716715ffa",
            "file": "src/app/components/modals/servo-test-modal/servo-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseEventModalComponent } from '../scripting/base-event-modal/base-event-modal.component';\r\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalCallbackEvent } from '../modal-base/modal-base.component';\r\n\r\nexport class ServoTestModalResources {\r\n  public static servoId: string = 'servoId';\r\n  public static controllerId: string = 'controllerId';\r\n  public static sendServoMove: string = 'servoTest_servoMove';\r\n  public static closeEvent: string = 'servoTest_closeEvent';\r\n}\r\n\r\nexport interface ServoTestMessage {\r\n  controllerId: number;\r\n  servoId: number;\r\n  value: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-servo-test-modal',\r\n    templateUrl: './servo-test-modal.component.html',\r\n    styleUrl: './servo-test-modal.component.scss',\r\n    standalone: true,\r\n    imports: [MatSlider, MatSliderThumb, FormsModule]\r\n})\r\nexport class ServoTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n   \r\n  servoId = 0;\r\n  controllerId = 0;\r\n  disableSlider = true;\r\n  value = 1500;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.servoId = this.resources.get(ServoTestModalResources.servoId) as number;\r\n    this.controllerId = this.resources.get(ServoTestModalResources.controllerId) as number;\r\n  }\r\n\r\n  onSliderChange(_: unknown) {\r\n    const evt = new ModalCallbackEvent(\r\n      ServoTestModalResources.sendServoMove,\r\n      {\r\n        controllerId: this.controllerId,\r\n        servoId: this.servoId,\r\n        value: this.value\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  enableTest() {\r\n    this.disableSlider = false;\r\n  }\r\n\r\n  override closeModal(): void {\r\n    const evt = new ModalCallbackEvent(\r\n      ServoTestModalResources.closeEvent,\r\n      null\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "controllerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "servoId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TokenPayload",
            "id": "interface-TokenPayload-66d93a940b49f44104e8c3978178ef4862d33b7be51ea919f458c17bc4fa8ce9f5249c3572f29fef57cdb0f1bd366491bc7ce9bd0643bb183975cf96118c37cf",
            "file": "src/app/services/auth/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\nexport interface UserDetails {\r\n  _id: string,\r\n  username: string,\r\n  exp: number,\r\n  iat: number\r\n}\r\n\r\nexport interface TokenResponse {\r\n  token: string\r\n}\r\n\r\nexport interface TokenPayload {\r\n  username: string,\r\n  password: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    this.token = '';\r\n  }\r\n\r\n  public login(user: TokenPayload): Observable<unknown> {\r\n    return this.request('post', 'login', user);\r\n  }\r\n\r\n  public profile(): Observable<unknown> {\r\n    return this.request('get', 'profile');\r\n  }\r\n\r\n  public logout(): void {\r\n    this.token = \"\";\r\n    window.localStorage.removeItem(\"astros-token\");\r\n    this.router.navigateByUrl(\"/\");\r\n  }\r\n\r\n  public getUserDetails(): UserDetails | null {\r\n    const token = this.getToken();\r\n    let payload;\r\n    if (token) {\r\n      payload = token.split('.')[1];\r\n      payload = window.atob(payload);\r\n      return JSON.parse(payload);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const user = this.getUserDetails();\r\n    if (user) {\r\n      return user.exp > Date.now() / 1000;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private saveToken(token: string): void {\r\n    localStorage.setItem(\"astros-token\", token);\r\n  }\r\n\r\n  private getToken(): string {\r\n\r\n    this.token = localStorage.getItem(\"astros-token\") || '';\r\n\r\n    return this.token;\r\n  }\r\n\r\n  private request(\r\n    method: \"post\" | \"get\",\r\n    type: \"login\" | \"register\" | \"profile\",\r\n    user?: TokenPayload\r\n  ): Observable<unknown> {\r\n    let base$;\r\n\r\n    if (method === \"post\") {\r\n      base$ = this.http.post(`/api/${type}`, user);\r\n    } else {\r\n      base$ = this.http.get(`/api/${type}`, {\r\n        headers: { Authorization: `Bearer ${this.getToken()}` }\r\n      });\r\n    }\r\n\r\n    const request = base$.pipe(\r\n      map((data: unknown) => {\r\n        if (data && typeof data === \"object\" && \"token\" in data)\r\n          if (data.token) {\r\n            this.saveToken(data.token as string);\r\n          }\r\n        return data;\r\n      })\r\n    );\r\n\r\n    return request;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TokenResponse",
            "id": "interface-TokenResponse-66d93a940b49f44104e8c3978178ef4862d33b7be51ea919f458c17bc4fa8ce9f5249c3572f29fef57cdb0f1bd366491bc7ce9bd0643bb183975cf96118c37cf",
            "file": "src/app/services/auth/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\nexport interface UserDetails {\r\n  _id: string,\r\n  username: string,\r\n  exp: number,\r\n  iat: number\r\n}\r\n\r\nexport interface TokenResponse {\r\n  token: string\r\n}\r\n\r\nexport interface TokenPayload {\r\n  username: string,\r\n  password: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    this.token = '';\r\n  }\r\n\r\n  public login(user: TokenPayload): Observable<unknown> {\r\n    return this.request('post', 'login', user);\r\n  }\r\n\r\n  public profile(): Observable<unknown> {\r\n    return this.request('get', 'profile');\r\n  }\r\n\r\n  public logout(): void {\r\n    this.token = \"\";\r\n    window.localStorage.removeItem(\"astros-token\");\r\n    this.router.navigateByUrl(\"/\");\r\n  }\r\n\r\n  public getUserDetails(): UserDetails | null {\r\n    const token = this.getToken();\r\n    let payload;\r\n    if (token) {\r\n      payload = token.split('.')[1];\r\n      payload = window.atob(payload);\r\n      return JSON.parse(payload);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const user = this.getUserDetails();\r\n    if (user) {\r\n      return user.exp > Date.now() / 1000;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private saveToken(token: string): void {\r\n    localStorage.setItem(\"astros-token\", token);\r\n  }\r\n\r\n  private getToken(): string {\r\n\r\n    this.token = localStorage.getItem(\"astros-token\") || '';\r\n\r\n    return this.token;\r\n  }\r\n\r\n  private request(\r\n    method: \"post\" | \"get\",\r\n    type: \"login\" | \"register\" | \"profile\",\r\n    user?: TokenPayload\r\n  ): Observable<unknown> {\r\n    let base$;\r\n\r\n    if (method === \"post\") {\r\n      base$ = this.http.post(`/api/${type}`, user);\r\n    } else {\r\n      base$ = this.http.get(`/api/${type}`, {\r\n        headers: { Authorization: `Bearer ${this.getToken()}` }\r\n      });\r\n    }\r\n\r\n    const request = base$.pipe(\r\n      map((data: unknown) => {\r\n        if (data && typeof data === \"object\" && \"token\" in data)\r\n          if (data.token) {\r\n            this.saveToken(data.token as string);\r\n          }\r\n        return data;\r\n      })\r\n    );\r\n\r\n    return request;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserDetails",
            "id": "interface-UserDetails-66d93a940b49f44104e8c3978178ef4862d33b7be51ea919f458c17bc4fa8ce9f5249c3572f29fef57cdb0f1bd366491bc7ce9bd0643bb183975cf96118c37cf",
            "file": "src/app/services/auth/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\nexport interface UserDetails {\r\n  _id: string,\r\n  username: string,\r\n  exp: number,\r\n  iat: number\r\n}\r\n\r\nexport interface TokenResponse {\r\n  token: string\r\n}\r\n\r\nexport interface TokenPayload {\r\n  username: string,\r\n  password: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    this.token = '';\r\n  }\r\n\r\n  public login(user: TokenPayload): Observable<unknown> {\r\n    return this.request('post', 'login', user);\r\n  }\r\n\r\n  public profile(): Observable<unknown> {\r\n    return this.request('get', 'profile');\r\n  }\r\n\r\n  public logout(): void {\r\n    this.token = \"\";\r\n    window.localStorage.removeItem(\"astros-token\");\r\n    this.router.navigateByUrl(\"/\");\r\n  }\r\n\r\n  public getUserDetails(): UserDetails | null {\r\n    const token = this.getToken();\r\n    let payload;\r\n    if (token) {\r\n      payload = token.split('.')[1];\r\n      payload = window.atob(payload);\r\n      return JSON.parse(payload);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const user = this.getUserDetails();\r\n    if (user) {\r\n      return user.exp > Date.now() / 1000;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private saveToken(token: string): void {\r\n    localStorage.setItem(\"astros-token\", token);\r\n  }\r\n\r\n  private getToken(): string {\r\n\r\n    this.token = localStorage.getItem(\"astros-token\") || '';\r\n\r\n    return this.token;\r\n  }\r\n\r\n  private request(\r\n    method: \"post\" | \"get\",\r\n    type: \"login\" | \"register\" | \"profile\",\r\n    user?: TokenPayload\r\n  ): Observable<unknown> {\r\n    let base$;\r\n\r\n    if (method === \"post\") {\r\n      base$ = this.http.post(`/api/${type}`, user);\r\n    } else {\r\n      base$ = this.http.get(`/api/${type}`, {\r\n        headers: { Authorization: `Bearer ${this.getToken()}` }\r\n      });\r\n    }\r\n\r\n    const request = base$.pipe(\r\n      map((data: unknown) => {\r\n        if (data && typeof data === \"object\" && \"token\" in data)\r\n          if (data.token) {\r\n            this.saveToken(data.token as string);\r\n          }\r\n        return data;\r\n      })\r\n    );\r\n\r\n    return request;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AudioService",
            "id": "injectable-AudioService-b8cfc62d08e2ec614a6e2af90c6e298764ad7391aa1e26f74fdc4dec994b6217ab78f9a0df851ea777c87fb94c3f1ea18c919a12f9145624257e432f190f6567",
            "file": "src/app/services/audio/audio.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAudioFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AudioFile[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAudioFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AudioFile[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, of, tap } from 'rxjs';\r\nimport { AudioFile } from 'astros-common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AudioService {\r\n\r\n  private token: string\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.token = '';\r\n  }\r\n\r\n  public getAudioFiles(): Observable<AudioFile[]> {\r\n    \r\n    return this.http.get<AudioFile[]>(`/api/audio/all`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    }).pipe(\r\n      map((files: AudioFile[])=> files.sort((a: AudioFile, b: AudioFile)=>{\r\n        if (a.fileName < b.fileName) return -1;\r\n        if (a.fileName > b.fileName) return 1;\r\n        return 0;\r\n      }))\r\n    ).pipe(tap(_ => console.log(`loaded audio files`)),\r\n        catchError(this.handleError<AudioFile[]>('getAudioFiles'))\r\n      );\r\n  }\r\n\r\n  public removeAudioFile(id: string): Observable<AudioFile[]> {\r\n    return this.http.get<AudioFile[]>(`/api/audio/delete?id=${id}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log(`deleted audio file id: ${id}`)),\r\n        catchError(this.handleError<AudioFile[]>('removeAudioFile'))\r\n      );\r\n  }\r\n\r\n  private getToken(): string {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('astros-token') || '';\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: unknown): Observable<T> => {\r\n      console.error(operation, error);\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-66d93a940b49f44104e8c3978178ef4862d33b7be51ea919f458c17bc4fa8ce9f5249c3572f29fef57cdb0f1bd366491bc7ce9bd0643bb183975cf96118c37cf",
            "file": "src/app/services/auth/authentication.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "UserDetails | null",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "profile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "method",
                            "type": "\"post\" | \"get\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"login\" | \"register\" | \"profile\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "\"post\" | \"get\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"login\" | \"register\" | \"profile\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "TokenPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\nexport interface UserDetails {\r\n  _id: string,\r\n  username: string,\r\n  exp: number,\r\n  iat: number\r\n}\r\n\r\nexport interface TokenResponse {\r\n  token: string\r\n}\r\n\r\nexport interface TokenPayload {\r\n  username: string,\r\n  password: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    this.token = '';\r\n  }\r\n\r\n  public login(user: TokenPayload): Observable<unknown> {\r\n    return this.request('post', 'login', user);\r\n  }\r\n\r\n  public profile(): Observable<unknown> {\r\n    return this.request('get', 'profile');\r\n  }\r\n\r\n  public logout(): void {\r\n    this.token = \"\";\r\n    window.localStorage.removeItem(\"astros-token\");\r\n    this.router.navigateByUrl(\"/\");\r\n  }\r\n\r\n  public getUserDetails(): UserDetails | null {\r\n    const token = this.getToken();\r\n    let payload;\r\n    if (token) {\r\n      payload = token.split('.')[1];\r\n      payload = window.atob(payload);\r\n      return JSON.parse(payload);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const user = this.getUserDetails();\r\n    if (user) {\r\n      return user.exp > Date.now() / 1000;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private saveToken(token: string): void {\r\n    localStorage.setItem(\"astros-token\", token);\r\n  }\r\n\r\n  private getToken(): string {\r\n\r\n    this.token = localStorage.getItem(\"astros-token\") || '';\r\n\r\n    return this.token;\r\n  }\r\n\r\n  private request(\r\n    method: \"post\" | \"get\",\r\n    type: \"login\" | \"register\" | \"profile\",\r\n    user?: TokenPayload\r\n  ): Observable<unknown> {\r\n    let base$;\r\n\r\n    if (method === \"post\") {\r\n      base$ = this.http.post(`/api/${type}`, user);\r\n    } else {\r\n      base$ = this.http.get(`/api/${type}`, {\r\n        headers: { Authorization: `Bearer ${this.getToken()}` }\r\n      });\r\n    }\r\n\r\n    const request = base$.pipe(\r\n      map((data: unknown) => {\r\n        if (data && typeof data === \"object\" && \"token\" in data)\r\n          if (data.token) {\r\n            this.saveToken(data.token as string);\r\n          }\r\n        return data;\r\n      })\r\n    );\r\n\r\n    return request;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-e630464a4e43b51112bb23fe4c581e3422a11fb5e10cdf14bd651abd1f87e62abe2e0aae15a4f4e0f2f66c20966cb177182958584467581d55d1b4dc2ecdcf76",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from './services/auth/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard  {\r\n\r\n  constructor(private auth: AuthenticationService, private router: Router){}\r\n\r\n  canActivate(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    route: ActivatedRouteSnapshot,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    if (!this.auth.isLoggedIn()){\r\n      return this.router.parseUrl('/login');\r\n    }\r\n\r\n    return true;\r\n  }\r\n  \r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ControllerService",
            "id": "injectable-ControllerService-ab7d1df1eb3c75199db487fe113f5b88a8d91782ea1896d699173d144aae576156929e68adeb1535c9458fec0650912ba29a8d6006053bddd810ac827bf357b4",
            "file": "src/app/services/controllers/controller.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLoadedLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AstrOsLocationCollection>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AstrOsLocationCollection>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveLocations",
                    "args": [
                        {
                            "name": "controllers",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllers",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendControllerCommand",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncControllers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "syncLocationConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { ChannelType, AstrOsLocationCollection } from 'astros-common';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ControllerService {\r\n\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.token = '';\r\n  }\r\n\r\n  public getLocations(): Observable<AstrOsLocationCollection> {\r\n\r\n    return this.http.get<AstrOsLocationCollection>('/api/locations', {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log('got locations')),\r\n        catchError(this.handleError<AstrOsLocationCollection>('getLocations'))\r\n      );\r\n  }\r\n\r\n  public getLoadedLocations(): Observable<AstrOsLocationCollection> {\r\n\r\n    return this.http.get<AstrOsLocationCollection>('/api/locations/load', {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log('loaded locations')),\r\n        catchError(this.handleError<AstrOsLocationCollection>('getLocations'))\r\n      );\r\n  }\r\n\r\n  public saveLocations(controllers: AstrOsLocationCollection): Observable<unknown> {\r\n    return this.http.put<unknown>('/api/locations', controllers, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`saveLocations result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('saveLocations'))\r\n      );\r\n  }\r\n\r\n  public syncControllers(): Observable<unknown> {\r\n    return this.http.get<unknown>('/api/locations/synccontrollers', {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`syncControllers result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('syncLocations'))\r\n      );\r\n  }\r\n\r\n  public syncLocationConfig(): Observable<unknown> {\r\n    return this.http.get<unknown>('/api/locations/syncconfig', {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`syncLocationConfig result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('syncLocations'))\r\n      );\r\n  }\r\n\r\n  sendControllerCommand(controllerId: number, channelType: ChannelType, command: unknown): Observable<unknown> {\r\n    return this.http.post<unknown>('/api/directcommand', { controller: controllerId, commandType: channelType, command: command },\r\n      {\r\n        headers: { Authorization: `Bearer ${this.getToken()}` }\r\n      })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`direct command result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('sendControllerCommand'))\r\n      );\r\n  }\r\n\r\n  private getToken(): string {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('astros-token') || '';\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: unknown): Observable<T> => {\r\n      console.error(operation, error);\r\n\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-00fb54747d8e389b8439b9247e681868c4b20626db094b99a1baaf083590a2b8b28e182e407f52d8831521f3aa74f39aa43b10ca0b18e0c3bb5835bcb6f17473",
            "file": "src/app/services/modal/modal.service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalService {\r\n\r\n  private modals: any[] = [];\r\n\r\n  add(modal: any){\r\n    this.modals.push(modal);\r\n  }\r\n\r\n  remove(id: string){\r\n    this.modals = this.modals.filter(x => x.id !== id);\r\n  }\r\n\r\n  open(id: string){\r\n    const modal = this.modals.find(x => x.id === id);\r\n    modal.open();\r\n  }\r\n\r\n  close(id: string){\r\n    const modal = this.modals.find(x => x.id === id);\r\n    modal.close();\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RemotesService",
            "id": "injectable-RemotesService-c73dac86f759492b3bf4b02c6863098d1fc6d572b70334aeb2326b07a03d0e0fe044f498f07add33e7d8f7f5285489ba7408d75e96c2fbdfac3637dff87c7145",
            "file": "src/app/services/remotes/remotes.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getRemoteConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRemoteConfig",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, Observable, of, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RemotesService {\r\n\r\n  private token: string\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.token = '';\r\n  }\r\n\r\n  public getRemoteConfig(): Observable<string> {\r\n    return this.http.get<string>(`/api/remoteConfig`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log(`loaded remote config`)),\r\n        catchError(this.handleError<string>('getRemoteConfig'))\r\n      );\r\n  }\r\n\r\n\r\n  public saveRemoteConfig(json: string): Observable<unknown> {\r\n    return this.http.put<unknown>('/api/remoteConfig', { config: json }, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`saveRemoteConfig result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('saveRemoteConfig'))\r\n      );\r\n  }\r\n\r\n  private getToken(): string {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('astros-token') || '';\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: unknown): Observable<T> => {\r\n      console.error(operation, error);\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ScriptsService",
            "id": "injectable-ScriptsService-ec31d0174988ae2f8972b65afe64228ef94cce1e0a3e9e4d86050aa3465a335d0d683077944ec39cb68654a05a198145027a25c0c453b14dd4f08f978fb3a95e",
            "file": "src/app/services/scripts/scripts.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "copyScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Script>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllScripts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Script[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Script>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveScript",
                    "args": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, Observable, of, tap } from 'rxjs';\r\nimport { Script } from 'astros-common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ScriptsService {\r\n\r\n  private token: string\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.token = '';\r\n  }\r\n\r\n  public getAllScripts(): Observable<Script[]> {\r\n    return this.http.get<Script[]>(`/api/scripts/all`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log(`loaded scripts`)),\r\n        catchError(this.handleError<Script[]>('getAllScript'))\r\n      );\r\n  }\r\n\r\n  public getScript(id: string): Observable<Script> {\r\n    return this.http.get<Script>(`/api/scripts?id=${id}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log(`loaded script ${id}`)),\r\n        catchError(this.handleError<Script>('getScript'))\r\n      );\r\n  }\r\n\r\n\r\n  public copyScript(id: string): Observable<Script> {\r\n    return this.http.get<Script>(`/api/scripts/copy?id=${id}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log(`loaded script ${id}`)),\r\n        catchError(this.handleError<Script>('copyScript'))\r\n      );\r\n  }\r\n\r\n  public saveScript(script: Script): Observable<unknown> {\r\n    return this.http.put<unknown>('/api/scripts', script, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`saveScript result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('saveScript'))\r\n      );\r\n  }\r\n\r\n  public deleteScript(id: string): Observable<unknown> {\r\n    return this.http.delete<unknown>(`/api/scripts?id=${id}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`deleteScript result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('deleteScript'))\r\n      );\r\n  }\r\n\r\n  public uploadScript(id: string): Observable<unknown> {\r\n    return this.http.get<unknown>(`/api/scripts/upload?id=${id}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`uploadScript result: ${val.message}`)\r\n        }),\r\n      );\r\n  }\r\n\r\n  public runScript(id: string): Observable<unknown> {\r\n    return this.http.get<unknown>(`/api/scripts/run?id=${id}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`runScript result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('runScript'))\r\n      );\r\n  }\r\n\r\n  private getToken(): string {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('astros-token') || '';\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: unknown): Observable<T> => {\r\n      console.error(operation, error);\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-a181554d45059b74bd7a8ebca198ab772a8b2df9162580b1505fab6eb705e4fd23d32e2c12552218bab35da5f076b5c6e075dc12b52ff8cf8bb77e15acdc88d9",
            "file": "src/app/services/settings/settings.service.ts",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "formatSD",
                    "args": [
                        {
                            "name": "controllers",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllers",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getControllers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ControlModule[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSetting",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<KeyValue<string, string>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: unknown) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSetting",
                    "args": [
                        {
                            "name": "setting",
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "setting",
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { KeyValue } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ControlModule } from 'astros-common';\r\nimport { Observable, tap, catchError, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SettingsService {\r\n\r\n  private token: string\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.token = '';\r\n  }\r\n\r\n  public getSetting(key: string): Observable<KeyValue<string, string>> {\r\n    return this.http.get<KeyValue<string, string>>(`/api/settings?key=${key}`, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log(`got setting for ${key}`)),\r\n        catchError(this.handleError<KeyValue<string, string>>('getSettings'))\r\n      );\r\n  }\r\n\r\n  getControllers(): Observable<ControlModule[]> {\r\n    return this.http.get<ControlModule[]>('/api/settings/controllers', {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(tap(_ => console.log('got controllers')),\r\n        catchError(this.handleError<ControlModule[]>('getControllers'))\r\n      );\r\n  }\r\n\r\n  public saveSetting(setting: KeyValue<string, string>): Observable<unknown> {\r\n    return this.http.put<unknown>('/api/settings', setting, {\r\n      headers: { Authorization: `Bearer ${this.getToken()}` }\r\n    })\r\n      .pipe(\r\n        tap(val => {\r\n          if (val && typeof val === 'object' && 'message' in val)\r\n            console.log(`saveRemoteConfig result: ${val.message}`)\r\n        }),\r\n        catchError(this.handleError<unknown>('saveRemoteConfig'))\r\n      );\r\n  }\r\n\r\n\r\n  public formatSD(controllers: unknown[]): Observable<unknown> {\r\n    return this.http.post<unknown[]>(`/api/settings/formatSD`, { controllers: controllers },\r\n      {\r\n        headers: { Authorization: `Bearer ${this.getToken()}` }\r\n      })\r\n      .pipe(tap(_ => console.log('SD Format Queued')),\r\n        catchError(this.handleError<unknown>('formatSD'))\r\n      );\r\n  }\r\n\r\n  private getToken(): string {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('astros-token') || '';\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: unknown): Observable<T> => {\r\n      console.error(operation, error);\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-a9a85fc51f1f8f156c5691bb0f16c8cfa8d2131bd4f863f8c2716d1b3312c2500366e2179cc529f94eaa0bf9ed19e1804845f96fcd585ddce6713fa06045d479",
            "file": "src/app/services/snackbar/snackbar.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "okToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SnackbarService {\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  public okToast(message: string) {\r\n    this.snackBar.open(message, 'OK', { duration: 4000 });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StatusService",
            "id": "injectable-StatusService-cb366dc14da2d0044551b5ee685fa0c610bf5b54954773540d9656884dda24f67a3f083864513fbbec908dae333e50fd2809db422ccae7c65d13ca48876ccf6a",
            "file": "src/app/services/status/status.service.ts",
            "properties": [
                {
                    "name": "bodyState",
                    "defaultValue": "ControllerStatus.down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "bodyStateObserver",
                    "defaultValue": "new Subject<ControllerStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ControllerStatus>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "coreState",
                    "defaultValue": "ControllerStatus.down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coreStateObserver",
                    "defaultValue": "new Subject<ControllerStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ControllerStatus>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "domeState",
                    "defaultValue": "ControllerStatus.down",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "domeStateObserver",
                    "defaultValue": "new Subject<ControllerStatus>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ControllerStatus>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "getBodyStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "ControllerStatus",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCoreStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "ControllerStatus",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDomeStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "ControllerStatus",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subject",
                            "type": "Subject<ControllerStatus>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subject",
                            "type": "Subject<ControllerStatus>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusUpdate",
                    "args": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "StatusResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ControllerStatus, AstrOsConstants, StatusResponse, TransmissionType } from 'astros-common';\r\nimport { Subject } from 'rxjs';\r\nimport { WebsocketService } from '../websocket/websocket.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StatusService {\r\n\r\n  private coreState: ControllerStatus = ControllerStatus.down;\r\n  coreStateObserver: Subject<ControllerStatus> = new Subject<ControllerStatus>();\r\n\r\n  private domeState: ControllerStatus = ControllerStatus.down;\r\n  domeStateObserver: Subject<ControllerStatus> = new Subject<ControllerStatus>();\r\n\r\n  private bodyState: ControllerStatus = ControllerStatus.down;\r\n  bodyStateObserver: Subject<ControllerStatus> = new Subject<ControllerStatus>();\r\n\r\n  constructor(private socket: WebsocketService) {\r\n\r\n    console.log('status started...')\r\n    this.socket.messages.subscribe((msg: unknown) => {\r\n      \r\n      if (msg && typeof msg === 'object' && 'type' in msg) \r\n      if (msg.type === TransmissionType.status) {\r\n        this.statusUpdate(msg as StatusResponse);\r\n      }\r\n\r\n    });\r\n\r\n    this.coreStateObserver.subscribe((value) => { this.coreState = value });\r\n    this.domeStateObserver.subscribe((value) => { this.domeState = value });\r\n    this.bodyStateObserver.subscribe((value) => { this.bodyState = value });\r\n  }\r\n\r\n\r\n  resetStatus() {\r\n    this.coreState = ControllerStatus.down;\r\n    this.domeState = ControllerStatus.down;\r\n    this.bodyState = ControllerStatus.down;\r\n    this.coreStateObserver.next(this.coreState);\r\n    this.domeStateObserver.next(this.domeState);\r\n    this.bodyStateObserver.next(this.bodyState);\r\n  }\r\n\r\n  getCoreStatus(): ControllerStatus {\r\n    return this.coreState;\r\n  }\r\n\r\n  getDomeStatus(): ControllerStatus {\r\n    return this.domeState;\r\n  }\r\n\r\n  getBodyStatus(): ControllerStatus {\r\n    return this.bodyState;\r\n  }\r\n\r\n  statusUpdate(status: StatusResponse) {\r\n    {\r\n      switch (status.controllerLocation) {\r\n        case AstrOsConstants.CORE:\r\n          this.setStatus(status, this.coreStateObserver);\r\n          break;\r\n        case AstrOsConstants.DOME:\r\n          this.setStatus(status, this.domeStateObserver);\r\n          break;\r\n        case AstrOsConstants.BODY:\r\n          this.setStatus(status, this.bodyStateObserver);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  setStatus(status: StatusResponse, subject: Subject<ControllerStatus>) {\r\n    if (!status.up) {\r\n      subject.next(ControllerStatus.down);\r\n    } else if (!status.synced) {\r\n      subject.next(ControllerStatus.needsSynced);\r\n    } else {\r\n      subject.next(ControllerStatus.up);\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WebsocketService",
            "id": "injectable-WebsocketService-aa61b846bab0014ad5dd3a9247455683a95c50a355bab25298451dc3ed1ab1f916f58a16b5649e9e061bbc801fd1e65a814a496cee7b26394d54dbcbf281701f",
            "file": "src/app/services/websocket/websocket.service.ts",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "webSocket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebSocketSubject<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebsocketService {\r\n\r\n  webSocket: WebSocketSubject<unknown>;\r\n\r\n  public messages: Observable<unknown>\r\n\r\n\r\n  constructor() {\r\n\r\n    this.webSocket = webSocket('ws://' + window.location.hostname + ':5000');\r\n    this.messages = this.webSocket.asObservable();\r\n  }\r\n\r\n  public sendMessage(msg: unknown) {\r\n    this.webSocket.next(msg);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AlertModalResources",
            "id": "class-AlertModalResources-ec79615bb5f8c27f646a6a09c6852cbe7bff567a6a2f22e8789fca04f172572f518873e6b0ee41fceb7af4fe9c74a4e4d8286dc751203df79b533eb76f60267c",
            "file": "src/app/components/modals/alert-modal/alert-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, } from '../modal-base/modal-base.component'; import { ModalCallbackEvent } from '../modal-base/modal-callback-event';\r\n\r\nexport class AlertModalResources {\r\n  public static message: string = 'message';\r\n  public static closeEvent: string = 'alert_closeEvent';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert-modal',\r\n  templateUrl: './alert-modal.component.html',\r\n  styleUrl: './alert-modal.component.scss'\r\n})\r\nexport class AlertModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  message!: string;\r\n  closeEvent!: unknown;\r\n\r\n  constructor() { super() }\r\n\r\n  ngOnInit(): void {\r\n    this.message = this.resources.get(AlertModalResources.message) as string;\r\n    this.closeEvent = this.resources.get(AlertModalResources.closeEvent);\r\n  }\r\n\r\n  closeModal() {\r\n    const evt = new ModalCallbackEvent(\r\n      AlertModalResources.closeEvent, \r\n      this.closeEvent\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'alert_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "'message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AudioEventModalResources",
            "id": "class-AudioEventModalResources-0fd8bbc10877500245998434d4668751e3b4ff42f3c2c5b10f195f169da6a0099a6aab3472e6dd7dd19fe9af3d6c8d9a764cc0b83c3efb59b6f6aa02dc7f6ef9",
            "file": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AudioFile, ScriptEvent } from 'astros-common';\r\nimport { AudioService } from 'src/app/services/audio/audio.service';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class AudioEventModalResources {\r\n  public static audioFiles = 'audioFiles';\r\n  public static selectedFile = 'selectedFile';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-audio-event-modal',\r\n    templateUrl: './audio-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './audio-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, NgFor, DecimalPipe]\r\n})\r\nexport class AudioEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  audioFiles: AudioFile[];\r\n\r\n  selectedFile: string;\r\n\r\n  constructor(private audioService: AudioService) { \r\n    super();\r\n    this.audioFiles = new Array<AudioFile>();\r\n    this.selectedFile = '0';\r\n\r\n    const observer = {\r\n      next: (result: AudioFile[]) => this.audioFiles = result,\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.audioService.getAudioFiles().subscribe(observer);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(ScriptEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.selectedFile = payload.value;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  addEvent(){\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n    this.scriptEvent.dataJson = JSON.stringify({value: this.selectedFile});\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        id: this.callbackType,\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "audioFiles",
                    "defaultValue": "'audioFiles'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "'selectedFile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChannelTestModalResources",
            "id": "class-ChannelTestModalResources-77a4059886ef66d051b18bf62614526a4461e5119f3618343f88ece497884b07c24161885d4a291802bf92fbe0580763c5d550f761c4be847f03d54574cf5222",
            "file": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChannelSubType, ChannelType, KangarooAction } from 'astros-common';\r\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\r\nimport { NgIf } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class ChannelTestModalResources {\r\n  public static controller = 'controller';\r\n  public static channelType = 'channelType';\r\n  public static channelSubType = 'channelSubType';\r\n  public static channelId = 'channelId';\r\n\r\n  public static channelTest = 'channelTest_test';\r\n}\r\n\r\nexport interface ChannelTestModalResponse {\r\n  controllerId: number;\r\n  commandType: ChannelType;\r\n  command: unknown;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-channel-test-modal',\r\n    templateUrl: './channel-test-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './channel-test-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgIf, FormsModule]\r\n})\r\nexport class ChannelTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  controllerId = 0;\r\n  channelId = 0;\r\n\r\n  channelType: ChannelType = ChannelType.none;\r\n  channelSubType: ChannelSubType = ChannelSubType.none;\r\n\r\n  speed = 1;\r\n  position = 0;\r\n  value = '';\r\n\r\n  kangarooCh = 1;\r\n  kangarooAction = 1;\r\n  kangarooSpd?: number;\r\n  kangarooPos?: number;\r\n  spdDisabled = true;\r\n  posDisabled = true;\r\n\r\n  gpioLevel = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.callbackType = ChannelTestModalResources.channelTest;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.controllerId = this.resources.get(ChannelTestModalResources.controller) as number;\r\n    this.channelType = this.resources.get(ChannelTestModalResources.channelType) as ChannelType;\r\n    this.channelSubType = this.resources.get(ChannelTestModalResources.channelSubType) as ChannelSubType\r\n    this.channelId = this.resources.get(ChannelTestModalResources.channelId) as number;\r\n  }\r\n\r\n  runClicked() {\r\n    const evt = new ModalCallbackEvent(\r\n      ChannelTestModalResources.channelTest,\r\n      {\r\n        controllerId: this.controllerId,\r\n        commandType: this.channelType,\r\n        command: this.getCommand()  \r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  getCommand(): any {\r\n    switch (this.channelType) {\r\n      case ChannelType.i2c:\r\n        return { id: this.channelId, val: this.value };\r\n      //case ChannelType.servo:\r\n      //  return { id: this.channelId, position: this.position, speed: this.speed };\r\n      case ChannelType.uart:\r\n        if (this.channelSubType === ChannelSubType.kangaroo) {\r\n          return { val: this.getKangarooCommand() };\r\n        } else {\r\n          return { val: this.value };\r\n        }\r\n      case ChannelType.gpio:\r\n        return { id: this.channelId, val: this.gpioLevel };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  selectChange($event: any) {\r\n    if ($event.target.id === 'cmdselect') {\r\n\r\n      this.spdDisabled = +this.kangarooAction !== 3 && +this.kangarooAction !== 4;\r\n      this.posDisabled = +this.kangarooAction !== 4;\r\n\r\n      if (+this.kangarooAction !== 3 && +this.kangarooAction !== 4) {\r\n        this.kangarooSpd = 0;\r\n      }\r\n      if (+this.kangarooAction !== 4) {\r\n        this.kangarooPos = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  getKangarooCommand(): string {\r\n\r\n    let cmd = '';\r\n\r\n    switch (+this.kangarooAction) {\r\n      case KangarooAction.start:\r\n        cmd = 'start'\r\n        break;\r\n      case KangarooAction.home:\r\n        cmd = 'home'\r\n        break;\r\n      case KangarooAction.speed:\r\n        cmd = `s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`\r\n        break;\r\n      case KangarooAction.position:\r\n        cmd = `p${this.kangarooPos === undefined ? 0 : this.kangarooPos} s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`\r\n        break;\r\n    }\r\n\r\n    return `${this.kangarooCh},${cmd}`;\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelSubType",
                    "defaultValue": "'channelSubType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelTest",
                    "defaultValue": "'channelTest_test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelType",
                    "defaultValue": "'channelType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controller",
                    "defaultValue": "'controller'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChannelValue",
            "id": "class-ChannelValue-f5e5caad5c5f3de7851264b820d61f43a85e4a03ef8249fcd78e78ca8da19f846d8777078d063348a7a82763c08c438497fdc004ac80243df018b863ea71d9a1",
            "file": "src/app/models/script-resources.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n    ChannelType, \r\n    I2cChannel,  \r\n    Script,\r\n    ControllerLocation,\r\n} from \"astros-common\";\r\n\r\nexport class LocationDetails {\r\n    id: number;\r\n    name: string;\r\n\r\n    constructor(id: number, name: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class ChannelValue {\r\n    available: boolean;\r\n    channel: any\r\n\r\n    constructor(channel: any, available: boolean) {\r\n        this.available = available;\r\n        this.channel = channel;\r\n    }\r\n}\r\n\r\nexport class ScriptResources {\r\n\r\n    private loaded = false;\r\n\r\n    locations: Map<number, LocationDetails>;\r\n\r\n    uartChannels: Map<number, ChannelValue[]>;\r\n\r\n    servoChannels: Map<number, ChannelValue[]>;\r\n\r\n    i2cChannels: Map<number, ChannelValue[]>;\r\n\r\n    gpioChannels: Map<number, ChannelValue[]>;\r\n\r\n    constructor(locations: ControllerLocation[]) {\r\n        this.locations = new Map<number, LocationDetails>();\r\n        this.servoChannels = new Map<number, any[]>();\r\n        this.i2cChannels = new Map<number, any[]>();\r\n        this.uartChannels = new Map<number, any[]>();\r\n        this.gpioChannels = new Map<number, any[]>();\r\n\r\n        locations.forEach(loc => {\r\n\r\n            this.locations.set(loc.id, new LocationDetails(loc.id, loc.locationName));\r\n\r\n            this.i2cChannels.set(loc.id, loc.i2cModule.channels.map((ch: I2cChannel) => new ChannelValue(ch, ch.enabled)));\r\n            this.gpioChannels.set(loc.id, loc.gpioModule.channels.map((ch: any) => new ChannelValue(ch, ch.enabled)));\r\n\r\n            this.uartChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.servoChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.i2cChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.gpioChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n        });\r\n    }\r\n\r\n    applyScript(script: Script): void {\r\n\r\n        script.scriptChannels.forEach(ch => {\r\n            switch (ch.type) {\r\n                case ChannelType.uart:\r\n                    this.provisionChannel(this.uartChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n                case ChannelType.i2c:\r\n                    this.provisionChannel(this.i2cChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n                case ChannelType.audio:\r\n                    this.locations.delete(4);\r\n                    break;\r\n                case ChannelType.gpio:\r\n                    this.provisionChannel(this.gpioChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    getAvailableModules(): Map<number, Map<ChannelType, string>> {\r\n        const result = new Map<number, Map<ChannelType, string>>();\r\n\r\n        for (const ctrl of this.locations.keys()) {\r\n            if (ctrl === 4 || ctrl === 0) {\r\n                continue;\r\n            }\r\n\r\n            result.set(ctrl, this.setModuleValues(ctrl));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getAvailableChannels(): Map<number, Map<ChannelType, ChannelValue[]>> {\r\n        const result = new Map<number, Map<ChannelType, any>>()\r\n\r\n        for (const ctrl of this.locations.keys()) {\r\n            if (ctrl === 4 || ctrl === 0) {\r\n                continue;\r\n            }\r\n\r\n            const vals = new Map<ChannelType, any>();\r\n\r\n            vals.set(ChannelType.i2c, this.i2cChannels.get(ctrl));\r\n            vals.set(ChannelType.uart, this.uartChannels.get(ctrl));\r\n            vals.set(ChannelType.gpio, this.gpioChannels.get(ctrl));\r\n\r\n            result.set(ctrl, vals);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private setModuleValues(_: number): Map<ChannelType, string> {\r\n        const vals = new Map<ChannelType, string>();\r\n\r\n        vals.set(ChannelType.i2c, \"I2C\");\r\n        vals.set(ChannelType.uart, \"Serial\");\r\n        vals.set(ChannelType.gpio, \"GPIO\");\r\n\r\n        return vals;\r\n    }\r\n\r\n    addChannel(controller: number, type: ChannelType, id: number): any {\r\n\r\n        if (controller === 4) {\r\n            this.locations.delete(4);\r\n            return undefined;\r\n        }\r\n\r\n        switch (type) {\r\n            case ChannelType.uart:\r\n                return this.provisionChannel(this.uartChannels, controller, id);\r\n            case ChannelType.i2c:\r\n                return this.provisionChannel(this.i2cChannels, controller, id);\r\n            case ChannelType.gpio:\r\n                return this.provisionChannel(this.gpioChannels, controller, id);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    provisionChannel(map: Map<number, ChannelValue[]>, location: number, id: number) : unknown | undefined {\r\n        const idx = map.get(location)?.findIndex(x => x.channel.id === id);\r\n        if (idx != undefined && idx > -1) {\r\n            this.gpioChannels.get(location)![idx].available = false;\r\n            return this.gpioChannels.get(location)![idx].channel\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    removeChannel(location: number, type: ChannelType, id: number): void {\r\n\r\n        if (location === 4) {\r\n            this.locations.set(4, new LocationDetails(4, 'Audio Playback'))\r\n            return\r\n        }\r\n\r\n        switch (type) {\r\n            case ChannelType.uart:\r\n                this.deprovisionChannel(this.uartChannels, location, id);\r\n                break;\r\n            case ChannelType.i2c:\r\n                this.deprovisionChannel(this.i2cChannels, location, id);\r\n                break;\r\n            case ChannelType.gpio:\r\n                this.deprovisionChannel(this.gpioChannels, location, id);    \r\n                break;\r\n        }\r\n    }\r\n\r\n    deprovisionChannel(map: Map<number, ChannelValue[]>, location: number, id: number): void {\r\n        const idx = map.get(location)?.findIndex(x => x.channel.id === id);\r\n        if (idx !== undefined && idx > -1) {\r\n            map.get(location)![idx].available = true;\r\n        }\r\n    }\r\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "channel",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "available",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "channel",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "available",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "available",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConfirmModalResources",
            "id": "class-ConfirmModalResources-2867cb892306c0482e9665f6dca088ecc6c2c1424ef95e3f6589c06112d3d9e891a16419bf795464f18d3bad5c06d1712ff662973f0dd7917140ff74e23f6fb5",
            "file": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\n\r\nexport class ConfirmModalResources {\r\n  public static action: string = 'action';\r\n  public static message: string = 'message';\r\n  public static confirmEvent: string = 'confirm_confirmEvent';\r\n  public static closeEvent: string = 'confirm_closeEvent';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-astros-confirm-modal',\r\n  templateUrl: './confirm-modal.component.html',\r\n  styleUrls: ['./confirm-modal.component.scss']\r\n})\r\nexport class ConfirmModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  action!: string;\r\n  message!: string;\r\n  confirmEvent!: unknown; \r\n  closeEvent!: unknown;\r\n\r\n  constructor() { super()}\r\n\r\n  ngOnInit(): void {\r\n    this.action = this.resources.get(ConfirmModalResources.action) as string;\r\n    this.message = this.resources.get(ConfirmModalResources.message) as string;\r\n    this.confirmEvent = this.resources.get(ConfirmModalResources.confirmEvent);\r\n    this.closeEvent = this.resources.get(ConfirmModalResources.closeEvent);\r\n  }\r\n\r\n  confirm(){\r\n    const evt = new ModalCallbackEvent(\r\n      ConfirmModalResources.confirmEvent, \r\n      this.confirmEvent\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  closeModal(){\r\n    const evt = new ModalCallbackEvent(\r\n      ConfirmModalResources.closeEvent, \r\n      this.closeEvent\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "action",
                    "defaultValue": "'action'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'confirm_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "confirmEvent",
                    "defaultValue": "'confirm_confirmEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "'message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ControllerModalResources",
            "id": "class-ControllerModalResources-e4bc7b4d3e919662776700231dc8f32d385c1b7fa4b38c53dbbc3cfb3f61466c0793da56a3027457676b1e9d42ad2c07ce1b99136abf45a955dd275c1a16d9d9",
            "file": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChannelType } from 'astros-common';\r\nimport { ChannelValue, LocationDetails } from 'src/app/models/script-resources';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, NgIf, KeyValuePipe } from '@angular/common';\r\n\r\nexport class ControllerModalResources {\r\n  public static controllers: string = 'controllers';\r\n  public static modules: string = 'modules';\r\n  public static channels: string = 'channels';\r\n\r\n  public static addChannelEvent: string = 'controller_addChannel';\r\n  public static closeEvent: string = 'controller_close';\r\n}\r\n\r\nexport interface ControllerModalResponse {\r\n  controller: number;\r\n  module: ChannelType;\r\n  channels: number[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-controller-modal',\r\n    templateUrl: './controller-modal.component.html',\r\n    styleUrls: ['./controller-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, NgFor, NgIf, KeyValuePipe]\r\n})\r\nexport class ControllerModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  errorMessage: string;\r\n\r\n  controllers!: Map<number, LocationDetails>;\r\n  selectedController = 0;\r\n\r\n  private availableModules!: Map<number, Map<ChannelType, string>>;\r\n  modules: Map<ChannelType, string>\r\n  selectedModule: ChannelType = ChannelType.none;\r\n\r\n  private availableChannels!: Map<number, Map<ChannelType, ChannelValue[]>>;\r\n  channels: ChannelValue[]\r\n  selectedChannel = -1;\r\n  selectedChannels: any[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.errorMessage = '';\r\n\r\n    this.modules = new Map<ChannelType, string>();\r\n    this.channels = new Array<ChannelValue>();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.controllers = this.resources.get(ControllerModalResources.controllers) as Map<number, LocationDetails>;\r\n    this.availableModules = this.resources.get(ControllerModalResources.modules) as Map<number, Map<ChannelType, string>>;\r\n    this.availableChannels = this.resources.get(ControllerModalResources.channels) as Map<number, Map<ChannelType, ChannelValue[]>>;\r\n  }\r\n\r\n  modalChange($event: any) {\r\n    // convert from string value to number for enum\r\n    if ($event.target.id === 'controller-select') {\r\n      this.setModules(+$event.target.value);\r\n    }\r\n    else if ($event.target.id === 'module-select') {\r\n      this.setChannels(+$event.target.value);\r\n    }\r\n  }\r\n\r\n  addChannel() {\r\n\r\n    if (+this.selectedController !== 4\r\n      && +this.selectedModule === ChannelType.none) {\r\n      this.errorMessage = 'Module Selection Required'\r\n      return;\r\n    }\r\n\r\n    if (+this.selectedModule !== ChannelType.none\r\n      && +this.selectedChannels.length < 1) {\r\n      this.errorMessage = 'Channel Selection Required'\r\n      return;\r\n    }\r\n\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      ControllerModalResources.addChannelEvent,\r\n      {\r\n        controller: +this.selectedController,\r\n        module: +this.selectedController === 4 ? ChannelType.audio : +this.selectedModule,\r\n        channels: this.selectedChannels\r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n    this.clearOptions()\r\n  }\r\n\r\n  closeModal() {\r\n    this.clearOptions()\r\n    const evt = new ModalCallbackEvent(\r\n      ControllerModalResources.closeEvent,\r\n      null\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  private clearOptions() {\r\n    this.selectedController = 0;\r\n    this.selectedModule = ChannelType.none;\r\n    this.selectedChannel = -1;\r\n    document.getElementById('module-select')?.setAttribute('disabled', 'disabled');\r\n    document.getElementById('channel-select')?.setAttribute('disabled', 'disabled');\r\n  }\r\n\r\n  private setModules(controllerId: number) {\r\n    if (controllerId === 4) {\r\n      this.selectedModule = ChannelType.none;\r\n      this.selectedChannel = -1;\r\n      document.getElementById('module-select')?.setAttribute('disabled', 'disabled');\r\n      document.getElementById('channel-select')?.setAttribute('disabled', 'disabled')\r\n    }\r\n    else {\r\n      const mods = this.availableModules.get(+this.selectedController);\r\n      if (mods) {\r\n        this.modules = mods;\r\n        document.getElementById('module-select')?.removeAttribute('disabled');\r\n        //this.selectedModule = ChannelType.none;\r\n        this.setChannels(this.selectedModule);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setChannels(channelType: ChannelType) {\r\n\r\n    if (channelType === ChannelType.none) {\r\n      this.selectedChannel = -1;\r\n      document.getElementById('channel-select')?.setAttribute('disabled', 'disabled');\r\n    }\r\n    else {\r\n      const chs = this.availableChannels.get(+this.selectedController)?.get(+channelType);\r\n      if (chs) {\r\n        this.channels = chs;\r\n        document.getElementById('channel-select')?.removeAttribute('disabled');\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "addChannelEvent",
                    "defaultValue": "'controller_addChannel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channels",
                    "defaultValue": "'channels'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'controller_close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controllers",
                    "defaultValue": "'controllers'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "modules",
                    "defaultValue": "'modules'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventMarkerHelper",
            "id": "class-EventMarkerHelper-bf7eba4eefb412681e4fd06315ee508bc4f2e130c3756c194e83c6800456fa6b233a4c7e27727c5775d2e24c10739a66a71890ffc834b62fd832c827e51048f0",
            "file": "src/app/pages/scripter/helper/event-marker-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n    ChannelSubType,\r\n    ChannelType,\r\n    GenericSerialEvent,\r\n    GpioEvent,\r\n    HumanCyborgRelationsEvent,\r\n    I2cEvent,\r\n    KangarooAction,\r\n    KangarooEvent,\r\n    ScriptEvent\r\n} from \"astros-common\";\r\n\r\nexport default class EventMarkerHelper {\r\n    static generateText(event: ScriptEvent): string[] {\r\n\r\n        switch (event.channelType) {\r\n            case ChannelType.audio:\r\n                return this.generateBasicResponse('Audio Track');\r\n            //case ChannelType.servo:\r\n            //    return this.servoText(event.dataJson);\r\n            case ChannelType.i2c:\r\n                return this.i2cText(event.dataJson);\r\n            case ChannelType.gpio:\r\n                return this.gpioText(event.dataJson);\r\n            case ChannelType.uart:\r\n                return this.uartText(event.channelSubType, event.dataJson);\r\n            default:\r\n                return this.generateBasicResponse('error');\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /*private static servoText(json: string): Array<string> {\r\n        const evt = JSON.parse(json) as ServoEvent;\r\n        const result = new Array<string>();\r\n        result[0] = 'Position:';\r\n        result[1] = evt.position.toString();\r\n        result[2] = 'Speed:';\r\n        result[3] = evt.speed.toString();\r\n\r\n        return result;\r\n    }*/\r\n\r\n    private static i2cText(json: string): string[] {\r\n        const evt = JSON.parse(json) as I2cEvent;\r\n        const result = new Array<string>();\r\n        result[0] = '\\u00A0';\r\n        result[1] = 'Message:'\r\n        result[2] = evt.message;\r\n        result[3] = '';\r\n\r\n        return result\r\n    }\r\n\r\n    private static gpioText(json: string): string[] {\r\n        const evt = JSON.parse(json) as GpioEvent;\r\n        const result = new Array<string>();\r\n        result[0] = '\\u00A0';\r\n        result[1] = 'State:';\r\n        result[2] = evt.setHigh ? 'High' : 'Low';\r\n        result[3] = '';\r\n\r\n        return result\r\n    }\r\n\r\n    private static uartText(subType: ChannelSubType, json: string): string[] {\r\n\r\n        switch (subType) {\r\n            case ChannelSubType.genericSerial:\r\n                return this.genericUart(json);\r\n            case ChannelSubType.kangaroo:\r\n                return this.kangaroo(json);\r\n            case ChannelSubType.humanCyborgRelations:\r\n                return this.humanCyborg(json);\r\n            default: \r\n                return this.generateBasicResponse('error');\r\n        }\r\n    }\r\n\r\n    private static genericUart(json: string): string[] {\r\n        const evt = JSON.parse(json) as GenericSerialEvent;\r\n        const result = new Array<string>();\r\n        result[0] = '\\u00A0';\r\n        result[1] = 'Message:';\r\n        result[2] = evt.value;\r\n        result[3] = '';\r\n\r\n        return result\r\n    }\r\n\r\n    static kangaroo(json: string): string[] {\r\n        const evt = JSON.parse(json) as KangarooEvent;\r\n        const result = new Array<string>();\r\n        result[0] = 'CH 1:';\r\n        result[1] = this.getKangarooActionName(evt.ch1Action);\r\n        result[2] = 'CH 2:';\r\n        result[3] = this.getKangarooActionName(evt.ch2Action);\r\n\r\n        return result\r\n    }\r\n\r\n    static getKangarooActionName(action: KangarooAction): string {\r\n        switch (action) {\r\n            case KangarooAction.start:\r\n                return 'Start';\r\n            case KangarooAction.home:\r\n                return 'Home';\r\n            case KangarooAction.position:\r\n                return 'Position';\r\n            case KangarooAction.speed:\r\n                return 'Speed';\r\n            case KangarooAction.none:\r\n                return 'None';\r\n            default:\r\n                return 'error';\r\n        }\r\n    }\r\n\r\n    static humanCyborg(json: string): string[] {\r\n        const evt = JSON.parse(json) as HumanCyborgRelationsEvent;\r\n        const result = new Array<string>();\r\n        result[0] = '';\r\n        result[1] = 'Event Count';\r\n        result[2] = evt.commands.length.toString();\r\n        result[3] = '';\r\n\r\n        return result;\r\n    }\r\n\r\n    static generateBasicResponse(val: string): string[] {\r\n        const result = [];\r\n        result[0] = '\\u00A0';\r\n        result[1] = val;\r\n        result[2] = '';\r\n        result[3] = '';\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "generateBasicResponse",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateText",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "genericUart",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKangarooActionName",
                    "args": [
                        {
                            "name": "action",
                            "type": "KangarooAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "KangarooAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gpioText",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "humanCyborg",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "i2cText",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "kangaroo",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uartText",
                    "args": [
                        {
                            "name": "subType",
                            "type": "ChannelSubType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "subType",
                            "type": "ChannelSubType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FileUpload",
            "id": "class-FileUpload-a1c3aa81d4fe0bbcbd701b924469e7129cda0fb3a2eefac93b0bc6102d8195a99a129eab4a7d5538b0adb4c543747404c8ac7ccc5795afc9fc6c28cb2fd39bff",
            "file": "src/app/models/upload-file.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Subscription } from \"rxjs\";\r\n\r\nexport class  FileUpload {\r\n\r\n    fileData: any;\r\n    uploadProgress?:number;\r\n    subscription?: Subscription;\r\n\r\n    constructor(file: any) {\r\n        this.uploadProgress = 0;\r\n        this.fileData = file;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "file",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "file",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "fileData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "uploadProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GpioEventModalResources",
            "id": "class-GpioEventModalResources-7f04991a5bd2cbd5233a72ee623e9d03615abc1aade84fa1c75b8fb96e946175d186ad3e9e12d8d13dd6bdd4fe807c85e8941823618ab0663d182b5c45db5aeb",
            "file": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { GpioEvent, ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class GpioEventModalResources {\r\n  public static gpioId = 'gpioId';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-gpio-event-modal',\r\n    templateUrl: './gpio-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './gpio-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class GpioEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  channelId!: number;\r\n  state = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(ScriptEventModalResources.scriptEvent) as ScriptEvent;\r\n\r\n    this.channelId = this.resources.get(GpioEventModalResources.gpioId) as number;\r\n\r\n    if (this.scriptEvent.dataJson != '') {\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.state = payload.setHigh ? 1 : 0;\r\n    }\r\n\r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  selectChange($event: any) {\r\n    this.state = $event.target.value;\r\n  }\r\n\r\n  addEvent() {\r\n\r\n    if (+this.eventTime > this.maxTime) {\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\r\n      return;\r\n    }\r\n\r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n\r\n    const data = new GpioEvent(+this.channelId, +this.state === 1 ? true : false);\r\n\r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime\r\n      },\r\n    );\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "gpioId",
                    "defaultValue": "'gpioId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HcrModalResources",
            "id": "class-HcrModalResources-ab4604c932fe3bc7b37f7a5d85db93db78b096a28ae98b0ad8744ac17ab88ab47296d3813b32fe0ffe60e76e81f8e7aa8d065d124ab2bdbe2454f3a2effd0621",
            "file": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  BaseEventModalComponent, \r\n  ScriptEventModalResources \r\n} from '../base-event-modal/base-event-modal.component';\r\nimport { \r\n  HcrCommand, \r\n  HcrCommandCategory, \r\n  HumanCyborgRelationsCmd, \r\n  HumanCyborgRelationsEvent, \r\n  HumanCyborgRelationsModule, \r\n  ScriptEvent\r\n} from 'astros-common';\r\nimport { faBan } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, DecimalPipe } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\n\r\nexport class HcrModalResources {\r\n  public static channelId = 'channelId';\r\n  public static baudRate = 'baudRate';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-human-cyborg-modal',\r\n  templateUrl: './human-cyborg-modal.component.html',\r\n  styleUrls: ['../base-event-modal/base-event-modal.component.scss', './human-cyborg-modal.component.scss'],\r\n  standalone: true,\r\n  imports: [FormsModule, NgFor, FontAwesomeModule, DecimalPipe]\r\n})\r\nexport class HumanCyborgModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  faRemove = faBan;\r\n\r\n  uartChannel!: number;\r\n  baudRate!: number;\r\n  commandCategory: string;\r\n  command!: string;\r\n  valueA!: string;\r\n  valueB!: string;\r\n\r\n  selectedCommands: HcrCommand[];\r\n  commands: any[];\r\n\r\n  hasValueA: HumanCyborgRelationsCmd[];\r\n  hasValueB: HumanCyborgRelationsCmd[];\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n\r\n    this.selectedCommands = new Array<HcrCommand>();\r\n    this.commands = new Array<any>();\r\n    this.commandCategory = HcrCommandCategory.stimuli.toString();\r\n    this.setAvailableCommands(+this.commandCategory);\r\n\r\n    this.hasValueA = new Array<HumanCyborgRelationsCmd>();\r\n    this.hasValueA.push(\r\n      HumanCyborgRelationsCmd.minSecondsBetweenMusings,\r\n      HumanCyborgRelationsCmd.maxSecondsBetweenMusings,\r\n      HumanCyborgRelationsCmd.playWavOnA,\r\n      HumanCyborgRelationsCmd.playWavOnB,\r\n      HumanCyborgRelationsCmd.vocalizerVolume,\r\n      HumanCyborgRelationsCmd.wavAVolume,\r\n      HumanCyborgRelationsCmd.wavBVolume,\r\n      HumanCyborgRelationsCmd.setHappyLevel,\r\n      HumanCyborgRelationsCmd.setSadLevel,\r\n      HumanCyborgRelationsCmd.setMadLevel,\r\n      HumanCyborgRelationsCmd.setScaredLevel\r\n    );\r\n\r\n    this.hasValueB = new Array<HumanCyborgRelationsCmd>();\r\n    this.hasValueB.push(\r\n      HumanCyborgRelationsCmd.playSdRandomOnA,\r\n      HumanCyborgRelationsCmd.playSdRandomOnB\r\n    );\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.uartChannel = this.resources.get(HcrModalResources.channelId) as number;\r\n    this.baudRate = this.resources.get(HcrModalResources.baudRate) as number;\r\n    this.scriptEvent = this.resources.get(HcrModalResources.scriptEvent) as ScriptEvent;\r\n\r\n    if (this.scriptEvent.dataJson != '') {\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.selectedCommands.push(...payload.commands)\r\n    }\r\n\r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  categoryChange(_: unknown) {\r\n    this.errorMessage = '';\r\n    this.setAvailableCommands(+this.commandCategory);\r\n  }\r\n\r\n  commandChange(_: unknown) {\r\n    this.errorMessage = '';\r\n    if (this.hcrHasBValue(+this.command)) {\r\n      document.getElementById('value-a')?.removeAttribute('disabled');\r\n      document.getElementById('value-b')?.removeAttribute('disabled');\r\n      return;\r\n    }\r\n    if (this.hcrHasAValue(+this.command)) {\r\n      document.getElementById('value-a')?.removeAttribute('disabled');\r\n      document.getElementById('value-b')?.setAttribute('disabled', 'disabled');\r\n      return;\r\n    }\r\n\r\n    document.getElementById('value-a')?.setAttribute('disabled', 'disabled');\r\n    document.getElementById('b')?.setAttribute('disabled', 'disabled');\r\n\r\n  }\r\n\r\n  setAvailableCommands(category: HcrCommandCategory) {\r\n    this.commands.splice(0);\r\n\r\n    switch (category) {\r\n      case HcrCommandCategory.stimuli:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildHappy),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeHappy),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildSad),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeSad),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildAngry),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeAngry),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildScared),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeScared),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.overload));\r\n        break;\r\n      case HcrCommandCategory.muse:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enableMuse),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.disableMuse),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.toggleMuse),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.triggerMusing),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.minSecondsBetweenMusings),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.maxSecondsBetweenMusings));\r\n        break;\r\n      case HcrCommandCategory.sdWav:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnA),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnB),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnA),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnB));\r\n        break;\r\n      case HcrCommandCategory.stop:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.panicStop),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.gracefulStop),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnA),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnB));\r\n        break;\r\n      case HcrCommandCategory.volume:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.vocalizerVolume),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.wavAVolume),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.wavBVolume));\r\n        break;\r\n      case HcrCommandCategory.override:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enableImprov),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enableCanonical),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enablePersonalityOverride),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.disablePersonalityOverride),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.zeroEmotions),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setHappyLevel),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setSadLevel),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setMadLevel),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setScaredLevel));\r\n        break;\r\n    }\r\n\r\n    if (this.commands.length > 0) {\r\n      this.command = this.commands[0];\r\n    }\r\n  }\r\n\r\n  addCommand() {\r\n\r\n    let missingA = false;\r\n    let missingB = false;\r\n\r\n    if (this.hcrHasBValue(+this.command)) {\r\n      if (this.valueA === undefined || this.valueA === null) {\r\n        missingA = true;\r\n      }\r\n      if (this.valueB === undefined || this.valueB === null) {\r\n        missingB = true;\r\n      }\r\n    }\r\n\r\n    if (this.hcrHasAValue(+this.command)) {\r\n      if (this.valueA === undefined || this.valueA === null) {\r\n        missingA = true;\r\n      }\r\n    }\r\n\r\n    if (missingA || missingB) {\r\n      this.errorMessage = `Required Values Missing: ${missingA ? 'A' : ''}${missingA && missingB ? ',' : ''}${missingB ? 'B' : ''}`;\r\n      return;\r\n    }\r\n\r\n    this.selectedCommands.push(new HcrCommand(crypto.randomUUID().toString(), +this.commandCategory, +this.command, +this.valueA, +this.valueB));\r\n  }\r\n\r\n\r\n  removeCommand(id: string) {\r\n    const cmdIdx = this.selectedCommands?.findIndex(x => x.id === id);\r\n    if (cmdIdx != undefined && cmdIdx > -1) {\r\n      this.selectedCommands.splice(cmdIdx, 1);\r\n    }\r\n  }\r\n\r\n  addEvent() {\r\n\r\n    if (+this.eventTime > this.maxTime) {\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\r\n      return;\r\n    }\r\n\r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n\r\n    const data = new HumanCyborgRelationsEvent(this.uartChannel, this.baudRate, this.selectedCommands);\r\n\r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime\r\n      },\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  formatSelectedCommand(cmd: HcrCommand) {\r\n\r\n    if (this.hcrHasBValue(cmd.command)) {\r\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA} ${cmd.valueB}`\r\n    }\r\n\r\n    if (this.hcrHasAValue(cmd.command)) {\r\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA}`\r\n    }\r\n\r\n    return this.hcrName(cmd.command)\r\n  }\r\n\r\n  hcrListItem(cmd: HumanCyborgRelationsCmd) {\r\n    return { id: cmd, name: this.hcrName(cmd) }\r\n  }\r\n\r\n  hcrName(cmd: HumanCyborgRelationsCmd) {\r\n    return HumanCyborgRelationsModule.getCommandName(cmd);\r\n  }\r\n\r\n  hcrHasBValue(cmd: HumanCyborgRelationsCmd) {\r\n    return this.hasValueB.find(x => x === cmd) !== undefined\r\n  }\r\n\r\n  hcrHasAValue(cmd: HumanCyborgRelationsCmd) {\r\n    return this.hasValueA.find(x => x === cmd) !== undefined\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "baudRate",
                    "defaultValue": "'baudRate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "I2cEventModalResources",
            "id": "class-I2cEventModalResources-956fa8e69ffbc78eaf1b365697393771bbb054213d503f0071120d4bf261d2868db1afc2dc34af34af15b1e64f2bd1a6d2c2ae1e7f52724205287d8bbf7e3906",
            "file": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { I2cEvent, ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class I2cEventModalResources {\r\n  public static i2cId = 'i2cId';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-i2c-event-modal',\r\n    templateUrl: './i2c-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './i2c-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class I2cEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n \r\n  channelId!: number;\r\n  message: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.message = '';\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(I2cEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    this.channelId = this.resources.get(I2cEventModalResources.i2cId) as number;\r\n\r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.message= payload.message;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n    \r\n    const data = new I2cEvent( +this.channelId, this.message);\r\n    \r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "i2cId",
                    "defaultValue": "'i2cId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "KangarooEventModalResources",
            "id": "class-KangarooEventModalResources-3f70d64487132c5a294df448771f609f20c7a45a1d1ee69fbfcb9eea3d25e810741a4e4e932e74463ee489240531fb988942ddc7bdf0dda48d9b19e0fafd769e",
            "file": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  KangarooAction, \r\n  KangarooX2, \r\n  KangarooEvent, \r\n  ScriptEvent \r\n} from 'astros-common'\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class KangarooEventModalResources {\r\n  public static channelId = 'channelId';\r\n  public static baudRate = 'baudRate';\r\n  public static kangaroo = 'kangaroo';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-kangaroo-event-modal',\r\n    templateUrl: './kangaroo-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './kangaroo-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class KangarooEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  uartChannel!: number;\r\n  baudRate!: number;\r\n  kangaroo!: KangarooX2;\r\n\r\n  channel1: string;\r\n  ch1Action: string;\r\n  ch1Speed?: number;\r\n  ch1Position?: number;\r\n  ch1SpdDisabled: boolean;\r\n  ch1PosDisabled: boolean;\r\n\r\n  channel2: string;\r\n  ch2Action: string;\r\n  ch2Speed?: number;\r\n  ch2Position?: number;\r\n  ch2SpdDisabled: boolean;\r\n  ch2PosDisabled: boolean;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    \r\n    this.channel1 = 'Channel 1';\r\n    this.channel2 = 'Channel 2';\r\n\r\n    this.ch1Action = '0';\r\n    this.ch2Action = '0';\r\n\r\n    this.ch1SpdDisabled = true;\r\n    this.ch1PosDisabled = true;\r\n\r\n    this.ch2SpdDisabled = true;\r\n    this.ch2PosDisabled = true;\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.uartChannel = this.resources.get(KangarooEventModalResources.channelId) as number;\r\n    this.baudRate = this.resources.get(KangarooEventModalResources.baudRate) as number;\r\n    this.kangaroo = this.resources.get(KangarooEventModalResources.kangaroo) as KangarooX2;\r\n\r\n    this.scriptEvent = this.resources.get(KangarooEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.ch1Action = payload.ch1Action.toString();\r\n      this.ch1Speed = payload.ch1Speed;\r\n      this.ch1Position = payload.ch1Position;\r\n\r\n      this.ch2Action = payload.ch2Action.toString();\r\n      this.ch2Speed = payload.ch2Speed;\r\n      this.ch2Position = payload.ch2Position;\r\n    }\r\n    \r\n    this.ch1SpdDisabled = +this.ch1Action !== KangarooAction.speed && +this.ch1Action !== KangarooAction.position;\r\n    this.ch1PosDisabled = +this.ch1Action !== KangarooAction.position;\r\n\r\n    this.ch2SpdDisabled = +this.ch2Action !== KangarooAction.speed && +this.ch2Action !== KangarooAction.position;\r\n    this.ch2PosDisabled = +this.ch2Action !== KangarooAction.position;\r\n    \r\n\r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  modalChange($event: any) {\r\n    if ($event.target.id === 'ch1select') {\r\n    \r\n      this.ch1SpdDisabled  = +this.ch1Action !== 3 && +this.ch1Action !== 4;\r\n      this.ch1PosDisabled = +this.ch1Action !== 4;\r\n\r\n      if (+this.ch1Action !== 3 && +this.ch1Action !== 4){\r\n        this.ch1Speed = undefined;\r\n      }\r\n      if (+this.ch1Action !== 4){\r\n        this.ch1Position = undefined;\r\n      } \r\n    }\r\n    else if ($event.target.id === 'ch2select') {\r\n\r\n      this.ch2SpdDisabled  = +this.ch2Action !== 3 && +this.ch2Action !== 4;\r\n      this.ch2PosDisabled = +this.ch2Action !== 4;\r\n\r\n      if (+this.ch2Action !== 3 && +this.ch2Action !== 4){\r\n        this.ch2Speed = undefined;\r\n      }\r\n      if (+this.ch2Action !== 4){\r\n        this.ch2Position = undefined;\r\n      } \r\n    }\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n   \r\n    const data = new KangarooEvent(this.uartChannel, this.baudRate, +this.ch1Action, this.ch1Speed ?? 0, this.ch1Position ?? 0, \r\n      +this.ch2Action, this.ch2Speed ?? 0, this.ch2Position ?? 0)\r\n   \r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "baudRate",
                    "defaultValue": "'baudRate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "kangaroo",
                    "defaultValue": "'kangaroo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadingModalResources",
            "id": "class-LoadingModalResources-31bf043342fe134972cea03a8500285802753d20bc69acbb37730baf58525fdbb30b68f6821450d79722acaa3223503cb40d7221892f26e55ffbb54b6dd7d002",
            "file": "src/app/components/modals/loading-modal/loading-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseEventModalComponent } from '../scripting/base-event-modal/base-event-modal.component';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { AstrOsLocationCollection, ControllersResponse, TransmissionType } from 'astros-common';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport class LoadingModalResources {\r\n  public static closeEvent: string = 'loading_closeEvent';\r\n}\r\n\r\nexport interface LoadingModalResponse {\r\n  controllers: unknown[];\r\n  locations: unknown[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-loading-modal',\r\n    templateUrl: './loading-modal.component.html',\r\n    styleUrls: ['./loading-modal.component.scss'],\r\n    standalone: true\r\n})\r\nexport class LoadingModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  subscription!: Subscription;\r\n\r\n  message = \"Loading Controllers...\";\r\n  controllersMsg = TransmissionType.controllers;\r\n  locations!: AstrOsLocationCollection;\r\n  controllers!: ControllersResponse;\r\n\r\n  locationsLoaded = false;\r\n  controllersLoaded = false;\r\n\r\n  disableButton = true;\r\n\r\n  constructor(private socket: WebsocketService,\r\n    private controllerService: ControllerService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    const locationsObserver = {\r\n      next: (result: any) => {\r\n        this.locations = result;\r\n        this.locationsLoaded = true;\r\n        this.controllersLoaded = true;\r\n        this.controllers = { success: true, controllers: [] , type: TransmissionType.controllers, message: \"\" };\r\n        this.checkLoadedState();\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.getLoadedLocations().subscribe(locationsObserver);\r\n\r\n    return;\r\n    const observer = {\r\n      next: (_: any) => { \r\n        console.log(\"Synced controllers\");\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.syncControllers().subscribe(observer);\r\n\r\n    this.subscription = this.socket.messages.subscribe((msg: any) => {\r\n      if (msg.type === this.controllersMsg) {\r\n        this.controllers = msg as ControllersResponse;\r\n        this.controllersLoaded = true;\r\n        this.checkLoadedState();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkLoadedState() {\r\n    if (this.locationsLoaded && this.controllersLoaded) {\r\n      if (this.controllers.success) {\r\n        this.closeModal();\r\n      } else {\r\n        this.disableButton = false;\r\n        this.message = \"Failed to load controllers, using cached values.\";\r\n      }\r\n    }\r\n  }\r\n\r\n  override closeModal(): void {\r\n    //this.subscription.unsubscribe();\r\n    const evt = new ModalCallbackEvent(\r\n      LoadingModalResources.closeEvent,\r\n      { \r\n        controllers: this.controllers.controllers, \r\n        locations: this.locations \r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'loading_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LocationDetails",
            "id": "class-LocationDetails-f5e5caad5c5f3de7851264b820d61f43a85e4a03ef8249fcd78e78ca8da19f846d8777078d063348a7a82763c08c438497fdc004ac80243df018b863ea71d9a1",
            "file": "src/app/models/script-resources.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n    ChannelType, \r\n    I2cChannel,  \r\n    Script,\r\n    ControllerLocation,\r\n} from \"astros-common\";\r\n\r\nexport class LocationDetails {\r\n    id: number;\r\n    name: string;\r\n\r\n    constructor(id: number, name: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class ChannelValue {\r\n    available: boolean;\r\n    channel: any\r\n\r\n    constructor(channel: any, available: boolean) {\r\n        this.available = available;\r\n        this.channel = channel;\r\n    }\r\n}\r\n\r\nexport class ScriptResources {\r\n\r\n    private loaded = false;\r\n\r\n    locations: Map<number, LocationDetails>;\r\n\r\n    uartChannels: Map<number, ChannelValue[]>;\r\n\r\n    servoChannels: Map<number, ChannelValue[]>;\r\n\r\n    i2cChannels: Map<number, ChannelValue[]>;\r\n\r\n    gpioChannels: Map<number, ChannelValue[]>;\r\n\r\n    constructor(locations: ControllerLocation[]) {\r\n        this.locations = new Map<number, LocationDetails>();\r\n        this.servoChannels = new Map<number, any[]>();\r\n        this.i2cChannels = new Map<number, any[]>();\r\n        this.uartChannels = new Map<number, any[]>();\r\n        this.gpioChannels = new Map<number, any[]>();\r\n\r\n        locations.forEach(loc => {\r\n\r\n            this.locations.set(loc.id, new LocationDetails(loc.id, loc.locationName));\r\n\r\n            this.i2cChannels.set(loc.id, loc.i2cModule.channels.map((ch: I2cChannel) => new ChannelValue(ch, ch.enabled)));\r\n            this.gpioChannels.set(loc.id, loc.gpioModule.channels.map((ch: any) => new ChannelValue(ch, ch.enabled)));\r\n\r\n            this.uartChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.servoChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.i2cChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.gpioChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n        });\r\n    }\r\n\r\n    applyScript(script: Script): void {\r\n\r\n        script.scriptChannels.forEach(ch => {\r\n            switch (ch.type) {\r\n                case ChannelType.uart:\r\n                    this.provisionChannel(this.uartChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n                case ChannelType.i2c:\r\n                    this.provisionChannel(this.i2cChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n                case ChannelType.audio:\r\n                    this.locations.delete(4);\r\n                    break;\r\n                case ChannelType.gpio:\r\n                    this.provisionChannel(this.gpioChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    getAvailableModules(): Map<number, Map<ChannelType, string>> {\r\n        const result = new Map<number, Map<ChannelType, string>>();\r\n\r\n        for (const ctrl of this.locations.keys()) {\r\n            if (ctrl === 4 || ctrl === 0) {\r\n                continue;\r\n            }\r\n\r\n            result.set(ctrl, this.setModuleValues(ctrl));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getAvailableChannels(): Map<number, Map<ChannelType, ChannelValue[]>> {\r\n        const result = new Map<number, Map<ChannelType, any>>()\r\n\r\n        for (const ctrl of this.locations.keys()) {\r\n            if (ctrl === 4 || ctrl === 0) {\r\n                continue;\r\n            }\r\n\r\n            const vals = new Map<ChannelType, any>();\r\n\r\n            vals.set(ChannelType.i2c, this.i2cChannels.get(ctrl));\r\n            vals.set(ChannelType.uart, this.uartChannels.get(ctrl));\r\n            vals.set(ChannelType.gpio, this.gpioChannels.get(ctrl));\r\n\r\n            result.set(ctrl, vals);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private setModuleValues(_: number): Map<ChannelType, string> {\r\n        const vals = new Map<ChannelType, string>();\r\n\r\n        vals.set(ChannelType.i2c, \"I2C\");\r\n        vals.set(ChannelType.uart, \"Serial\");\r\n        vals.set(ChannelType.gpio, \"GPIO\");\r\n\r\n        return vals;\r\n    }\r\n\r\n    addChannel(controller: number, type: ChannelType, id: number): any {\r\n\r\n        if (controller === 4) {\r\n            this.locations.delete(4);\r\n            return undefined;\r\n        }\r\n\r\n        switch (type) {\r\n            case ChannelType.uart:\r\n                return this.provisionChannel(this.uartChannels, controller, id);\r\n            case ChannelType.i2c:\r\n                return this.provisionChannel(this.i2cChannels, controller, id);\r\n            case ChannelType.gpio:\r\n                return this.provisionChannel(this.gpioChannels, controller, id);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    provisionChannel(map: Map<number, ChannelValue[]>, location: number, id: number) : unknown | undefined {\r\n        const idx = map.get(location)?.findIndex(x => x.channel.id === id);\r\n        if (idx != undefined && idx > -1) {\r\n            this.gpioChannels.get(location)![idx].available = false;\r\n            return this.gpioChannels.get(location)![idx].channel\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    removeChannel(location: number, type: ChannelType, id: number): void {\r\n\r\n        if (location === 4) {\r\n            this.locations.set(4, new LocationDetails(4, 'Audio Playback'))\r\n            return\r\n        }\r\n\r\n        switch (type) {\r\n            case ChannelType.uart:\r\n                this.deprovisionChannel(this.uartChannels, location, id);\r\n                break;\r\n            case ChannelType.i2c:\r\n                this.deprovisionChannel(this.i2cChannels, location, id);\r\n                break;\r\n            case ChannelType.gpio:\r\n                this.deprovisionChannel(this.gpioChannels, location, id);    \r\n                break;\r\n        }\r\n    }\r\n\r\n    deprovisionChannel(map: Map<number, ChannelValue[]>, location: number, id: number): void {\r\n        const idx = map.get(location)?.findIndex(x => x.channel.id === id);\r\n        if (idx !== undefined && idx > -1) {\r\n            map.get(location)![idx].available = true;\r\n        }\r\n    }\r\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModalCallbackEvent",
            "id": "class-ModalCallbackEvent-9cad00ccfa1cd1a07e59d1579a64be53c66ee2523e6fd0e7e51357162c3a465d8e49b7bb3f256e4f7336b3d6bdfbe2ea7551448846cdb5ff6bf209b7c5e61f19",
            "file": "src/app/components/modals/modal-base/modal-base.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-modal-base',\r\n  template: '',\r\n  styleUrls: ['./modal-base.component.scss']\r\n})\r\nexport abstract class ModalBaseComponent {\r\n\r\n  @Input()\r\n  resources!: Map<string, unknown>;\r\n\r\n  @Output() modalCallback = new EventEmitter<ModalCallbackEvent>();\r\n}\r\n\r\nexport class ModalCallbackEvent{\r\n  public type: string;\r\n  public value: unknown;\r\n\r\n  constructor(type: string, value: unknown){\r\n      this.type = type;\r\n      this.value = value;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScriptEventModalResources",
            "id": "class-ScriptEventModalResources-41f9556827a68abaad3e9d48be6628fc5f29f258996e14775ce436c91c3d8150a1828e9727434dcd752056ce921cd904d736927c2ea62b8730371ccce7faa8bc",
            "file": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\nimport { ScriptEvent } from 'astros-common';\r\n\r\nexport class ScriptEventModalResources {\r\n  public static scriptEvent: string = 'scriptEvent';\r\n  public static callbackType: string = 'callbackType';\r\n  public static addEvent: string = 'script_addEvent';\r\n  public static editEvent: string = 'script_editEvent';\r\n  public static removeEvent: string = 'script_removeEvent';\r\n  public static closeEvent: string = 'script_closeEvent';\r\n}\r\n\r\nexport interface ScriptEventModalResponse {\r\n  scriptEvent: ScriptEvent;\r\n  time: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-base-event-modal',\r\n  template: '',\r\n  styleUrls: ['./base-event-modal.component.scss'],\r\n  standalone: true\r\n})\r\nexport class BaseEventModalComponent extends ModalBaseComponent {\r\n\r\n  protected scriptEvent!: ScriptEvent;\r\n  protected originalEventTime: number;\r\n  protected callbackType: string;\r\n\r\n  eventTime: number;\r\n  protected maxTime = 3000;\r\n  protected timeFactor = 10;\r\n\r\n  errorMessage: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  removeEvent() {\r\n    const evt = new ModalCallbackEvent(\r\n      ScriptEventModalResources.removeEvent,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  closeModal() {\r\n    const evt = new ModalCallbackEvent(\r\n      ScriptEventModalResources.closeEvent,\r\n      null\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "addEvent",
                    "defaultValue": "'script_addEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "callbackType",
                    "defaultValue": "'callbackType'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "'script_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "editEvent",
                    "defaultValue": "'script_editEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "removeEvent",
                    "defaultValue": "'script_removeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScriptResources",
            "id": "class-ScriptResources-f5e5caad5c5f3de7851264b820d61f43a85e4a03ef8249fcd78e78ca8da19f846d8777078d063348a7a82763c08c438497fdc004ac80243df018b863ea71d9a1",
            "file": "src/app/models/script-resources.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n    ChannelType, \r\n    I2cChannel,  \r\n    Script,\r\n    ControllerLocation,\r\n} from \"astros-common\";\r\n\r\nexport class LocationDetails {\r\n    id: number;\r\n    name: string;\r\n\r\n    constructor(id: number, name: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class ChannelValue {\r\n    available: boolean;\r\n    channel: any\r\n\r\n    constructor(channel: any, available: boolean) {\r\n        this.available = available;\r\n        this.channel = channel;\r\n    }\r\n}\r\n\r\nexport class ScriptResources {\r\n\r\n    private loaded = false;\r\n\r\n    locations: Map<number, LocationDetails>;\r\n\r\n    uartChannels: Map<number, ChannelValue[]>;\r\n\r\n    servoChannels: Map<number, ChannelValue[]>;\r\n\r\n    i2cChannels: Map<number, ChannelValue[]>;\r\n\r\n    gpioChannels: Map<number, ChannelValue[]>;\r\n\r\n    constructor(locations: ControllerLocation[]) {\r\n        this.locations = new Map<number, LocationDetails>();\r\n        this.servoChannels = new Map<number, any[]>();\r\n        this.i2cChannels = new Map<number, any[]>();\r\n        this.uartChannels = new Map<number, any[]>();\r\n        this.gpioChannels = new Map<number, any[]>();\r\n\r\n        locations.forEach(loc => {\r\n\r\n            this.locations.set(loc.id, new LocationDetails(loc.id, loc.locationName));\r\n\r\n            this.i2cChannels.set(loc.id, loc.i2cModule.channels.map((ch: I2cChannel) => new ChannelValue(ch, ch.enabled)));\r\n            this.gpioChannels.set(loc.id, loc.gpioModule.channels.map((ch: any) => new ChannelValue(ch, ch.enabled)));\r\n\r\n            this.uartChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.servoChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.i2cChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n            this.gpioChannels.get(loc.id)?.sort((a, b) => { return a.channel.id - b.channel.id });\r\n        });\r\n    }\r\n\r\n    applyScript(script: Script): void {\r\n\r\n        script.scriptChannels.forEach(ch => {\r\n            switch (ch.type) {\r\n                case ChannelType.uart:\r\n                    this.provisionChannel(this.uartChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n                case ChannelType.i2c:\r\n                    this.provisionChannel(this.i2cChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n                case ChannelType.audio:\r\n                    this.locations.delete(4);\r\n                    break;\r\n                case ChannelType.gpio:\r\n                    this.provisionChannel(this.gpioChannels, ch.locationId, ch.channel.id);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    getAvailableModules(): Map<number, Map<ChannelType, string>> {\r\n        const result = new Map<number, Map<ChannelType, string>>();\r\n\r\n        for (const ctrl of this.locations.keys()) {\r\n            if (ctrl === 4 || ctrl === 0) {\r\n                continue;\r\n            }\r\n\r\n            result.set(ctrl, this.setModuleValues(ctrl));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getAvailableChannels(): Map<number, Map<ChannelType, ChannelValue[]>> {\r\n        const result = new Map<number, Map<ChannelType, any>>()\r\n\r\n        for (const ctrl of this.locations.keys()) {\r\n            if (ctrl === 4 || ctrl === 0) {\r\n                continue;\r\n            }\r\n\r\n            const vals = new Map<ChannelType, any>();\r\n\r\n            vals.set(ChannelType.i2c, this.i2cChannels.get(ctrl));\r\n            vals.set(ChannelType.uart, this.uartChannels.get(ctrl));\r\n            vals.set(ChannelType.gpio, this.gpioChannels.get(ctrl));\r\n\r\n            result.set(ctrl, vals);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private setModuleValues(_: number): Map<ChannelType, string> {\r\n        const vals = new Map<ChannelType, string>();\r\n\r\n        vals.set(ChannelType.i2c, \"I2C\");\r\n        vals.set(ChannelType.uart, \"Serial\");\r\n        vals.set(ChannelType.gpio, \"GPIO\");\r\n\r\n        return vals;\r\n    }\r\n\r\n    addChannel(controller: number, type: ChannelType, id: number): any {\r\n\r\n        if (controller === 4) {\r\n            this.locations.delete(4);\r\n            return undefined;\r\n        }\r\n\r\n        switch (type) {\r\n            case ChannelType.uart:\r\n                return this.provisionChannel(this.uartChannels, controller, id);\r\n            case ChannelType.i2c:\r\n                return this.provisionChannel(this.i2cChannels, controller, id);\r\n            case ChannelType.gpio:\r\n                return this.provisionChannel(this.gpioChannels, controller, id);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    provisionChannel(map: Map<number, ChannelValue[]>, location: number, id: number) : unknown | undefined {\r\n        const idx = map.get(location)?.findIndex(x => x.channel.id === id);\r\n        if (idx != undefined && idx > -1) {\r\n            this.gpioChannels.get(location)![idx].available = false;\r\n            return this.gpioChannels.get(location)![idx].channel\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    removeChannel(location: number, type: ChannelType, id: number): void {\r\n\r\n        if (location === 4) {\r\n            this.locations.set(4, new LocationDetails(4, 'Audio Playback'))\r\n            return\r\n        }\r\n\r\n        switch (type) {\r\n            case ChannelType.uart:\r\n                this.deprovisionChannel(this.uartChannels, location, id);\r\n                break;\r\n            case ChannelType.i2c:\r\n                this.deprovisionChannel(this.i2cChannels, location, id);\r\n                break;\r\n            case ChannelType.gpio:\r\n                this.deprovisionChannel(this.gpioChannels, location, id);    \r\n                break;\r\n        }\r\n    }\r\n\r\n    deprovisionChannel(map: Map<number, ChannelValue[]>, location: number, id: number): void {\r\n        const idx = map.get(location)?.findIndex(x => x.channel.id === id);\r\n        if (idx !== undefined && idx > -1) {\r\n            map.get(location)![idx].available = true;\r\n        }\r\n    }\r\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "locations",
                        "type": "ControllerLocation[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "locations",
                        "type": "ControllerLocation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "gpioChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "i2cChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "locations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | LocationDetails>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "servoChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "uartChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ChannelValue[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [
                {
                    "name": "addChannel",
                    "args": [
                        {
                            "name": "controller",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controller",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyScript",
                    "args": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "script",
                            "type": "Script",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deprovisionChannel",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map<number | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map<number | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAvailableChannels",
                    "args": [],
                    "optional": false,
                    "returnType": "Map<number, Map<ChannelType, ChannelValue[]>>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAvailableModules",
                    "args": [],
                    "optional": false,
                    "returnType": "Map<number, Map<ChannelType, string>>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "provisionChannel",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map<number | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": " | undefined",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map<number | ChannelValue[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeChannel",
                    "args": [
                        {
                            "name": "location",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModuleValues",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<ChannelType, string>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScriptTestModalResources",
            "id": "class-ScriptTestModalResources-e20debc8b8023e8ddf985ac947d2587b3580870aedc3f772c6364d3eb2242f8dcda2cd0696c0b186b831a38b1a65bc2bf721dc6786b2dfb22630764e3e9bfaf4",
            "file": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  ScriptResponse, \r\n  TransmissionStatus, \r\n  TransmissionType \r\n} from 'astros-common';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\r\n\r\ninterface Caption { str: string }\r\n\r\nexport class ScriptTestModalResources {\r\n  public static scriptId: string = 'scriptId';\r\n  public static locations: string = 'locations';\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-script-test-modal',\r\n  templateUrl: './script-test-modal.component.html',\r\n  styleUrls: ['../base-event-modal/base-event-modal.component.scss', './script-test-modal.component.scss'],\r\n  standalone: true\r\n})\r\nexport class ScriptTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  uploadInProgress = true;\r\n  runDisabled = true;\r\n\r\n  coreUpload: TransmissionStatus = TransmissionStatus.sending;\r\n  domeUpload: TransmissionStatus = TransmissionStatus.sending;\r\n  bodyUpload: TransmissionStatus = TransmissionStatus.sending;\r\n\r\n  coreCaption: Caption = { str: 'Uploading' };\r\n  domeCaption: Caption = { str: 'Uploading' };\r\n  bodyCaption: Caption = { str: 'Uploading' };\r\n\r\n  status: string;\r\n\r\n  scriptId = '';\r\n\r\n  constructor(private socket: WebsocketService, private scriptService: ScriptsService) {\r\n    super();\r\n    this.status = \"Uploading script...\";\r\n\r\n    this.socket.messages.subscribe((msg: unknown) => {\r\n      if (msg && typeof msg === 'object' && 'type' in msg) {\r\n        if (msg.type === TransmissionType.script) {\r\n          this.statusUpdate(msg as ScriptResponse);\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.scriptId = this.resources.get(ScriptTestModalResources.scriptId) as string;\r\n    const locations = this.resources.get(ScriptTestModalResources.locations) as number[];\r\n\r\n    let hasBody = false;\r\n    let hasCore = false;\r\n    let hasDome = false;\r\n\r\n    locations.forEach((location: number) => {\r\n      switch (location) {\r\n        case 1:\r\n          hasBody = true;\r\n          break;\r\n        case 2:\r\n          hasCore = true;\r\n          break;\r\n        case 3:\r\n          hasDome = true;\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.setInitialUploadStatus(hasBody, hasCore, hasDome);\r\n\r\n    const observer = {\r\n      next: (result: unknown) => console.log(result),\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.status = 'Error requesting Script Upload';\r\n        this.coreUpload = TransmissionStatus.failed;\r\n        this.coreCaption.str = 'Failed';\r\n        this.domeUpload = TransmissionStatus.failed;\r\n        this.domeCaption.str = 'Failed';\r\n        this.bodyUpload = TransmissionStatus.failed;\r\n        this.bodyCaption.str = 'Failed';\r\n      }\r\n    };\r\n\r\n    if (this.scriptId != '') {\r\n      this.scriptService.uploadScript(this.scriptId).subscribe(observer);\r\n    }\r\n    else {\r\n      this.status = 'Script ID missing, close dialog to continue.'\r\n    }\r\n  }\r\n\r\n  runClicked() {\r\n    console.log(`Running script: ${this.scriptId}`)\r\n    this.scriptService.runScript(this.scriptId).subscribe();\r\n    this.closeModal();\r\n  }\r\n\r\n  setInitialUploadStatus(hasBody: boolean, hasCore: boolean, hasDome: boolean) {\r\n    if (hasBody) {\r\n      this.bodyUpload = TransmissionStatus.sending;\r\n      this.bodyCaption.str = 'Uploading';\r\n    } else {\r\n      this.bodyUpload = TransmissionStatus.success;\r\n      this.bodyCaption.str = 'Not Assigned';\r\n    }\r\n\r\n    if (hasCore) {\r\n      this.coreUpload = TransmissionStatus.sending;\r\n      this.coreCaption.str = 'Uploading';\r\n    } else {\r\n      this.coreUpload = TransmissionStatus.success;\r\n      this.coreCaption.str = 'Not Assigned';\r\n    }\r\n\r\n    if (hasDome) {\r\n      this.domeUpload = TransmissionStatus.sending;\r\n      this.domeCaption.str = 'Uploading';\r\n    } else {\r\n      this.domeUpload = TransmissionStatus.success;\r\n      this.domeCaption.str = 'Not Assigned';\r\n    }\r\n  }\r\n\r\n  statusUpdate(msg: ScriptResponse) {\r\n    switch (msg.locationId) {\r\n      case 1:\r\n        this.bodyUpload = msg.status;\r\n        this.setCaption(this.bodyCaption, msg.status);\r\n        break;\r\n      case 2:\r\n        this.coreUpload = msg.status;\r\n        this.setCaption(this.coreCaption, msg.status);\r\n        break;\r\n      case 3:\r\n        this.domeUpload = msg.status;\r\n        this.setCaption(this.domeCaption, msg.status);\r\n        break;\r\n    }\r\n\r\n    if (this.coreUpload > 1 && this.domeUpload > 1 && this.bodyUpload > 1) {\r\n      this.status = \"Upload Complete.\"\r\n      this.uploadInProgress = false;\r\n      if (this.coreUpload + this.domeUpload + this.bodyUpload >= 6) {\r\n        this.runDisabled = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  setCaption(caption: Caption, status: TransmissionStatus) {\r\n    switch (status) {\r\n      case TransmissionStatus.success:\r\n        caption.str = \"Success\"\r\n        break;\r\n      case TransmissionStatus.failed:\r\n        caption.str = \"Failed\"\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "locations",
                    "defaultValue": "'locations'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptId",
                    "defaultValue": "'scriptId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServoEventModalResources",
            "id": "class-ServoEventModalResources-897a4952e6e850eed65a2f835404b5d591b88f173ac915db591cbf29577ab0144ebe68963738ce73a3fed6c956be2e8a4f4e8775766ffe310f57311e9570c259",
            "file": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class ServoEventModalResources {\r\n  public static servoId = 'servoId';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-servo-event-modal',\r\n    templateUrl: './servo-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './servo-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class ServoEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  channelId!: number;\r\n  speed: number;\r\n  position: number;\r\n  acceleration: number;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.speed = 1;\r\n    this.position = 0;\r\n    this.acceleration = 0;\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(ServoEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    this.channelId = this.resources.get(ServoEventModalResources.servoId) as number;\r\n\r\n    if (this.scriptEvent.dataJson != ''){\r\n      console.log(this.scriptEvent.dataJson);\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.channelId = payload.channelId;\r\n      this.position = payload.position;\r\n      this.speed = payload.speed;\r\n      this.acceleration = payload.acceleration;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n\r\n    //const data = new ServoEvent(+this.channelId, +this.position, +this.speed, +this.acceleration);\r\n    //this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "servoId",
                    "defaultValue": "'servoId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServoTestModalResources",
            "id": "class-ServoTestModalResources-e91905c810f4988980bf05e071521cf56bcc0c9f1dba16876567224feeebfb06d16009000c8d6d47c8bb17578e73935c5f6d54c5d1fd0b4d0638403716715ffa",
            "file": "src/app/components/modals/servo-test-modal/servo-test-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseEventModalComponent } from '../scripting/base-event-modal/base-event-modal.component';\r\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalCallbackEvent } from '../modal-base/modal-base.component';\r\n\r\nexport class ServoTestModalResources {\r\n  public static servoId: string = 'servoId';\r\n  public static controllerId: string = 'controllerId';\r\n  public static sendServoMove: string = 'servoTest_servoMove';\r\n  public static closeEvent: string = 'servoTest_closeEvent';\r\n}\r\n\r\nexport interface ServoTestMessage {\r\n  controllerId: number;\r\n  servoId: number;\r\n  value: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-servo-test-modal',\r\n    templateUrl: './servo-test-modal.component.html',\r\n    styleUrl: './servo-test-modal.component.scss',\r\n    standalone: true,\r\n    imports: [MatSlider, MatSliderThumb, FormsModule]\r\n})\r\nexport class ServoTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n   \r\n  servoId = 0;\r\n  controllerId = 0;\r\n  disableSlider = true;\r\n  value = 1500;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.servoId = this.resources.get(ServoTestModalResources.servoId) as number;\r\n    this.controllerId = this.resources.get(ServoTestModalResources.controllerId) as number;\r\n  }\r\n\r\n  onSliderChange(_: unknown) {\r\n    const evt = new ModalCallbackEvent(\r\n      ServoTestModalResources.sendServoMove,\r\n      {\r\n        controllerId: this.controllerId,\r\n        servoId: this.servoId,\r\n        value: this.value\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  enableTest() {\r\n    this.disableSlider = false;\r\n  }\r\n\r\n  override closeModal(): void {\r\n    const evt = new ModalCallbackEvent(\r\n      ServoTestModalResources.closeEvent,\r\n      null\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'servoTest_closeEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controllerId",
                    "defaultValue": "'controllerId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "sendServoMove",
                    "defaultValue": "'servoTest_servoMove'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "servoId",
                    "defaultValue": "'servoId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UartEventModalResources",
            "id": "class-UartEventModalResources-44f733fba9fee12ffe5bbbe1404250bfa36efc44d4059c9487074b4b56b89fb4e0c6c422a9d790bacd9e85bfb278f6191781a7b8cff47deac4b1b81d389c64cd",
            "file": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { GenericSerialEvent, ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class UartEventModalResources {\r\n  public static channelId = 'channelId';\r\n  public static baudRate = 'baudRate';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-uart-event-modal',\r\n    templateUrl: './uart-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './uart-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class UartEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n   \r\n  uartChannel!: number;\r\n  baudRate!: number;\r\n  eventValue: string;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.eventValue = '';\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.uartChannel = this.resources.get(UartEventModalResources.channelId) as number;\r\n    this.baudRate = this.resources.get(UartEventModalResources.baudRate) as number;\r\n\r\n    this.scriptEvent = this.resources.get(UartEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.eventValue = payload.value;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time;\r\n    this.eventTime = this.scriptEvent.time;\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime;\r\n    this.scriptEvent.dataJson = JSON.stringify(new GenericSerialEvent(this.uartChannel, this.baudRate, this.eventValue,));\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "baudRate",
                    "defaultValue": "'baudRate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "channelId",
                    "defaultValue": "'channelId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "scriptEvent",
                    "defaultValue": "'scriptEvent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertModalComponent",
            "id": "component-AlertModalComponent-ec79615bb5f8c27f646a6a09c6852cbe7bff567a6a2f22e8789fca04f172572f518873e6b0ee41fceb7af4fe9c74a4e4d8286dc751203df79b533eb76f60267c",
            "file": "src/app/components/modals/alert-modal/alert-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "closeEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, } from '../modal-base/modal-base.component'; import { ModalCallbackEvent } from '../modal-base/modal-callback-event';\r\n\r\nexport class AlertModalResources {\r\n  public static message: string = 'message';\r\n  public static closeEvent: string = 'alert_closeEvent';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert-modal',\r\n  templateUrl: './alert-modal.component.html',\r\n  styleUrl: './alert-modal.component.scss'\r\n})\r\nexport class AlertModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  message!: string;\r\n  closeEvent!: unknown;\r\n\r\n  constructor() { super() }\r\n\r\n  ngOnInit(): void {\r\n    this.message = this.resources.get(AlertModalResources.message) as string;\r\n    this.closeEvent = this.resources.get(AlertModalResources.closeEvent);\r\n  }\r\n\r\n  closeModal() {\r\n    const evt = new ModalCallbackEvent(\r\n      AlertModalResources.closeEvent, \r\n      this.closeEvent\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "styleUrl": "./alert-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"alert-modal\">\r\n    <h1>Alert</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            {{message}}\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"closeModal();\">OK</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1f19a6218cdcf27d66528e31dde7c3d7e4c2f46f4fc89f01a80234f3782a06b5e0d880290301043fdd53aab31a6eb48c5c7694a6c2950632f1c8e17ed952ea76",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthenticationService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "clickDetector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'clickDetector', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sideNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sideNav', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "\"AstOs\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "containerClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSocketMessage",
                    "args": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';\r\nimport { Router, RouterLink, RouterOutlet } from '@angular/router';\r\nimport { TransmissionType } from 'astros-common';\r\nimport { AuthenticationService } from './services/auth/authentication.service';\r\nimport { SnackbarService } from './services/snackbar/snackbar.service';\r\nimport { WebsocketService } from './services/websocket/websocket.service';\r\nimport { NgIf } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  standalone: true,\r\n  imports: [RouterLink, NgIf, RouterOutlet]\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  title = \"AstOs\"\r\n  private menuOpen = false;\r\n\r\n  @ViewChild('sideNav', { static: false }) sideNav!: ElementRef;\r\n  @ViewChild('clickDetector', { static: false }) clickDetector!: ElementRef;\r\n\r\n  constructor(public auth: AuthenticationService,\r\n    private renderer: Renderer2,\r\n    private router: Router,\r\n    private snackbar: SnackbarService,\r\n    private socket: WebsocketService) {\r\n    if (auth.isLoggedIn()) {\r\n      //router.navigate(['status']);\r\n      router.navigate(['modules']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.socket.messages.subscribe((msg: unknown) => {\r\n      this.handleSocketMessage(msg);\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.auth.logout();\r\n  }\r\n\r\n  showMenu() {\r\n    if (this.auth.isLoggedIn()) {\r\n      this.renderer.setStyle(this.sideNav.nativeElement, 'width', '220px');\r\n      this.renderer.setStyle(this.clickDetector.nativeElement, 'width', '100%');\r\n      this.menuOpen = true;\r\n    }\r\n  }\r\n\r\n  closeMenu() {\r\n    this.renderer.setStyle(this.sideNav.nativeElement, 'width', '0px');\r\n    this.renderer.setStyle(this.clickDetector.nativeElement, 'width', '0px');\r\n    this.menuOpen = false\r\n  }\r\n\r\n  containerClicked() {\r\n    if (this.menuOpen) {\r\n      this.closeMenu();\r\n    }\r\n  }\r\n\r\n  private handleSocketMessage(msg: unknown) {\r\n\r\n    if (msg && typeof msg === 'object' && 'type' in msg && 'message' in msg) {\r\n      switch (msg.type) {\r\n        case TransmissionType.sync:\r\n          this.snackbar.okToast(msg.message as string);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " @import \"../assets/styles/variables\";\r\n\r\n .container {\r\n     background-color: $color-dark;\r\n     color: $color-pale;\r\n     text-shadow:\r\n         -3px -3px 0 $dark-blue,\r\n         3px -3px 0 $dark-blue,\r\n         -3px 3px 0 $dark-blue,\r\n         3px 3px 0 $dark-blue;\r\n\r\n\r\n\r\n     margin: 0;\r\n     padding: 2rem;\r\n }\r\n\r\n\r\n\r\n\r\n .navbar-main {\r\n     display: flex;\r\n     flex-direction: row;\r\n     text-align: center;\r\n     font-size: 36px;\r\n     font-family: $swfont;\r\n\r\n     .capital {\r\n         font-size: 50px;\r\n     }\r\n\r\n     .navbutton {\r\n         margin-top: 4px;\r\n     }\r\n\r\n     .navbutton:after {\r\n         margin-left: 4px;\r\n         margin-right: 10px;\r\n         content: '\\2807';\r\n         font-size: 48px;\r\n     }\r\n }\r\n\r\n .sidenav {\r\n     height: 100%;\r\n     width: 0;\r\n     position: fixed;\r\n     z-index: 1000;\r\n     top: 0;\r\n     left: 0;\r\n     background-color: $dark-blue;\r\n     overflow-x: hidden;\r\n     transition: 0.5s;\r\n     padding-top: 4px;\r\n\r\n     a {\r\n         margin: 30px 40px 30px 20px;\r\n         text-decoration: none;\r\n         font-family: $swfont;\r\n         font-size: 28px;\r\n         color: $color-pale;\r\n         display: block;\r\n         transition: 0.3s;\r\n     }\r\n\r\n     a:hover {\r\n         color: $light-blue;\r\n     }\r\n\r\n }\r\n\r\n .click-detector {\r\n    height: 100%;\r\n    width: 0;\r\n    position: fixed;\r\n    z-index: 999;\r\n    top: 0;\r\n    left: 0;\r\n    overflow-x: hidden;\r\n}\r\n\r\n @media only screen and (max-width: 480px) {\r\n     .navbar-main {\r\n         a {\r\n             font-size: 28px;\r\n         }\r\n     }\r\n\r\n     .sidenav {\r\n         padding-top: 15px;\r\n     }\r\n\r\n     .sidenav a {\r\n         font-size: 28px;\r\n     }\r\n }",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div (click)=\"closeMenu()\"\r\n  (keypress)=\"if ($event.key !== 'Enter' && $event.key !== ' ') return; $event.preventDefault(); closeMenu();\"\r\n  id=\"mySidenav\" class=\"sidenav\" tabindex=\"0\" #sideNav>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/status\" tabindex=\"0\">Status</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/scripts\" tabindex=\"0\">Scripts</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/remote\" tabindex=\"0\">Remote</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/modules\" tabindex=\"0\">Modules</a>\r\n  <a (click)=\"closeMenu()\" routerLink=\"/utility\" tabindex=\"0\">Utility</a>\r\n  <a *ngIf=\"auth.isLoggedIn()\" href=\"javascript: void(0);\" (click)=\"logout()\" tabindex=\"0\">Logout</a>\r\n</div>\r\n\r\n<div id=\"clickDetector\" class=\"click-detector\" (click)=\"closeMenu()\"\r\n  (keypress)=\"if ($event.key !== 'Enter' && $event.key !== ' ') return; $event.preventDefault(); closeMenu();\"\r\n  tabindex=\"0\" #clickDetector></div>\r\n\r\n<div class=\"container\">\r\n  <div class=\"navbar-main\">\r\n\r\n    <div class=\"navbutton\" (click)=\"showMenu()\"\r\n      (keypress)=\"if ($event.key !== 'Enter' && $event.key !== ' ') return; $event.preventDefault(); showMenu();\"\r\n      tabindex=\"0\"></div>\r\n    <div><span class=\"capital\">A</span>str<span class=\"capital\">O</span>s</div>\r\n  </div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "AudioEventModalComponent",
            "id": "component-AudioEventModalComponent-0fd8bbc10877500245998434d4668751e3b4ff42f3c2c5b10f195f169da6a0099a6aab3472e6dd7dd19fe9af3d6c8d9a764cc0b83c3efb59b6f6aa02dc7f6ef9",
            "file": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-audio-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./audio-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./audio-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "audioFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AudioFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AudioFile, ScriptEvent } from 'astros-common';\r\nimport { AudioService } from 'src/app/services/audio/audio.service';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class AudioEventModalResources {\r\n  public static audioFiles = 'audioFiles';\r\n  public static selectedFile = 'selectedFile';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-audio-event-modal',\r\n    templateUrl: './audio-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './audio-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, NgFor, DecimalPipe]\r\n})\r\nexport class AudioEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  audioFiles: AudioFile[];\r\n\r\n  selectedFile: string;\r\n\r\n  constructor(private audioService: AudioService) { \r\n    super();\r\n    this.audioFiles = new Array<AudioFile>();\r\n    this.selectedFile = '0';\r\n\r\n    const observer = {\r\n      next: (result: AudioFile[]) => this.audioFiles = result,\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.audioService.getAudioFiles().subscribe(observer);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(ScriptEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.selectedFile = payload.value;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  addEvent(){\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n    this.scriptEvent.dataJson = JSON.stringify({value: this.selectedFile});\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        id: this.callbackType,\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./audio-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Audio File</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <select id=\"file-select\" title=\"File\" [(ngModel)]=\"selectedFile\">\r\n                    <option value=\"0\" disabled selected>Select Audio</option>\r\n                    <option *ngFor=\"let file of audioFiles\" value=\"{{file.id}}\">{{file.fileName}}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AudioFilesComponent",
            "id": "component-AudioFilesComponent-6cd7252bac75010ef9f4fe5d27a08c2bdc7336ca3be0942e4f93ba064129184c6ca00d962b09c76f35353fcf4102620048623a9f2fc3ac04521250f9ef3d1083",
            "file": "src/app/pages/audio-files/audio-files.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-audio-files",
            "styleUrls": [
                "./audio-files.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./audio-files.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "audioFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AudioFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "faPlay",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playFile",
                    "args": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAudioFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { faPlay, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { ConfirmModalComponent, ModalService } from 'src/app/modal';\r\nimport { AudioFile } from 'astros-common';\r\nimport { AudioService } from 'src/app/services/audio/audio.service';\r\nimport { ModalCallbackEvent, ModalResources } from 'src/app/shared/modal-resources';\r\nimport { UploadModalComponent } from './upload-modal/upload-modal.component';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { NgFor, DatePipe } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { ModalComponent } from '../../services/modal/modal.component';\r\n\r\n@Component({\r\n  selector: 'app-audio-files',\r\n  templateUrl: './audio-files.component.html',\r\n  styleUrls: ['./audio-files.component.scss'],\r\n  standalone: true,\r\n  imports: [NgFor, FontAwesomeModule, ModalComponent, DatePipe]\r\n})\r\nexport class AudioFilesComponent implements OnInit {\r\n\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n\r\n  faTrash = faTrash;\r\n  faPlay = faPlay;\r\n\r\n  audioFiles: AudioFile[];\r\n\r\n  constructor(private snackBar: SnackbarService,\r\n    private modalService: ModalService,\r\n    private audioService: AudioService) {\r\n    this.audioFiles = new Array<AudioFile>();\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const observer = {\r\n      next: (result: AudioFile[]) => this.audioFiles = result,\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.audioService.getAudioFiles().subscribe(observer);\r\n  }\r\n\r\n  playFile(_: string) {\r\n    this.snackBar.okToast('TODO: impelement this!');\r\n  }\r\n\r\n  uploadFile() {\r\n    this.container.clear();\r\n\r\n    const component = this.container.createComponent(UploadModalComponent);\r\n\r\n    const modalResources = new Map<string, any>();\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: any) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.modalService.open('audio-files-modal');\r\n  }\r\n\r\n  removeFile(id: string) {\r\n    this.container.clear();\r\n\r\n    const idx = this.audioFiles\r\n      .map((f) => { return f.id })\r\n      .indexOf(id);\r\n\r\n    const fileName = this.audioFiles[idx].fileName;\r\n\r\n    const modalResources = new Map<string, any>();\r\n    modalResources.set(ModalResources.action, 'Confirm Delete')\r\n    modalResources.set(ModalResources.message, `Are you sure you want to delete ${fileName}?`);\r\n    modalResources.set(ModalResources.confirmEvent, { id: ModalCallbackEvent.delete, val: id });\r\n    modalResources.set(ModalResources.closeEvent, { id: ModalCallbackEvent.close })\r\n\r\n    const component = this.container.createComponent(ConfirmModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: any) => {\r\n      this.modalCallback(evt);\r\n    });\r\n\r\n    this.modalService.open('audio-files-modal');\r\n  }\r\n\r\n  modalCallback(evt: any) {\r\n\r\n    switch (evt.id) {\r\n      case ModalCallbackEvent.delete:\r\n        this.remove(evt.val);\r\n        break;\r\n      case ModalCallbackEvent.refresh:\r\n        this.refreshAudioFiles();\r\n        break;\r\n\r\n    }\r\n\r\n    this.modalService.close('audio-files-modal');\r\n    this.container.clear();\r\n  }\r\n\r\n  refreshAudioFiles() {\r\n    const observer = {\r\n      next: (result: AudioFile[]) => this.audioFiles = result,\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.audioService.getAudioFiles().subscribe(observer);\r\n  }\r\n\r\n  remove(id: string) {\r\n    const observer = {\r\n      next: (result: any) => {\r\n        if (result.success) {\r\n          const idx = this.audioFiles\r\n            .map((f) => { return f.id })\r\n            .indexOf(id);\r\n\r\n          this.audioFiles.splice(idx, 1);\r\n\r\n          this.snackBar.okToast('File deleted!');\r\n        } else {\r\n          this.snackBar.okToast('File delete failed!');\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        this.snackBar.okToast('File delete failed!');\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    this.audioService.removeAudioFile(id).subscribe(observer);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/styles/variables\";\r\n\r\n.audio-files-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n    .spacer {\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .audio-files-body {\r\n\r\n        padding: 20px;\r\n        max-width: 1000px;\r\n        flex-grow: 20;\r\n\r\n        .button-bar {\r\n            display: flex;\r\n            flex-direction: row;\r\n            height: 54px;\r\n            line-height: 54px;\r\n            \r\n            .title {\r\n                width: 200px;\r\n                font-size: xx-large;\r\n                font-family: $swfont;   \r\n            }\r\n\r\n\r\n            .button-box {\r\n                float: right;\r\n\r\n                button{\r\n                    font-size: x-large;\r\n                    font-family: $swfont;\r\n                    background-color: $dark-blue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.audio-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n\r\n    .file-line {\r\n        display: flex;\r\n        height: 40px;\r\n        line-height: 40px;\r\n        flex-direction: row;\r\n        font-size: large;\r\n        border-bottom: solid 2px black;\r\n\r\n        .name-section {\r\n        \r\n            flex-basis: 240px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n        \r\n        .desc-section {\r\n            flex-grow: 1;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n\r\n        .dur-section {\r\n            margin-right: 10px;\r\n        }\r\n\r\n        button {\r\n            font-size: large;\r\n            padding: 0;\r\n            margin: 0px 12px;\r\n            border: none;\r\n            background-color: transparent;\r\n            color: dimgray;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./audio-files.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"audio-files-container\">\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"audio-files-body\">\r\n        <div class=\"button-bar\">\r\n            <div class=\"title\">\r\n                Audio Files\r\n            </div>\r\n            <div class=\"spacer\"></div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"uploadFile()\" class=\"upload\">Upload</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"audio-list-container\">\r\n            <ul class=\"audio-list\">\r\n                <li *ngFor=\"let file of audioFiles\">\r\n                    <div class=\"file-line\">\r\n\r\n                        <div class=\"name-section\">{{file.fileName}}</div>\r\n                        <div class=\"desc-section\">{{file.description}}</div>\r\n                        <div class=\"dur-section\">{{file.duration * 1000 | date:'mm:ss'}}</div>\r\n                        <button title=\"Play\" (click)=\"playFile(file.id)\"><fa-icon [icon]=\"faPlay\"></fa-icon></button>\r\n                        <button title=\"Remove\" (click)=\"removeFile(file.id)\"><fa-icon [icon]=\"faTrash\"></fa-icon></button>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n</div>\r\n\r\n\r\n<app-astros-modal id=\"audio-files-modal\" disableBackgroundClick=\"1\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "BaseEventModalComponent",
            "id": "component-BaseEventModalComponent-41f9556827a68abaad3e9d48be6628fc5f29f258996e14775ce436c91c3d8150a1828e9727434dcd752056ce921cd904d736927c2ea62b8730371ccce7faa8bc",
            "file": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-event-modal",
            "styleUrls": [
                "./base-event-modal.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\nimport { ScriptEvent } from 'astros-common';\r\n\r\nexport class ScriptEventModalResources {\r\n  public static scriptEvent: string = 'scriptEvent';\r\n  public static callbackType: string = 'callbackType';\r\n  public static addEvent: string = 'script_addEvent';\r\n  public static editEvent: string = 'script_editEvent';\r\n  public static removeEvent: string = 'script_removeEvent';\r\n  public static closeEvent: string = 'script_closeEvent';\r\n}\r\n\r\nexport interface ScriptEventModalResponse {\r\n  scriptEvent: ScriptEvent;\r\n  time: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-base-event-modal',\r\n  template: '',\r\n  styleUrls: ['./base-event-modal.component.scss'],\r\n  standalone: true\r\n})\r\nexport class BaseEventModalComponent extends ModalBaseComponent {\r\n\r\n  protected scriptEvent!: ScriptEvent;\r\n  protected originalEventTime: number;\r\n  protected callbackType: string;\r\n\r\n  eventTime: number;\r\n  protected maxTime = 3000;\r\n  protected timeFactor = 10;\r\n\r\n  errorMessage: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  removeEvent() {\r\n    const evt = new ModalCallbackEvent(\r\n      ScriptEventModalResources.removeEvent,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  closeModal() {\r\n    const evt = new ModalCallbackEvent(\r\n      ScriptEventModalResources.closeEvent,\r\n      null\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./base-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "extends": [
                "ModalBaseComponent"
            ]
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-99d3bcbf9a8dc95a22625acffbd316d740d0cb0cf611b42ae098427ae6c6f2a0b58841b822c07cfa87d56e5d63d5b822ef02ae19569d7cfeec764eaaf2ee6ca0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"click.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 823,
                            "end": 836,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 824,
                                "end": 832,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 30,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"click.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  // eslint-disable-next-line\n  click = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 45
                    }
                }
            }
        },
        {
            "name": "ChannelTestModalComponent",
            "id": "component-ChannelTestModalComponent-77a4059886ef66d051b18bf62614526a4461e5119f3618343f88ece497884b07c24161885d4a291802bf92fbe0580763c5d550f761c4be847f03d54574cf5222",
            "file": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-channel-test-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./channel-test-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./channel-test-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "channelSubType",
                    "defaultValue": "ChannelSubType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelSubType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "channelType",
                    "defaultValue": "ChannelType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "controllerId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "gpioLevel",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "kangarooAction",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "kangarooCh",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "kangarooPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "kangarooSpd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "posDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "position",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "spdDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "speed",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getCommand",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKangarooCommand",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChannelSubType, ChannelType, KangarooAction } from 'astros-common';\r\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\r\nimport { NgIf } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class ChannelTestModalResources {\r\n  public static controller = 'controller';\r\n  public static channelType = 'channelType';\r\n  public static channelSubType = 'channelSubType';\r\n  public static channelId = 'channelId';\r\n\r\n  public static channelTest = 'channelTest_test';\r\n}\r\n\r\nexport interface ChannelTestModalResponse {\r\n  controllerId: number;\r\n  commandType: ChannelType;\r\n  command: unknown;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-channel-test-modal',\r\n    templateUrl: './channel-test-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './channel-test-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgIf, FormsModule]\r\n})\r\nexport class ChannelTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  controllerId = 0;\r\n  channelId = 0;\r\n\r\n  channelType: ChannelType = ChannelType.none;\r\n  channelSubType: ChannelSubType = ChannelSubType.none;\r\n\r\n  speed = 1;\r\n  position = 0;\r\n  value = '';\r\n\r\n  kangarooCh = 1;\r\n  kangarooAction = 1;\r\n  kangarooSpd?: number;\r\n  kangarooPos?: number;\r\n  spdDisabled = true;\r\n  posDisabled = true;\r\n\r\n  gpioLevel = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.callbackType = ChannelTestModalResources.channelTest;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.controllerId = this.resources.get(ChannelTestModalResources.controller) as number;\r\n    this.channelType = this.resources.get(ChannelTestModalResources.channelType) as ChannelType;\r\n    this.channelSubType = this.resources.get(ChannelTestModalResources.channelSubType) as ChannelSubType\r\n    this.channelId = this.resources.get(ChannelTestModalResources.channelId) as number;\r\n  }\r\n\r\n  runClicked() {\r\n    const evt = new ModalCallbackEvent(\r\n      ChannelTestModalResources.channelTest,\r\n      {\r\n        controllerId: this.controllerId,\r\n        commandType: this.channelType,\r\n        command: this.getCommand()  \r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  getCommand(): any {\r\n    switch (this.channelType) {\r\n      case ChannelType.i2c:\r\n        return { id: this.channelId, val: this.value };\r\n      //case ChannelType.servo:\r\n      //  return { id: this.channelId, position: this.position, speed: this.speed };\r\n      case ChannelType.uart:\r\n        if (this.channelSubType === ChannelSubType.kangaroo) {\r\n          return { val: this.getKangarooCommand() };\r\n        } else {\r\n          return { val: this.value };\r\n        }\r\n      case ChannelType.gpio:\r\n        return { id: this.channelId, val: this.gpioLevel };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  selectChange($event: any) {\r\n    if ($event.target.id === 'cmdselect') {\r\n\r\n      this.spdDisabled = +this.kangarooAction !== 3 && +this.kangarooAction !== 4;\r\n      this.posDisabled = +this.kangarooAction !== 4;\r\n\r\n      if (+this.kangarooAction !== 3 && +this.kangarooAction !== 4) {\r\n        this.kangarooSpd = 0;\r\n      }\r\n      if (+this.kangarooAction !== 4) {\r\n        this.kangarooPos = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  getKangarooCommand(): string {\r\n\r\n    let cmd = '';\r\n\r\n    switch (+this.kangarooAction) {\r\n      case KangarooAction.start:\r\n        cmd = 'start'\r\n        break;\r\n      case KangarooAction.home:\r\n        cmd = 'home'\r\n        break;\r\n      case KangarooAction.speed:\r\n        cmd = `s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`\r\n        break;\r\n      case KangarooAction.position:\r\n        cmd = `p${this.kangarooPos === undefined ? 0 : this.kangarooPos} s${this.kangarooSpd === undefined ? 0 : this.kangarooSpd}`\r\n        break;\r\n    }\r\n\r\n    return `${this.kangarooCh},${cmd}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./channel-test-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Channel Test</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div *ngIf=\"channelType === 1 && channelSubType === 1\">\r\n                <label for=\"value\">Serial Command</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"value\" />\r\n            </div>\r\n            <div *ngIf=\"channelType === 1 && channelSubType === 2\">\r\n                <div>\r\n                    <label class=\"kangaroo-channel-label\" for=\"chselect\">Kangaroo Channel</label>\r\n                    <select id=\"chselect\" title=\"kangaroo channel\" [(ngModel)]=\"kangarooCh\" (change)=\"selectChange($event)\">\r\n                        <option value=\"1\">Channel 1</option>\r\n                        <option value=\"2\">Channel 2</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label class=\"kangaroo-channel-label\" for=\"command\">Command</label>\r\n                    <select id=\"cmdselect\" title=\"command\" [(ngModel)]=\"kangarooAction\" (change)=\"selectChange($event)\">\r\n                        <option value=\"1\">Start</option>\r\n                        <option value=\"2\">Home</option>\r\n                        <option value=\"3\">Speed</option>\r\n                        <option value=\"4\">Position</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label class=\"kangaroo-speed-label\" for=\"chspd\">Speed</label>\r\n                    <input class=\"kangaroo-input\" name=\"chspd\" matInput placeholder=\"Speed\" [disabled]=\"spdDisabled\"  [(ngModel)]=\"kangarooSpd\" type=\"number\" />\r\n                    <label class=\"kangaroo-position-label\" for=\"chpos\">Position</label>\r\n                    <input class=\"kangaroo-input\" name=\"chpos\" matInput placeholder=\"Position\" [disabled]=\"posDisabled\" [(ngModel)]=\"kangarooPos\" type=\"number\" />\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"channelType === 2\">\r\n                <label for=\"value\">I2C Command</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"value\" />\r\n            </div>\r\n            <div *ngIf=\"channelType === 3\">\r\n                <div>\r\n                    <label for=\"position\">Position</label>\r\n                    <input name=\"position\" matInput placeholder=\"Position\" [(ngModel)]=\"position\" type=\"number\" min=\"0\"\r\n                        max=\"100\" (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\"\r\n                        (change)=\"position < 0 ? position = 0 : position; position > 100 ? position = 100 : position;\" />\r\n                </div>\r\n                <div>\r\n                    <label for=\"speed\">Speed</label>\r\n                    <input name=\"speed\" matInput placeholder=\"Speed\" [(ngModel)]=\"speed\" type=\"number\" min=\"0\" max=\"100\"\r\n                        (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\"\r\n                        (change)=\"speed < 0 ? speed = 0 : speed; speed > 10 ? speed = 10 : speed;\" />\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"channelType === 5\">\r\n                <label for=\"value\">GPIO Command</label>\r\n                <select id=\"gpiolevel\" title=\"GPIO Level\" [(ngModel)]=\"gpioLevel\" (change)=\"selectChange($event)\">\r\n                    <option value=\"0\">Low</option>\r\n                    <option value=\"1\">High</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"runClicked();\">Send</button>\r\n            <button (click)=\"closeModal();\">Cancel</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-2867cb892306c0482e9665f6dca088ecc6c2c1424ef95e3f6589c06112d3d9e891a16419bf795464f18d3bad5c06d1712ff662973f0dd7917140ff74e23f6fb5",
            "file": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-astros-confirm-modal",
            "styleUrls": [
                "./confirm-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "closeEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "confirmEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\n\r\nexport class ConfirmModalResources {\r\n  public static action: string = 'action';\r\n  public static message: string = 'message';\r\n  public static confirmEvent: string = 'confirm_confirmEvent';\r\n  public static closeEvent: string = 'confirm_closeEvent';\r\n}\r\n\r\n@Component({\r\n  selector: 'app-astros-confirm-modal',\r\n  templateUrl: './confirm-modal.component.html',\r\n  styleUrls: ['./confirm-modal.component.scss']\r\n})\r\nexport class ConfirmModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  action!: string;\r\n  message!: string;\r\n  confirmEvent!: unknown; \r\n  closeEvent!: unknown;\r\n\r\n  constructor() { super()}\r\n\r\n  ngOnInit(): void {\r\n    this.action = this.resources.get(ConfirmModalResources.action) as string;\r\n    this.message = this.resources.get(ConfirmModalResources.message) as string;\r\n    this.confirmEvent = this.resources.get(ConfirmModalResources.confirmEvent);\r\n    this.closeEvent = this.resources.get(ConfirmModalResources.closeEvent);\r\n  }\r\n\r\n  confirm(){\r\n    const evt = new ModalCallbackEvent(\r\n      ConfirmModalResources.confirmEvent, \r\n      this.confirmEvent\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  closeModal(){\r\n    const evt = new ModalCallbackEvent(\r\n      ConfirmModalResources.closeEvent, \r\n      this.closeEvent\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".confirm-modal {\r\n\r\n    width: 400px;\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            overflow-wrap: break-word;\r\n            display: inline;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./confirm-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"confirm-modal\">\r\n    <h1>Confirm {{action}}</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            {{message}}\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"confirm();\">Yes</button>\r\n            <button (click)=\"closeModal();\">No</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ControllerModalComponent",
            "id": "component-ControllerModalComponent-e4bc7b4d3e919662776700231dc8f32d385c1b7fa4b38c53dbbc3cfb3f61466c0793da56a3027457676b1e9d42ad2c07ce1b99136abf45a955dd275c1a16d9d9",
            "file": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-controller-modal",
            "styleUrls": [
                "./controller-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./controller-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Map<ChannelType, ChannelValue[]>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "availableModules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Map<ChannelType, string>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "channels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelValue[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | LocationDetails>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<ChannelType | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedChannel",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "selectedChannels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "selectedController",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "selectedModule",
                    "defaultValue": "ChannelType.none",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChannelType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "addChannel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChannels",
                    "args": [
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModules",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "KeyValuePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChannelType } from 'astros-common';\r\nimport { ChannelValue, LocationDetails } from 'src/app/models/script-resources';\r\nimport { ModalBaseComponent, ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, NgIf, KeyValuePipe } from '@angular/common';\r\n\r\nexport class ControllerModalResources {\r\n  public static controllers: string = 'controllers';\r\n  public static modules: string = 'modules';\r\n  public static channels: string = 'channels';\r\n\r\n  public static addChannelEvent: string = 'controller_addChannel';\r\n  public static closeEvent: string = 'controller_close';\r\n}\r\n\r\nexport interface ControllerModalResponse {\r\n  controller: number;\r\n  module: ChannelType;\r\n  channels: number[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-controller-modal',\r\n    templateUrl: './controller-modal.component.html',\r\n    styleUrls: ['./controller-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, NgFor, NgIf, KeyValuePipe]\r\n})\r\nexport class ControllerModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  errorMessage: string;\r\n\r\n  controllers!: Map<number, LocationDetails>;\r\n  selectedController = 0;\r\n\r\n  private availableModules!: Map<number, Map<ChannelType, string>>;\r\n  modules: Map<ChannelType, string>\r\n  selectedModule: ChannelType = ChannelType.none;\r\n\r\n  private availableChannels!: Map<number, Map<ChannelType, ChannelValue[]>>;\r\n  channels: ChannelValue[]\r\n  selectedChannel = -1;\r\n  selectedChannels: any[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.errorMessage = '';\r\n\r\n    this.modules = new Map<ChannelType, string>();\r\n    this.channels = new Array<ChannelValue>();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.controllers = this.resources.get(ControllerModalResources.controllers) as Map<number, LocationDetails>;\r\n    this.availableModules = this.resources.get(ControllerModalResources.modules) as Map<number, Map<ChannelType, string>>;\r\n    this.availableChannels = this.resources.get(ControllerModalResources.channels) as Map<number, Map<ChannelType, ChannelValue[]>>;\r\n  }\r\n\r\n  modalChange($event: any) {\r\n    // convert from string value to number for enum\r\n    if ($event.target.id === 'controller-select') {\r\n      this.setModules(+$event.target.value);\r\n    }\r\n    else if ($event.target.id === 'module-select') {\r\n      this.setChannels(+$event.target.value);\r\n    }\r\n  }\r\n\r\n  addChannel() {\r\n\r\n    if (+this.selectedController !== 4\r\n      && +this.selectedModule === ChannelType.none) {\r\n      this.errorMessage = 'Module Selection Required'\r\n      return;\r\n    }\r\n\r\n    if (+this.selectedModule !== ChannelType.none\r\n      && +this.selectedChannels.length < 1) {\r\n      this.errorMessage = 'Channel Selection Required'\r\n      return;\r\n    }\r\n\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      ControllerModalResources.addChannelEvent,\r\n      {\r\n        controller: +this.selectedController,\r\n        module: +this.selectedController === 4 ? ChannelType.audio : +this.selectedModule,\r\n        channels: this.selectedChannels\r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n    this.clearOptions()\r\n  }\r\n\r\n  closeModal() {\r\n    this.clearOptions()\r\n    const evt = new ModalCallbackEvent(\r\n      ControllerModalResources.closeEvent,\r\n      null\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  private clearOptions() {\r\n    this.selectedController = 0;\r\n    this.selectedModule = ChannelType.none;\r\n    this.selectedChannel = -1;\r\n    document.getElementById('module-select')?.setAttribute('disabled', 'disabled');\r\n    document.getElementById('channel-select')?.setAttribute('disabled', 'disabled');\r\n  }\r\n\r\n  private setModules(controllerId: number) {\r\n    if (controllerId === 4) {\r\n      this.selectedModule = ChannelType.none;\r\n      this.selectedChannel = -1;\r\n      document.getElementById('module-select')?.setAttribute('disabled', 'disabled');\r\n      document.getElementById('channel-select')?.setAttribute('disabled', 'disabled')\r\n    }\r\n    else {\r\n      const mods = this.availableModules.get(+this.selectedController);\r\n      if (mods) {\r\n        this.modules = mods;\r\n        document.getElementById('module-select')?.removeAttribute('disabled');\r\n        //this.selectedModule = ChannelType.none;\r\n        this.setChannels(this.selectedModule);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setChannels(channelType: ChannelType) {\r\n\r\n    if (channelType === ChannelType.none) {\r\n      this.selectedChannel = -1;\r\n      document.getElementById('channel-select')?.setAttribute('disabled', 'disabled');\r\n    }\r\n    else {\r\n      const chs = this.availableChannels.get(+this.selectedController)?.get(+channelType);\r\n      if (chs) {\r\n        this.channels = chs;\r\n        document.getElementById('channel-select')?.removeAttribute('disabled');\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".channel-modal {\r\n\r\n    width: 400px;\r\n  \r\n    select {\r\n      display: block;\r\n      font-size: x-large;\r\n      margin: 20px 10px;\r\n      width: 380px;\r\n    }\r\n  }\r\n  \r\n  .error {\r\n    font-size: large;\r\n    text-align: center;\r\n    color: crimson;\r\n  }\r\n\r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./controller-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"channel-modal\">\r\n    <h1>Select Channel</h1>\r\n    <div class=\"modal-body\">\r\n        <select id=\"controller-select\" title=\"Contoller\" [(ngModel)]=\"selectedController\"\r\n            (change)=\"modalChange($event)\">\r\n            <option value=\"0\" disabled selected>Select Contoller</option>\r\n            <option *ngFor=\"let kv of controllers | keyvalue\" value=\"{{kv.key}}\">{{kv.value.name}}\r\n            </option>\r\n        </select>\r\n        <select id=\"module-select\" title=\"Module\" disabled [(ngModel)]=\"selectedModule\"\r\n            (change)=\"modalChange($event)\">\r\n            <option value=\"0\" disabled selected>Select Module</option>\r\n            <option *ngFor=\"let kv of modules | keyvalue\" value=\"{{kv.key}}\">{{kv.value}}</option>\r\n        </select>\r\n        <select id=\"channel-select\" \r\n            title=\"Channel\" \r\n            disabled \r\n            \r\n            [(ngModel)]=\"selectedChannels\"\r\n            [multiple]=\"true\"\r\n            (change)=\"modalChange($event)\">\r\n            <option value=\"-1\" disabled selected>Select Channel</option>\r\n            <ng-container *ngFor=\"let ch of channels\">\r\n                <option *ngIf=\"ch.available && ch.channel.channelName.toLowerCase() !== 'reserved'\" value=\"{{ch.channel.id}}\">{{ch.channel.id}} - {{ch.channel.channelName}}</option>\r\n            </ng-container>\r\n        </select>\r\n        <div class=\"error\">{{errorMessage}}</div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addChannel();\">Add</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "DriveModuleComponent",
            "id": "component-DriveModuleComponent-6562c34546e04659bbf8a4846b7bc72ca88756646d22efd0c160f05a93a2dc83c440c5d9526648a183c2707df7b83c1ab48356a36932a9e708a6055b7ef76153",
            "file": "src/app/pages/modules/drive-module/drive-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drive-module",
            "styleUrls": [
                "./drive-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./drive-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-drive-module',\r\n    templateUrl: './drive-module.component.html',\r\n    styleUrls: ['./drive-module.component.scss'],\r\n    standalone: true\r\n})\r\nexport class DriveModuleComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./drive-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p>drive-module works!</p>\r\n"
        },
        {
            "name": "EspModuleComponent",
            "id": "component-EspModuleComponent-aa08126c20bd18f1fcd672f45bf9dd992b8e325b969dfdff21f28fe6524e67f0e9223ff1a8658909726a8df55e848a9a081488b05375572bbe0447b850a6f6ce",
            "file": "src/app/pages/modules/esp-module/esp-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-esp-module",
            "styleUrls": [
                "./esp-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./esp-module.component.html"
            ],
            "viewProviders": [
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                }
            ],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isMaster",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "locationId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openServoTestModal",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "_uart1Container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "_uart2Container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "originalUart1Module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "originalUart1Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UartType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "originalUart2Module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "originalUart2Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UartType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "uart1Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "uart2Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "uartPanelOpenState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "addUartModule",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copyUartModule",
                    "args": [
                        {
                            "name": "module",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "module",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moduleCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "servoNameChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "servoStatusChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setModule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setUartModule",
                    "args": [
                        {
                            "name": "uartType",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "module",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "container",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "uartModule",
                            "type": "UartModule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uartType",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "module",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "container",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uartModule",
                            "type": "UartModule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUartModuleForSlot",
                    "args": [
                        {
                            "name": "uartType",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "module",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uartType",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "module",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testServoModal",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uartTypeChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatAccordion"
                },
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionPanelDescription"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "MatCheckbox"
                },
                {
                    "name": "EspSubmoduleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatExpansionPanel, MatAccordion, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription } from '@angular/material/expansion';\r\nimport { MatCheckboxModule, MatCheckbox } from '@angular/material/checkbox'\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { ControllerLocation, UartModule, UartType } from 'astros-common';\r\nimport { KangarooModuleComponent } from '../uart-modules/kangaroo-module/kangaroo-module.component';\r\nimport { EspSubmoduleComponent } from 'src/app/components/esp-submodule/esp-submodule.component';\r\nimport { NgIf, NgFor } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-esp-module',\r\n    templateUrl: './esp-module.component.html',\r\n    styleUrls: ['./esp-module.component.scss'],\r\n    viewProviders: [MatExpansionPanel, MatFormField, MatCheckboxModule],\r\n    standalone: true,\r\n    imports: [\r\n      MatAccordion, \r\n      MatExpansionPanel, \r\n      MatExpansionPanelHeader, \r\n      MatExpansionPanelTitle, \r\n      NgIf, \r\n      FormsModule, \r\n      MatExpansionPanelDescription, \r\n      NgFor, \r\n      MatCheckbox,\r\n      EspSubmoduleComponent\r\n    ]\r\n})\r\nexport class EspModuleComponent {\r\n\r\n  @Output() openServoTestModal = new EventEmitter<any>();\r\n\r\n  @Input()\r\n  isMaster = false;\r\n\r\n  @Input()\r\n  locationId = 0;\r\n\r\n  @Input()\r\n  get module(): any { return this._module; }\r\n  set module(value: any) {\r\n    this._module = value;\r\n    this.setModule();\r\n  }\r\n  _module!: ControllerLocation;\r\n  uartPanelOpenState = false;\r\n\r\n\r\n  @ViewChild('uart1Container', { read: ViewContainerRef })\r\n  get uart1Container(): ViewContainerRef { return this._uart1Container; }\r\n  set uart1Container(value: ViewContainerRef) {\r\n    this._uart1Container = value;\r\n    //this.setUartModuleForSlot(this.originalUart1Type, this.originalUart1Module, 1);\r\n  }\r\n  _uart1Container!: ViewContainerRef;\r\n\r\n  @ViewChild('uart2Container', { read: ViewContainerRef })\r\n  get uart2Container(): ViewContainerRef { return this._uart2Container; }\r\n  set uart2Container(value: ViewContainerRef) {\r\n    this._uart2Container = value;\r\n    //this.setUartModuleForSlot(this.originalUart2Type, this.originalUart2Module, 2);\r\n  }\r\n  _uart2Container!: ViewContainerRef;\r\n\r\n  originalUart1Type!: UartType;\r\n  originalUart1Module!: any;\r\n\r\n  originalUart2Type!: UartType;\r\n  originalUart2Module!: any;\r\n\r\n  components: any[];\r\n  uart1Type: string;\r\n  uart2Type: string;\r\n\r\n\r\n  constructor() {\r\n    this.components = new Array<any>();\r\n    this.uart1Type = '0';\r\n    this.uart2Type = '0';\r\n  }\r\n\r\n  setModule() {\r\n    /*this.originalUart1Type = this.module.uartModule.channels[0].type;\r\n    this.originalUart1Module = this.copyUartModule(this.module.uartModule.channels[0]);\r\n\r\n    this.uart1Type = this.originalUart1Type.toString();\r\n\r\n    this.originalUart2Type = this.module.uartModule.channels[1].type;\r\n    this.originalUart2Module = this.copyUartModule(this.module.uartModule.channels[1]);\r\n\r\n    this.uart2Type = this.originalUart2Type.toString();\r\n    */\r\n  }\r\n\r\n  servoNameChange(id: number, $event: any) {\r\n    this.module.servoModule.channels[id].channelName = $event;\r\n  }\r\n\r\n  servoStatusChange(id: number, $event: any) {\r\n    this.module.servoModule.channels[id].enabled = $event;\r\n  }\r\n\r\n  uartTypeChange($event: any, channel: number) {\r\n\r\n    return;\r\n\r\n    const ut = +$event;\r\n\r\n    if (channel === 1 && ut === this.originalUart1Type) {\r\n      this.setUartModuleForSlot(this.originalUart1Type, this.originalUart1Module, 1);\r\n    }\r\n    else if (channel === 2 && ut === this.originalUart2Type) {\r\n      this.setUartModuleForSlot(this.originalUart2Type, this.originalUart2Module, 2);\r\n    }\r\n    else {\r\n\r\n      let module: any;\r\n      switch (ut) {\r\n        /*case UartType.kangaroo:\r\n          module = new KangarooX2();\r\n          break;\r\n        */\r\n        default:\r\n          module = new Object();\r\n          break;\r\n      }\r\n\r\n      this.setUartModuleForSlot(ut, module, channel);\r\n    }\r\n  }\r\n\r\n  setUartModuleForSlot(uartType: UartType, module: any, channel: number) {\r\n    switch (channel) {\r\n      case 1:\r\n        this.setUartModule(uartType, module, this.uart1Container, this.module.uartModule.channels[0]);\r\n        break;\r\n      case 2:\r\n        this.setUartModule(uartType, module, this.uart2Container, this.module.uartModule.channels[1]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  setUartModule(uartType: UartType, module: any, container: ViewContainerRef, uartModule: UartModule) {\r\n    let component: any;\r\n\r\n    container.clear()\r\n    this.components.splice(0, this.components.length);\r\n\r\n    switch (uartType) {\r\n      case UartType.kangaroo:\r\n        component = container.createComponent(KangarooModuleComponent);\r\n        break;\r\n    }\r\n\r\n    uartModule.uartType = uartType;\r\n    uartModule.subModule = module;\r\n\r\n    if (component) {\r\n      component.instance.module = module;\r\n\r\n      this.components.push(component);\r\n    }\r\n  }\r\n\r\n  moduleCallback(_: unknown) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n\r\n  addUartModule(evt: any) {\r\n    evt.stopPropagation();\r\n\r\n    if (!this.uartPanelOpenState){\r\n      this.uartPanelOpenState = true;\r\n    }\r\n\r\n    this.module.uartModules.push(new UartModule(\r\n      crypto.randomUUID(),\r\n      this.module.locationId,\r\n      UartType.genericSerial,\r\n      1,\r\n      9600,\r\n      \"New Serial Module\"\r\n    ));\r\n    console.log('addUartModule 2', this.uartPanelOpenState);\r\n    \r\n  }\r\n\r\n  copyUartModule(module: any): any {\r\n    let temp: any;\r\n\r\n    switch (module.type) {\r\n      /*case UartType.kangaroo:\r\n        temp = new KangarooController();\r\n        temp.channelOneName = module.module.channelOneName;\r\n        temp.channelTwoName = module.module.channelTwoName;\r\n        break/*/\r\n      default:\r\n        temp = new Object();\r\n        break;\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  testServoModal(channelId: number) {\r\n\r\n    this.openServoTestModal.emit(\r\n      {\r\n        controllerId: this.module.controller.id,\r\n        channelId\r\n      });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./src/assets/styles/variables\";\r\n\r\n.header-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: -webkit-fill-available;\r\n    margin-right: 30px;\r\n\r\n    .header-spacer {\r\n        flex-grow: 1;\r\n    }\r\n\r\n \r\n    .header-button {\r\n        button {\r\n            height: 40px;\r\n            font-size: small;\r\n            padding: 5px 10px;\r\n        }\r\n    }\r\n}\r\n\r\n.uart-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        padding-bottom: 10px;\r\n    }\r\n}\r\n\r\n.uart-module {\r\n\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n\r\n    .type {\r\n        width: 200px;\r\n        margin-right: 20px;\r\n\r\n        select {\r\n            padding-top: 4px;\r\n            width: 100%;\r\n            max-width: 300px;\r\n            font-size: large;\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    .input {\r\n        flex-grow: 1;\r\n        margin: 0px;\r\n        max-width: 400px;\r\n\r\n        input {\r\n            padding: 2px;\r\n            font-size: large;\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.servo-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        border: 2px solid $color-dark;\r\n        padding: 10px;\r\n    }\r\n\r\n    .servo-channel {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .servo-channel-row {\r\n            display: flex;\r\n            flex-direction: row;\r\n            flex-wrap: wrap;\r\n\r\n            .label {\r\n                font-size: large;\r\n                width: 120px;\r\n            }\r\n            \r\n            .label-ms {\r\n                font-size: large;\r\n                margin-right: 10px;\r\n            }\r\n\r\n            .test-button{\r\n                button{\r\n                    height: 30px;\r\n                    width: 100px;\r\n                    font-size: large;\r\n                    padding: 5px 0px;\r\n                    margin: 0px 5px;\r\n                }\r\n            }\r\n\r\n            .input {\r\n                flex-grow: 1;\r\n                margin: 0px;\r\n                max-width: 400px;\r\n                margin-right: 20px;\r\n\r\n                input {\r\n                    padding: 2px;\r\n                    font-size: large;\r\n                    width: 100%;\r\n\r\n                }\r\n            }\r\n\r\n            .type {\r\n                width: 120px;\r\n                text-align: center;\r\n                margin: 0px;\r\n                margin-right: 20px;\r\n\r\n                select {\r\n                    padding-top: 4px;\r\n                    width: 100%;\r\n                    max-width: 130px;\r\n                    font-size: large;\r\n                    display: block;\r\n\r\n                }\r\n            }\r\n\r\n            .limit {\r\n                margin-right: 20px;\r\n\r\n                input {\r\n                    text-align: center;\r\n                    width: 50px;\r\n                    padding: 2px;\r\n                    font-size: large;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.i2c-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        border: 2px solid $color-dark;\r\n        padding: 10px;\r\n    }\r\n\r\n    .i2c-channel {\r\n\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n\r\n        .label {\r\n            font-size: large;\r\n            width: 120px;\r\n        }\r\n\r\n        .input {\r\n            flex-grow: 1;\r\n            max-width: 400px;\r\n\r\n            input {\r\n                font-size: large;\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        .enabled {\r\n            width: 120px;\r\n            text-align: center;\r\n            margin: 0px;\r\n            margin-right: 20px;\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n.gpio-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n\r\n    li {\r\n        border: 2px solid $color-dark;\r\n        padding: 10px;\r\n    }\r\n\r\n    .gpio-channel {\r\n\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n\r\n        .label {\r\n            font-size: large;\r\n            width: 120px;\r\n        }\r\n\r\n        .input {\r\n            flex-grow: 1;\r\n            max-width: 400px;\r\n\r\n            input {\r\n                font-size: large;\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        .enabled {\r\n            width: 120px;\r\n            text-align: center;\r\n            margin: 0px;\r\n            margin-right: 20px;\r\n\r\n        }\r\n\r\n        .default-low {\r\n            width: 120px;\r\n            text-align: center;\r\n            margin: 0px;\r\n            margin-right: 20px;\r\n\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./esp-module.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 74
            },
            "extends": [],
            "accessors": {
                "module": {
                    "name": "module",
                    "setSignature": {
                        "name": "module",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "module",
                        "type": "any",
                        "returnType": "any",
                        "line": 41
                    }
                },
                "uart1Container": {
                    "name": "uart1Container",
                    "setSignature": {
                        "name": "uart1Container",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "uart1Container",
                        "type": "",
                        "returnType": "ViewContainerRef",
                        "line": 51
                    }
                },
                "uart2Container": {
                    "name": "uart2Container",
                    "setSignature": {
                        "name": "uart2Container",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "uart2Container",
                        "type": "",
                        "returnType": "ViewContainerRef",
                        "line": 59
                    }
                }
            },
            "templateData": "<mat-accordion>\r\n    <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>Serial Port 1 configuration</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <div *ngIf=\"isMaster\" class=\"uart-module\">\r\n            <div class=\"type\">\r\n                <select title=\"Serial Type\" disabled>\r\n                    <option value=\"0\" selected>Reserved</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"input\"><input matInput placeholder=\"AstrOs Interface\" disabled /></div>\r\n        </div>\r\n\r\n        <div *ngIf=\"!isMaster\" class=\"uart-module\">\r\n            <div class=\"type\">\r\n                <select title=\"Serial Type\" (ngModelChange)=\"uartTypeChange($event, 1)\" [(ngModel)]=uart1Type>\r\n                    <option value=\"0\" selected>Disabled</option>\r\n                    <option value=\"1\">Generic Serial</option>\r\n                    <option value=\"2\">Kangaroo X2</option>\r\n                    <option value=\"3\">Human Cyborg Relations</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"input\"><input matInput placeholder=\"Name\" /></div>\r\n        </div>\r\n        <ng-template #uart1Container></ng-template>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel [expanded]=\"uartPanelOpenState\" (closed)=\"uartPanelOpenState = false\">\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>Serial Modules</mat-panel-title>\r\n            <mat-panel-description>\r\n                <div class=\"header-box\">\r\n                    <div class=\"header-spacer\"></div>\r\n                    <div class=\"header-button\">\r\n                        <button (click)=\"addUartModule($event)\">Add Serial Module</button>\r\n                    </div>\r\n                </div>\r\n            </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n        <ul class=\"uart-list\">\r\n            <li *ngFor=\"let module of module.uartModules\">\r\n                <app-esp-submodule ></app-esp-submodule>\r\n            </li>\r\n        </ul>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>GPIO configuration</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <ul class=\"servo-list\">\r\n            <li *ngFor=\"let channel of module.gpioModule.channels\">\r\n                <div class=\"gpio-channel\">\r\n                    <div class=\"label\">Channel {{channel.id}}</div>\r\n                    <div class=\"input\"><input matInput placeholder=\"Name\" [(ngModel)]=\"channel.channelName\" /></div>\r\n                    <div class=\"enabled\">\r\n                        <mat-checkbox [(ngModel)]=\"channel.enabled\">Enabled</mat-checkbox>\r\n                    </div>\r\n                    <div class=\"enabled\">\r\n                        <mat-checkbox [(ngModel)]=\"channel.defaultLow\">Default Low?</mat-checkbox>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>Servo configuration</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <!-->\r\n        <ul class=\"servo-list\">\r\n            <li *ngFor=\"let channel of module.servoModule.channels\">\r\n                <div class=\"servo-channel\">\r\n                    <div class=\"servo-channel-row\">\r\n                        <div class=\"label\">Channel {{channel.id}}</div>\r\n                        <div class=\"input\"><input matInput placeholder=\"Name\" [(ngModel)]=\"channel.channelName\" /></div>\r\n                        <div class=\"type\">\r\n                            <mat-checkbox [(ngModel)]=\"channel.enabled\">Enabled</mat-checkbox>\r\n                        </div>\r\n                        <div class=\"type\">\r\n                            <mat-checkbox [(ngModel)]=\"channel.inverted\">Inverted</mat-checkbox>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"servo-channel-row\">\r\n                        <div class=\"label-ms\">Min μS</div>\r\n                        <div class=\"limit\">\r\n                            <input matInput placeholder=\"0\" [(ngModel)]=\"channel.minPos\" />\r\n                        </div>\r\n                        <div class=\"label-ms\">Max μS</div>\r\n                        <div class=\"limit\">\r\n                            <input matInput placeholder=\"0\" [(ngModel)]=\"channel.maxPos\" />\r\n                        </div>\r\n                        <div class=\"label-ms\">Home μS</div>\r\n                        <div class=\"limit\">\r\n                            <input matInput placeholder=\"0\" [(ngModel)]=\"channel.homePos\" />\r\n                        </div>\r\n                        <div class=\"test-button\">\r\n                            <button (click)=\"testServoModal(channel.id)\">Test</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    -->\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>I2C configuration</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <ul class=\"i2c-list\">\r\n            <li *ngFor=\"let channel of module.i2cModule.channels\">\r\n                <div class=\"i2c-channel\">\r\n                    <div class=\"label\">Channel {{channel.id}}</div>\r\n                    <div class=\"input\"><input matInput placeholder=\"Name\" [(ngModel)]=\"channel.channelName\"\r\n                            [disabled]=\"channel.channelName.toLowerCase() === 'reserved'\" /></div>\r\n                    <div class=\"enabled\">\r\n                        <mat-checkbox [(ngModel)]=\"channel.enabled\"\r\n                            [disabled]=\"channel.channelName.toLowerCase() === 'reserved'\">Enabled</mat-checkbox>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </mat-expansion-panel>\r\n</mat-accordion>"
        },
        {
            "name": "EspSubmoduleComponent",
            "id": "component-EspSubmoduleComponent-418c3030f7155f3c46a4d9878a21b4413dfb1cd8c5d2957ad9ad1ea967446044b8ec519a14ab34c604e626fcaa36ed09064fc1d9d8f09cb8895a6407c2c36525",
            "file": "src/app/components/esp-submodule/esp-submodule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-esp-submodule",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./esp-submodule.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_configContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatAccordion"
                },
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle } from '@angular/material/expansion';\r\n\r\n@Component({\r\n  selector: 'app-esp-submodule',\r\n  templateUrl: './esp-submodule.component.html',\r\n  styleUrl: './esp-submodule.component.scss',\r\n  imports: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle\r\n  ],\r\n  standalone: true\r\n})\r\nexport class EspSubmoduleComponent {\r\n\r\n  @ViewChild('configContainer', { read: ViewContainerRef })\r\n  get configContainer(): ViewContainerRef { return this._configContainer; }\r\n  set configContainer(value: ViewContainerRef) {\r\n    this._configContainer = value;\r\n  }\r\n  _configContainer!: ViewContainerRef;\r\n}\r\n",
            "styleUrl": "./esp-submodule.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "configContainer": {
                    "name": "configContainer",
                    "setSignature": {
                        "name": "configContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "configContainer",
                        "type": "",
                        "returnType": "ViewContainerRef",
                        "line": 19
                    }
                }
            },
            "templateData": "<mat-accordion>\r\n    <mat-expansion-panel>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>Test</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <div>Test</div>\r\n        <ng-template #configContainer></ng-template>\r\n    </mat-expansion-panel>\r\n</mat-accordion>"
        },
        {
            "name": "FormatModalComponent",
            "id": "component-FormatModalComponent-b9189ad0ab5a64050d96da0ca84c6919b4f96537137bf968c41272f03b37e9829286a3f2faa045482d2e220f4b61a62c5aa10b5d35b03636206334bb333247ed",
            "file": "src/app/pages/settings/modals/format-modal/format-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-format-modal",
            "styleUrls": [
                "./format-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./format-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "'close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "controllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Controller[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "formatSdEvent",
                    "defaultValue": "'formatSD'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ok",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalBaseComponent, ModalCallbackResult } from 'src/app/modal';\r\nimport { ModalResources } from 'src/app/shared/modal-resources';\r\nimport { NgFor } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\ninterface ResourceController {\r\n  id: number,\r\n  name: string,\r\n  address: string,\r\n}\r\n\r\ninterface Controller {\r\n  id: number,\r\n  name: string,\r\n  address: string,\r\n  selected: boolean\r\n}\r\n\r\n@Component({\r\n    selector: 'app-format-modal',\r\n    templateUrl: './format-modal.component.html',\r\n    styleUrls: ['./format-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgFor, FormsModule]\r\n})\r\nexport class FormatModalComponent extends ModalBaseComponent implements OnInit {\r\n\r\n  public static formatSdEvent = 'formatSD';\r\n  public static closeEvent = 'close';\r\n\r\n  controllers: Controller[] = [];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ModalResources.controllers)) {\r\n      for (const controller of this.resources.get(ModalResources.controllers) as ResourceController[]) {\r\n        this.controllers.push(\r\n          {\r\n            id: controller.id, name: controller.name, address: controller.address, selected: false\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  ok() {\r\n\r\n    const result = [];\r\n\r\n    for (const controller of this.controllers) {\r\n      if (controller.selected) {\r\n        result.push({ name: controller.name, address: controller.address });\r\n      }\r\n    }\r\n\r\n    this.modalCallback.emit(new ModalCallbackResult( FormatModalComponent.formatSdEvent, result));\r\n  }\r\n\r\n  closeModal() {\r\n    this.modalCallback.emit(new ModalCallbackResult(FormatModalComponent.closeEvent, null));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".format-modal {\r\n\r\n    width: 400px;\r\n\r\n    .modal-body {\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n\r\n        .content {\r\n            width: 300px;\r\n            height: 120px;\r\n            overflow-x: hidden;\r\n            overflow-y: auto;\r\n            display: inline;\r\n\r\n             \r\n                ::ng-deep .mat-checkbox .mat-checkbox-frame {\r\n                    border-color: black;\r\n                    background-color: #dddddd\r\n                }\r\n\r\n                ::ng-deep .mat-checkbox-checked.mat-accent:not(.mat-checkbox-disabled) .mat-checkbox-background {\r\n                    border-color: black;\r\n                    background-color:  #dddddd !important;\r\n                  }\r\n\r\n                .controller {\r\n                    font-size: 20px;\r\n                    padding-bottom: 4px;\r\n\r\n                    input {\r\n                        height: 20px;\r\n                        width: 20px;\r\n                        vertical-align: text-bottom;\r\n                    }\r\n\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n.modal-buttons {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.button-spacer {\r\n    flex-grow: 1;\r\n}\r\n\r\n.button-grouper {\r\n    button {\r\n        width: 100px;\r\n        font-size: large;\r\n        padding: 5px 0px;\r\n        margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n        display: none;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 620px) {\r\n    .scripter-modal {\r\n        width: 400px;\r\n    }\r\n}",
                    "styleUrl": "./format-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"format-modal\">\r\n    <h1>Format Module SD Card</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <ng-container *ngFor=\"let ctl of controllers\">\r\n                <div class=\"controller\">\r\n                    <label><input type=\"checkbox\" [(ngModel)]=\"ctl.selected\">{{ctl.name}}</label>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"ok();\">OK</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "GenericSerialModuleComponent",
            "id": "component-GenericSerialModuleComponent-d20176cd6b7aecf1350f61b5676c25ae0fef0d7b6fde496dd56e5f2c198e61c9fd749e4a7fe9019872e2fdf7cb39e8b1ea9b515468ae4ec0ff066e66dad147a5",
            "file": "src/app/pages/modules/uart-modules/generic-serial-module/generic-serial-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-serial-module",
            "styleUrls": [
                "./generic-serial-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-serial-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-generic-serial-module',\r\n    templateUrl: './generic-serial-module.component.html',\r\n    styleUrls: ['./generic-serial-module.component.scss'],\r\n    standalone: true\r\n})\r\nexport class GenericSerialModuleComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./generic-serial-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<p>generic-serial-module works!</p>\r\n"
        },
        {
            "name": "GpioEventModalComponent",
            "id": "component-GpioEventModalComponent-7f04991a5bd2cbd5233a72ee623e9d03615abc1aade84fa1c75b8fb96e946175d186ad3e9e12d8d13dd6bdd4fe807c85e8941823618ab0663d182b5c45db5aeb",
            "file": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gpio-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./gpio-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gpio-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "state",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { GpioEvent, ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class GpioEventModalResources {\r\n  public static gpioId = 'gpioId';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-gpio-event-modal',\r\n    templateUrl: './gpio-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './gpio-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class GpioEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  channelId!: number;\r\n  state = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(ScriptEventModalResources.scriptEvent) as ScriptEvent;\r\n\r\n    this.channelId = this.resources.get(GpioEventModalResources.gpioId) as number;\r\n\r\n    if (this.scriptEvent.dataJson != '') {\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.state = payload.setHigh ? 1 : 0;\r\n    }\r\n\r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  selectChange($event: any) {\r\n    this.state = $event.target.value;\r\n  }\r\n\r\n  addEvent() {\r\n\r\n    if (+this.eventTime > this.maxTime) {\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\r\n      return;\r\n    }\r\n\r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n\r\n    const data = new GpioEvent(+this.channelId, +this.state === 1 ? true : false);\r\n\r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime\r\n      },\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "\r\nselect {\r\n    display: block;\r\n    font-size: x-large;\r\n    margin: 20px 10px;\r\n    width: 380px;\r\n  }\r\n",
                    "styleUrl": "./gpio-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>GPIO Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\"\r\n                    ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" [ngModel]=\"eventTime | number : '1.0-1'\"\r\n                    (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">State</label>\r\n                <select id=\"state-select\" title=\"State\" [(ngModel)]=\"state\"\r\n                (change)=\"selectChange($event)\">\r\n                <option value=\"0\" selected>Low</option>\r\n                <option value=\"1\">High</option>\r\n            </select>\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-38bbc9950298b0a695e84579248faae42c11049ef5df5d93f7cbdf6cfc6c6bb9aefc10c750a5ce8bb8a31fe6af20156ed422d76f1846b7394ccc0cb1c02e5972",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"logout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"login.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"createAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "createAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                },
                {
                    "name": "login",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                },
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"logout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"login.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"createAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  login = new EventEmitter<Event>();\n\n  @Output()\n  logout = new EventEmitter<Event>();\n\n  @Output()\n  createAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-5b350f73dda3cfee683d23323b3d71a6824df8681c1212dce733ec0efc3b8a17ab92380caef27cfcedac0220400638974981f3697a9e8888782172e6ccb28d33",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss'],\r\n    standalone: true\r\n})\r\nexport class HomeComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"page\">\r\n    Home\r\n</div>"
        },
        {
            "name": "HumanCyborgModalComponent",
            "id": "component-HumanCyborgModalComponent-ab4604c932fe3bc7b37f7a5d85db93db78b096a28ae98b0ad8744ac17ab88ab47296d3813b32fe0ffe60e76e81f8e7aa8d065d124ab2bdbe2454f3a2effd0621",
            "file": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-human-cyborg-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./human-cyborg-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./human-cyborg-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "commandCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "commands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "faRemove",
                    "defaultValue": "faBan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "hasValueA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HumanCyborgRelationsCmd[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "hasValueB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HumanCyborgRelationsCmd[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "selectedCommands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcrCommand[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "valueA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "valueB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addCommand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "categoryChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "commandChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatSelectedCommand",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HcrCommand",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HcrCommand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrHasAValue",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrHasBValue",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrListItem",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: HumanCyborgRelationsCmd; name: any; }",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hcrName",
                    "args": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cmd",
                            "type": "HumanCyborgRelationsCmd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCommand",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAvailableCommands",
                    "args": [
                        {
                            "name": "category",
                            "type": "HcrCommandCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "HcrCommandCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  BaseEventModalComponent, \r\n  ScriptEventModalResources \r\n} from '../base-event-modal/base-event-modal.component';\r\nimport { \r\n  HcrCommand, \r\n  HcrCommandCategory, \r\n  HumanCyborgRelationsCmd, \r\n  HumanCyborgRelationsEvent, \r\n  HumanCyborgRelationsModule, \r\n  ScriptEvent\r\n} from 'astros-common';\r\nimport { faBan } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor, DecimalPipe } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\n\r\nexport class HcrModalResources {\r\n  public static channelId = 'channelId';\r\n  public static baudRate = 'baudRate';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-human-cyborg-modal',\r\n  templateUrl: './human-cyborg-modal.component.html',\r\n  styleUrls: ['../base-event-modal/base-event-modal.component.scss', './human-cyborg-modal.component.scss'],\r\n  standalone: true,\r\n  imports: [FormsModule, NgFor, FontAwesomeModule, DecimalPipe]\r\n})\r\nexport class HumanCyborgModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  faRemove = faBan;\r\n\r\n  uartChannel!: number;\r\n  baudRate!: number;\r\n  commandCategory: string;\r\n  command!: string;\r\n  valueA!: string;\r\n  valueB!: string;\r\n\r\n  selectedCommands: HcrCommand[];\r\n  commands: any[];\r\n\r\n  hasValueA: HumanCyborgRelationsCmd[];\r\n  hasValueB: HumanCyborgRelationsCmd[];\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n\r\n    this.selectedCommands = new Array<HcrCommand>();\r\n    this.commands = new Array<any>();\r\n    this.commandCategory = HcrCommandCategory.stimuli.toString();\r\n    this.setAvailableCommands(+this.commandCategory);\r\n\r\n    this.hasValueA = new Array<HumanCyborgRelationsCmd>();\r\n    this.hasValueA.push(\r\n      HumanCyborgRelationsCmd.minSecondsBetweenMusings,\r\n      HumanCyborgRelationsCmd.maxSecondsBetweenMusings,\r\n      HumanCyborgRelationsCmd.playWavOnA,\r\n      HumanCyborgRelationsCmd.playWavOnB,\r\n      HumanCyborgRelationsCmd.vocalizerVolume,\r\n      HumanCyborgRelationsCmd.wavAVolume,\r\n      HumanCyborgRelationsCmd.wavBVolume,\r\n      HumanCyborgRelationsCmd.setHappyLevel,\r\n      HumanCyborgRelationsCmd.setSadLevel,\r\n      HumanCyborgRelationsCmd.setMadLevel,\r\n      HumanCyborgRelationsCmd.setScaredLevel\r\n    );\r\n\r\n    this.hasValueB = new Array<HumanCyborgRelationsCmd>();\r\n    this.hasValueB.push(\r\n      HumanCyborgRelationsCmd.playSdRandomOnA,\r\n      HumanCyborgRelationsCmd.playSdRandomOnB\r\n    );\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)) {\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent) {\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.uartChannel = this.resources.get(HcrModalResources.channelId) as number;\r\n    this.baudRate = this.resources.get(HcrModalResources.baudRate) as number;\r\n    this.scriptEvent = this.resources.get(HcrModalResources.scriptEvent) as ScriptEvent;\r\n\r\n    if (this.scriptEvent.dataJson != '') {\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.selectedCommands.push(...payload.commands)\r\n    }\r\n\r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  categoryChange(_: unknown) {\r\n    this.errorMessage = '';\r\n    this.setAvailableCommands(+this.commandCategory);\r\n  }\r\n\r\n  commandChange(_: unknown) {\r\n    this.errorMessage = '';\r\n    if (this.hcrHasBValue(+this.command)) {\r\n      document.getElementById('value-a')?.removeAttribute('disabled');\r\n      document.getElementById('value-b')?.removeAttribute('disabled');\r\n      return;\r\n    }\r\n    if (this.hcrHasAValue(+this.command)) {\r\n      document.getElementById('value-a')?.removeAttribute('disabled');\r\n      document.getElementById('value-b')?.setAttribute('disabled', 'disabled');\r\n      return;\r\n    }\r\n\r\n    document.getElementById('value-a')?.setAttribute('disabled', 'disabled');\r\n    document.getElementById('b')?.setAttribute('disabled', 'disabled');\r\n\r\n  }\r\n\r\n  setAvailableCommands(category: HcrCommandCategory) {\r\n    this.commands.splice(0);\r\n\r\n    switch (category) {\r\n      case HcrCommandCategory.stimuli:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildHappy),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeHappy),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildSad),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeSad),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildAngry),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeAngry),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.mildScared),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.extremeScared),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.overload));\r\n        break;\r\n      case HcrCommandCategory.muse:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enableMuse),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.disableMuse),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.toggleMuse),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.triggerMusing),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.minSecondsBetweenMusings),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.maxSecondsBetweenMusings));\r\n        break;\r\n      case HcrCommandCategory.sdWav:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnA),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playWavOnB),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnA),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.playSdRandomOnB));\r\n        break;\r\n      case HcrCommandCategory.stop:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.panicStop),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.gracefulStop),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnA),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.stopWavOnB));\r\n        break;\r\n      case HcrCommandCategory.volume:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.vocalizerVolume),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.wavAVolume),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.wavBVolume));\r\n        break;\r\n      case HcrCommandCategory.override:\r\n        this.commands.push(\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enableImprov),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enableCanonical),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.enablePersonalityOverride),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.disablePersonalityOverride),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.zeroEmotions),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setHappyLevel),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setSadLevel),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setMadLevel),\r\n          this.hcrListItem(HumanCyborgRelationsCmd.setScaredLevel));\r\n        break;\r\n    }\r\n\r\n    if (this.commands.length > 0) {\r\n      this.command = this.commands[0];\r\n    }\r\n  }\r\n\r\n  addCommand() {\r\n\r\n    let missingA = false;\r\n    let missingB = false;\r\n\r\n    if (this.hcrHasBValue(+this.command)) {\r\n      if (this.valueA === undefined || this.valueA === null) {\r\n        missingA = true;\r\n      }\r\n      if (this.valueB === undefined || this.valueB === null) {\r\n        missingB = true;\r\n      }\r\n    }\r\n\r\n    if (this.hcrHasAValue(+this.command)) {\r\n      if (this.valueA === undefined || this.valueA === null) {\r\n        missingA = true;\r\n      }\r\n    }\r\n\r\n    if (missingA || missingB) {\r\n      this.errorMessage = `Required Values Missing: ${missingA ? 'A' : ''}${missingA && missingB ? ',' : ''}${missingB ? 'B' : ''}`;\r\n      return;\r\n    }\r\n\r\n    this.selectedCommands.push(new HcrCommand(crypto.randomUUID().toString(), +this.commandCategory, +this.command, +this.valueA, +this.valueB));\r\n  }\r\n\r\n\r\n  removeCommand(id: string) {\r\n    const cmdIdx = this.selectedCommands?.findIndex(x => x.id === id);\r\n    if (cmdIdx != undefined && cmdIdx > -1) {\r\n      this.selectedCommands.splice(cmdIdx, 1);\r\n    }\r\n  }\r\n\r\n  addEvent() {\r\n\r\n    if (+this.eventTime > this.maxTime) {\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime / this.timeFactor}`;\r\n      return;\r\n    }\r\n\r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n\r\n    const data = new HumanCyborgRelationsEvent(this.uartChannel, this.baudRate, this.selectedCommands);\r\n\r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime\r\n      },\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  formatSelectedCommand(cmd: HcrCommand) {\r\n\r\n    if (this.hcrHasBValue(cmd.command)) {\r\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA} ${cmd.valueB}`\r\n    }\r\n\r\n    if (this.hcrHasAValue(cmd.command)) {\r\n      return `${this.hcrName(cmd.command)}: ${cmd.valueA}`\r\n    }\r\n\r\n    return this.hcrName(cmd.command)\r\n  }\r\n\r\n  hcrListItem(cmd: HumanCyborgRelationsCmd) {\r\n    return { id: cmd, name: this.hcrName(cmd) }\r\n  }\r\n\r\n  hcrName(cmd: HumanCyborgRelationsCmd) {\r\n    return HumanCyborgRelationsModule.getCommandName(cmd);\r\n  }\r\n\r\n  hcrHasBValue(cmd: HumanCyborgRelationsCmd) {\r\n    return this.hasValueB.find(x => x === cmd) !== undefined\r\n  }\r\n\r\n  hcrHasAValue(cmd: HumanCyborgRelationsCmd) {\r\n    return this.hasValueA.find(x => x === cmd) !== undefined\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": ".hcr-primary-label {\r\n    font-weight:500;\r\n}\r\n\r\n.hcr-listbox-container {\r\n    display: block;\r\n    width: 306px;\r\n    border: 1px solid black;\r\n}\r\n\r\n.hcr-listbox {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    height: 80px;\r\n    overflow: auto;\r\n}\r\n\r\n.hcr-list-item {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.hcr-cmd-label{\r\n    flex-grow: 1;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n.hcr-remove-cmd{\r\n    font-size: large;\r\n    padding: 0;\r\n    margin: 0px 4px;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: black;\r\n    cursor: pointer;\r\n}\r\n\r\n.hcr-button-container {\r\n    margin-top: 4px;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.hcr-button {\r\n        height: 28px;\r\n        font-size: large;\r\n        width: 60px;\r\n        padding: 0px;\r\n\r\n}",
                    "styleUrl": "./human-cyborg-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 50
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Human Cyborg Relations Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div class=\"hcr-listbox-container\">\r\n                <ul class=\"hcr-listbox\">\r\n                    <li *ngFor=\"let command of selectedCommands\">\r\n                        <div class=\"hcr-list-item\">\r\n                            <div class=\"hcr-cmd-label\">{{formatSelectedCommand(command)}}</div>\r\n                            <div>\r\n                                <button class=\"hcr-remove-cmd\" title=\"remove\" (click)=\"removeCommand(command.id)\"><fa-icon [icon]=\"faRemove\"></fa-icon></button>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <hr/>\r\n            <div>\r\n                <label class=\"hcr-primary-label\" htmlFor=\"commandCategory\">Command Category</label>\r\n                <select id=\"commandCategory\" title=\"Command Category\" [(ngModel)]=\"commandCategory\" (change)=\"categoryChange($event)\">\r\n                    <option value=\"1\">Stimuli</option>\r\n                    <option value=\"2\">Muse</option>\r\n                    <option value=\"3\">SD Wav</option>\r\n                    <option value=\"4\">Stop</option>\r\n                    <option value=\"5\">Volume</option>\r\n                    <option value=\"6\">Override</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label class=\"hcr-primary-label\" htmlFor=\"command\">Command</label>\r\n                <select id=\"command\" title=\"Command\" [(ngModel)]=\"command\" (change)=\"commandChange($event)\">\r\n                    <option [ngValue]=\"null\" disabled>Select Command</option>\r\n                    <option *ngFor=\"let command of commands\" [ngValue]=\"command.id\">{{command.name}}</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label for=\"valueA\">Value A</label>\r\n                <input id=\"value-a\" name=\"valueA\" matInput placeholder=\"Value A\" type=\"number\" step=\"1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"valueA | number : '1.0-1'\" (ngModelChange)=\"valueA = $event\" disabled/>\r\n            </div>\r\n            <div>\r\n                <label for=\"valueB\">Value B</label>\r\n                <input id=\"value-b\" name=\"valueB\" matInput placeholder=\"Value B\" type=\"number\" step=\"1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"valueB | number : '1.0-1'\" (ngModelChange)=\"valueB = $event\" disabled/>\r\n            </div>\r\n            <div class=\"hcr-button-container\">\r\n                <button class=\"hcr-button\" (click)=\"addCommand()\">Add</button>\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "I2cEventModalComponent",
            "id": "component-I2cEventModalComponent-956fa8e69ffbc78eaf1b365697393771bbb054213d503f0071120d4bf261d2868db1afc2dc34af34af15b1e64f2bd1a6d2c2ae1e7f52724205287d8bbf7e3906",
            "file": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-i2c-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./i2c-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./i2c-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { I2cEvent, ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class I2cEventModalResources {\r\n  public static i2cId = 'i2cId';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-i2c-event-modal',\r\n    templateUrl: './i2c-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './i2c-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class I2cEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n \r\n  channelId!: number;\r\n  message: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.message = '';\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(I2cEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    this.channelId = this.resources.get(I2cEventModalResources.i2cId) as number;\r\n\r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.message= payload.message;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n    \r\n    const data = new I2cEvent( +this.channelId, this.message);\r\n    \r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./i2c-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>I2C Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\"\r\n                    ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" [ngModel]=\"eventTime | number : '1.0-1'\"\r\n                    (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">I2C Message</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"message\" />\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "KangarooEventModalComponent",
            "id": "component-KangarooEventModalComponent-3f70d64487132c5a294df448771f609f20c7a45a1d1ee69fbfcb9eea3d25e810741a4e4e932e74463ee489240531fb988942ddc7bdf0dda48d9b19e0fafd769e",
            "file": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kangaroo-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./kangaroo-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kangaroo-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "ch1Action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "ch1PosDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "ch1Position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "ch1SpdDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "ch1Speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "ch2Action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "ch2PosDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "ch2Position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "ch2SpdDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "ch2Speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "channel1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "channel2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "kangaroo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KangarooX2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  KangarooAction, \r\n  KangarooX2, \r\n  KangarooEvent, \r\n  ScriptEvent \r\n} from 'astros-common'\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class KangarooEventModalResources {\r\n  public static channelId = 'channelId';\r\n  public static baudRate = 'baudRate';\r\n  public static kangaroo = 'kangaroo';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-kangaroo-event-modal',\r\n    templateUrl: './kangaroo-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './kangaroo-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class KangarooEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  uartChannel!: number;\r\n  baudRate!: number;\r\n  kangaroo!: KangarooX2;\r\n\r\n  channel1: string;\r\n  ch1Action: string;\r\n  ch1Speed?: number;\r\n  ch1Position?: number;\r\n  ch1SpdDisabled: boolean;\r\n  ch1PosDisabled: boolean;\r\n\r\n  channel2: string;\r\n  ch2Action: string;\r\n  ch2Speed?: number;\r\n  ch2Position?: number;\r\n  ch2SpdDisabled: boolean;\r\n  ch2PosDisabled: boolean;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    \r\n    this.channel1 = 'Channel 1';\r\n    this.channel2 = 'Channel 2';\r\n\r\n    this.ch1Action = '0';\r\n    this.ch2Action = '0';\r\n\r\n    this.ch1SpdDisabled = true;\r\n    this.ch1PosDisabled = true;\r\n\r\n    this.ch2SpdDisabled = true;\r\n    this.ch2PosDisabled = true;\r\n\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.uartChannel = this.resources.get(KangarooEventModalResources.channelId) as number;\r\n    this.baudRate = this.resources.get(KangarooEventModalResources.baudRate) as number;\r\n    this.kangaroo = this.resources.get(KangarooEventModalResources.kangaroo) as KangarooX2;\r\n\r\n    this.scriptEvent = this.resources.get(KangarooEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.ch1Action = payload.ch1Action.toString();\r\n      this.ch1Speed = payload.ch1Speed;\r\n      this.ch1Position = payload.ch1Position;\r\n\r\n      this.ch2Action = payload.ch2Action.toString();\r\n      this.ch2Speed = payload.ch2Speed;\r\n      this.ch2Position = payload.ch2Position;\r\n    }\r\n    \r\n    this.ch1SpdDisabled = +this.ch1Action !== KangarooAction.speed && +this.ch1Action !== KangarooAction.position;\r\n    this.ch1PosDisabled = +this.ch1Action !== KangarooAction.position;\r\n\r\n    this.ch2SpdDisabled = +this.ch2Action !== KangarooAction.speed && +this.ch2Action !== KangarooAction.position;\r\n    this.ch2PosDisabled = +this.ch2Action !== KangarooAction.position;\r\n    \r\n\r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  modalChange($event: any) {\r\n    if ($event.target.id === 'ch1select') {\r\n    \r\n      this.ch1SpdDisabled  = +this.ch1Action !== 3 && +this.ch1Action !== 4;\r\n      this.ch1PosDisabled = +this.ch1Action !== 4;\r\n\r\n      if (+this.ch1Action !== 3 && +this.ch1Action !== 4){\r\n        this.ch1Speed = undefined;\r\n      }\r\n      if (+this.ch1Action !== 4){\r\n        this.ch1Position = undefined;\r\n      } \r\n    }\r\n    else if ($event.target.id === 'ch2select') {\r\n\r\n      this.ch2SpdDisabled  = +this.ch2Action !== 3 && +this.ch2Action !== 4;\r\n      this.ch2PosDisabled = +this.ch2Action !== 4;\r\n\r\n      if (+this.ch2Action !== 3 && +this.ch2Action !== 4){\r\n        this.ch2Speed = undefined;\r\n      }\r\n      if (+this.ch2Action !== 4){\r\n        this.ch2Position = undefined;\r\n      } \r\n    }\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n   \r\n    const data = new KangarooEvent(this.uartChannel, this.baudRate, +this.ch1Action, this.ch1Speed ?? 0, this.ch1Position ?? 0, \r\n      +this.ch2Action, this.ch2Speed ?? 0, this.ch2Position ?? 0)\r\n   \r\n    this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    )\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": ".kangaroo-channel-label {\r\n    font-size: larger;\r\n    font-weight:500;\r\n    margin-bottom: 12px !important;\r\n}\r\n\r\n.kangaroo-input{\r\n    \r\n    display: inline !important;\r\n    width: 200px !important;\r\n}\r\n\r\n.kangaroo-speed-label {\r\n\r\n    margin-right: 42px;\r\n    display: inline !important; \r\n}\r\n\r\n.kangaroo-position-label {\r\n\r\n    margin-right: 25px;\r\n    display: inline !important; \r\n}",
                    "styleUrl": "./kangaroo-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Kangaroo Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <hr/>\r\n            <div>\r\n                <label class=\"kangaroo-channel-label\" for=\"ch2select\">{{kangaroo.ch1Name}}</label>\r\n                <select id=\"ch1select\" title=\"channel 1\" [(ngModel)]=\"ch1Action\" (change)=\"modalChange($event)\">\r\n                    <option value=\"0\" selected>None</option>\r\n                    <option value=\"1\">Start</option>\r\n                    <option value=\"2\">Home</option>\r\n                    <option value=\"3\">Speed</option>\r\n                    <option value=\"4\">Position</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label class=\"kangaroo-speed-label\" for=\"ch1spd\">Speed</label>\r\n                <input class=\"kangaroo-input\" name=\"ch1spd\" matInput placeholder=\"Speed\" [disabled]=\"ch1SpdDisabled\"  [(ngModel)]=\"ch1Speed\" type=\"number\" />\r\n                <label class=\"kangaroo-position-label\" for=\"ch1pos\">Position</label>\r\n                <input class=\"kangaroo-input\" name=\"ch1pos\" matInput placeholder=\"Position\" [disabled]=\"ch1PosDisabled\" [(ngModel)]=\"ch1Position\" type=\"number\" />\r\n            </div>\r\n            <hr/>\r\n            <div>\r\n                <label class=\"kangaroo-channel-label\" for=\"ch2select\">{{kangaroo.ch2Name}}</label>\r\n                <select id=\"ch2select\" title=\"channel 2\" [(ngModel)]=\"ch2Action\" (change)=\"modalChange($event)\">\r\n                    <option value=\"0\" selected>None</option>\r\n                    <option value=\"1\">Start</option>\r\n                    <option value=\"2\">Home</option>\r\n                    <option value=\"3\">Speed</option>\r\n                    <option value=\"4\">Position</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"kangaroo-input\">\r\n                <label class=\"kangaroo-speed-label\" for=\"ch2spd\">Speed</label>\r\n                <input class=\"kangaroo-input\" name=\"ch2spd\" matInput placeholder=\"Speed\" [disabled]=\"ch2SpdDisabled\" [(ngModel)]=\"ch2Speed\" type=\"number\" />\r\n                <label class=\"kangaroo-position-label\" for=\"ch2pos\">Position</label>\r\n                <input class=\"kangaroo-input\" name=\"ch2pos\" matInput placeholder=\"Position\" [disabled]=\"ch2PosDisabled\" [(ngModel)]=\"ch2Position\" type=\"number\" />\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "KangarooModuleComponent",
            "id": "component-KangarooModuleComponent-f506afd2909cc1c84005d61c4f70898832539dd2e7ec9ef75d27f2365c5441b6a486b4661eef63c2c629c3e57eed91aed909a8c71f91cc346d6c734dd0a80941",
            "file": "src/app/pages/modules/uart-modules/kangaroo-module/kangaroo-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kangaroo-module",
            "styleUrls": [
                "./kangaroo-module.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kangaroo-module.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "KangarooX2",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { KangarooX2 } from 'astros-common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-kangaroo-module',\r\n  templateUrl: './kangaroo-module.component.html',\r\n  styleUrls: ['./kangaroo-module.component.scss'],\r\n  standalone: true,\r\n  imports: [FormsModule]\r\n})\r\nexport class KangarooModuleComponent {\r\n\r\n  @Input()\r\n  module!: KangarooX2;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".kangaroo{\r\n\r\n    margin-top: 20px;\r\n\r\n.kangaroo-label{\r\n            display: inline !important; \r\n            font-size: large;\r\n            margin-right: 20px;\r\n        }\r\n.kangaroo-input {\r\n            display: inline !important; \r\n            padding: 2px;\r\n            font-size: large;\r\n            width: 400px;\r\n        }\r\n}",
                    "styleUrl": "./kangaroo-module.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"kangaroo\">\r\n    <div >\r\n        <label class=\"kangaroo-label\" for=\"ch1Name\">Channel 1</label>\r\n        <input class=\"kangaroo-input\" name=\"ch1Name\" placeholder=\"Channel 1\"  [(ngModel)]=\"module.ch1Name\" />\r\n    </div>\r\n    <div >\r\n        <label class=\"kangaroo-label\" for=\"ch2Name\">Channel 2</label>\r\n        <input class=\"kangaroo-input\" name=\"ch2Name\" placeholder=\"Channel 2\"  [(ngModel)]=\"module.ch2Name\" />\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "LoadingModalComponent",
            "id": "component-LoadingModalComponent-31bf043342fe134972cea03a8500285802753d20bc69acbb37730baf58525fdbb30b68f6821450d79722acaa3223503cb40d7221892f26e55ffbb54b6dd7d002",
            "file": "src/app/components/modals/loading-modal/loading-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-modal",
            "styleUrls": [
                "./loading-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllersResponse",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "controllersLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "controllersMsg",
                    "defaultValue": "TransmissionType.controllers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "disableButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "locations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AstrOsLocationCollection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "locationsLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "message",
                    "defaultValue": "\"Loading Controllers...\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkLoadedState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseEventModalComponent } from '../scripting/base-event-modal/base-event-modal.component';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { AstrOsLocationCollection, ControllersResponse, TransmissionType } from 'astros-common';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ModalCallbackEvent } from 'src/app/components/modals/modal-base/modal-base.component';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport class LoadingModalResources {\r\n  public static closeEvent: string = 'loading_closeEvent';\r\n}\r\n\r\nexport interface LoadingModalResponse {\r\n  controllers: unknown[];\r\n  locations: unknown[];\r\n}\r\n\r\n@Component({\r\n    selector: 'app-loading-modal',\r\n    templateUrl: './loading-modal.component.html',\r\n    styleUrls: ['./loading-modal.component.scss'],\r\n    standalone: true\r\n})\r\nexport class LoadingModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  subscription!: Subscription;\r\n\r\n  message = \"Loading Controllers...\";\r\n  controllersMsg = TransmissionType.controllers;\r\n  locations!: AstrOsLocationCollection;\r\n  controllers!: ControllersResponse;\r\n\r\n  locationsLoaded = false;\r\n  controllersLoaded = false;\r\n\r\n  disableButton = true;\r\n\r\n  constructor(private socket: WebsocketService,\r\n    private controllerService: ControllerService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    const locationsObserver = {\r\n      next: (result: any) => {\r\n        this.locations = result;\r\n        this.locationsLoaded = true;\r\n        this.controllersLoaded = true;\r\n        this.controllers = { success: true, controllers: [] , type: TransmissionType.controllers, message: \"\" };\r\n        this.checkLoadedState();\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.getLoadedLocations().subscribe(locationsObserver);\r\n\r\n    return;\r\n    const observer = {\r\n      next: (_: any) => { \r\n        console.log(\"Synced controllers\");\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.syncControllers().subscribe(observer);\r\n\r\n    this.subscription = this.socket.messages.subscribe((msg: any) => {\r\n      if (msg.type === this.controllersMsg) {\r\n        this.controllers = msg as ControllersResponse;\r\n        this.controllersLoaded = true;\r\n        this.checkLoadedState();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkLoadedState() {\r\n    if (this.locationsLoaded && this.controllersLoaded) {\r\n      if (this.controllers.success) {\r\n        this.closeModal();\r\n      } else {\r\n        this.disableButton = false;\r\n        this.message = \"Failed to load controllers, using cached values.\";\r\n      }\r\n    }\r\n  }\r\n\r\n  override closeModal(): void {\r\n    //this.subscription.unsubscribe();\r\n    const evt = new ModalCallbackEvent(\r\n      LoadingModalResources.closeEvent,\r\n      { \r\n        controllers: this.controllers.controllers, \r\n        locations: this.locations \r\n      }\r\n    );\r\n\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-modal {\r\n\r\n  width: 300px;\r\n\r\n  select {\r\n    display: block;\r\n    font-size: large;\r\n    margin-top: 8px;\r\n    width: 300px;\r\n  }\r\n\r\n  .modal-body {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    font-size: large;\r\n\r\n    .spacer {\r\n      flex-grow: 1;\r\n    }\r\n\r\n    .content {\r\n      width: 300px;\r\n      display: inline;\r\n    }\r\n\r\n    label {\r\n      display: block;\r\n      width: 300px;\r\n      margin-bottom: 2px;\r\n    }\r\n  }\r\n}\r\n\r\n.modal-buttons {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.button-spacer {\r\n  flex-grow: 1;\r\n}\r\n\r\n.button-grouper {\r\n  button {\r\n    width: 100px;\r\n    font-size: large;\r\n    padding: 5px 0px;\r\n    margin: 0px 5px;\r\n  }\r\n\r\n  .hidden {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 620px) {\r\n  .loading-modal {\r\n    width: 400px;\r\n  }\r\n}",
                    "styleUrl": "./loading-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"loading-modal\">\r\n    <br>\r\n    <br> \r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"label\">{{message}}</div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"closeModal();\"  [disabled]=\"disableButton\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-b0305b56afc51b90703c5b1a9a6836907e6be3b508aeb437bf8069354b722b8664f7e9f746f5cb847874179159fd395679eb077ffb32e1a8f9b2a797d33dfba5",
            "file": "src/app/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n    username: \"\",\r\n    password: \"\"\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TokenPayload",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AuthenticationService, TokenPayload } from '../../services/auth/authentication.service';\r\nimport { Router } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule]\r\n})\r\nexport class LoginComponent {\r\n  credentials: TokenPayload = {\r\n    username: \"\",\r\n    password: \"\"\r\n  }\r\n\r\n  constructor(private auth: AuthenticationService, private router: Router) { }\r\n\r\n  login(){\r\n    this.auth.login(this.credentials).subscribe(\r\n      () => {\r\n        this.router.navigateByUrl(\"/status\")\r\n      },\r\n      err =>{\r\n        console.error(err);\r\n      }\r\n    );\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\nform {\r\n    margin: 2rem;\r\n    padding: 1rem;\r\n}\r\n\r\n\r\n.form-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.form-border {\r\n    flex: 1;\r\n}\r\n\r\n\r\n.form-group{\r\n    label {\r\n        font-size: medium;\r\n    }\r\n\r\n    input{\r\n        margin-bottom: 1.5rem;\r\n    }\r\n\r\n    input[type=\"username\"], input[type=\"password\"] {\r\n        font-size: medium; \r\n        padding: .5rem;   \r\n    }\r\n\r\n    label, input {\r\n        display: block;\r\n    }\r\n\r\n    button {\r\n        margin: 1rem;\r\n        float: left;\r\n    }\r\n}\r\n\r\n.form-button {\r\n\r\n    width: 100%;\r\n\r\n    button {\r\n        float: right;\r\n    }\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n    <div class=\"form-border\"></div>\r\n    <form (submit)=\"login()\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"username\" class=\"form-control\" name=\"username\" placeholder=\"Enter username\" [(ngModel)]=\"credentials.username\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\"\r\n          [(ngModel)]=\"credentials.password\" />\r\n      </div>\r\n      <div class=\"form-button\">\r\n        <button type=\"submit\" class=\"btn btn-default\">Sign in!</button>\r\n      </div>\r\n    </form>\r\n    <div class=\"form-border\"></div>\r\n  </div>\r\n"
        },
        {
            "name": "M5PaperConfigComponent",
            "id": "component-M5PaperConfigComponent-2c095aac21c9037afbac370bb1152d1f2b90b7689ca85569b0091e9e123ed1c04617dd17c30c0a5ed53722ff2392aefa3b70c99bd20c1afa73b70290c4256b5b",
            "file": "src/app/pages/remote-config/m5-paper-config/m5-paper-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-m5-paper-config",
            "styleUrls": [
                "./m5-paper-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./m5-paper-config.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "M5Page",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "faBackward",
                    "defaultValue": "faChevronLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "faForward",
                    "defaultValue": "faChevronRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "m5Config",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "M5Page[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pageNumber",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "scripts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageBackward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageForward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { M5Page, Script } from 'astros-common';\r\nimport { RemotesService } from 'src/app/services/remotes/remotes.service';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule } from '@angular/forms';\nimport { NgFor } from '@angular/common';\r\n\r\n\r\n@Component({\n    selector: 'app-m5-paper-config',\n    templateUrl: './m5-paper-config.component.html',\n    styleUrls: ['./m5-paper-config.component.scss'],\n    standalone: true,\n    imports: [FontAwesomeModule, FormsModule, NgFor]\n})\r\nexport class M5PaperConfigComponent implements OnInit {\r\n\r\n  faForward = faChevronRight;\r\n  faBackward = faChevronLeft;\r\n  pageNumber = 1;\r\n\r\n  scripts: any[] = [];\r\n\r\n  m5Config: M5Page[] = [];\r\n\r\n  currentPage: M5Page;\r\n  currentIndex = 0;\r\n\r\n  constructor(private scriptService: ScriptsService,\r\n    private remoteService: RemotesService) {\r\n    this.m5Config.push(new M5Page);\r\n\r\n    this.currentPage = this.m5Config[this.currentIndex];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const scriptObserver = {\r\n      next: (result: Script[]) => {\r\n        const scriptList = result.sort((a, b) => {\r\n          if (a.scriptName > b.scriptName) { return 1; }\r\n          if (a.scriptName < b.scriptName) { return -1; }\r\n          return 0;\r\n        });\r\n\r\n        for (const s of scriptList) {\r\n          this.scripts.push({ id: s.id, name: s.scriptName });\r\n        }\r\n      },\r\n      error: (err: any) => console.error(err)\r\n    };\r\n\r\n    const configObserver = {\r\n      next: (result: any) => {\r\n\r\n        if (result !== undefined) {\r\n          const config = JSON.parse(result.value) as M5Page[];\r\n\r\n          if (config.length != 0) {\r\n            this.m5Config = config;\r\n            this.currentPage = this.m5Config[0];\r\n          }\r\n        }\r\n        else {\r\n          this.m5Config = new Array<M5Page>();\r\n          this.m5Config.push(new M5Page());\r\n          this.currentPage = this.m5Config[0];\r\n        }\r\n      }\r\n    }\r\n\r\n    this.scriptService.getAllScripts().subscribe(scriptObserver);\r\n    this.remoteService.getRemoteConfig().subscribe(configObserver);\r\n  }\r\n\r\n  selectionChange(button: number, id: any) {\r\n\r\n    const sIdx = this.scripts\r\n      .map((s) => { return s.id })\r\n      .indexOf(id);\r\n\r\n    const scriptName = this.scripts[sIdx].name;\r\n\r\n    switch (button) {\r\n      case 1:\r\n        this.currentPage.button1.id = id;\r\n        this.currentPage.button1.name = scriptName;\r\n        break;\r\n      case 2:\r\n        this.currentPage.button2.id = id;\r\n        this.currentPage.button2.name = scriptName;\r\n        break;\r\n      case 3:\r\n        this.currentPage.button3.id = id;\r\n        this.currentPage.button3.name = scriptName;\r\n        break;\r\n      case 4:\r\n        this.currentPage.button4.id = id;\r\n        this.currentPage.button4.name = scriptName;\r\n        break;\r\n      case 5:\r\n        this.currentPage.button5.id = id;\r\n        this.currentPage.button5.name = scriptName;\r\n        break;\r\n      case 6:\r\n        this.currentPage.button6.id = id;\r\n        this.currentPage.button6.name = scriptName;\r\n        break;\r\n      case 7:\r\n        this.currentPage.button7.id = id;\r\n        this.currentPage.button7.name = scriptName;\r\n        break;\r\n      case 8:\r\n        this.currentPage.button8.id = id;\r\n        this.currentPage.button8.name = scriptName;\r\n        break;\r\n      case 9:\r\n        this.currentPage.button9.id = id;\r\n        this.currentPage.button9.name = scriptName;\r\n        break;\r\n    }\r\n  }\r\n\r\n  pageForward() {\r\n    this.currentIndex++;\r\n    if (this.m5Config.length < this.currentIndex + 1) {\r\n      this.m5Config.push(new M5Page);\r\n    }\r\n\r\n    this.currentPage = this.m5Config[this.currentIndex];\r\n    this.pageNumber = this.currentIndex + 1;\r\n  }\r\n\r\n  pageBackward() {\r\n    this.currentIndex--;\r\n    if (this.currentIndex < 0) {\r\n      this.currentIndex = 0;\r\n      return;\r\n    }\r\n\r\n    this.currentPage = this.m5Config[this.currentIndex];\r\n    this.pageNumber = this.currentIndex + 1;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables\";\r\n\r\n.container {\r\n\r\n    .page-select {\r\n        margin-top: 20px;\r\n        margin-bottom: 20px;\r\n        width: 100%;\r\n        display: flex;\r\n        flex-wrap: nowrap;\r\n\r\n\r\n        button {\r\n            font-size: x-large;\r\n            color: black;\r\n            border-radius: 10%;\r\n            background: none;\r\n        }\r\n\r\n        .page-number {\r\n            font-size: xx-large;\r\n            font-family: $swfont;\r\n            margin: 12px;\r\n        }\r\n\r\n        .spacer {\r\n            flex-grow: 3;\r\n        }\r\n    }\r\n\r\n    .page {\r\n        display: grid;\r\n        grid-template-columns: repeat(3, 1fr);\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-column-gap: 20px;\r\n        grid-row-gap: 20px;\r\n        width: 1200px;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .button-select {\r\n        background-color: $dark-blue;\r\n        border: 2px solid black;\r\n        border-radius: 10%;\r\n\r\n        select {\r\n            display: block;\r\n            font-size: large;\r\n            margin: 20px 10px;\r\n            width: 360px;\r\n        }\r\n    }\r\n\r\n    .col1-row1 {\r\n        grid-area: 1 / 1 / 2 / 2;\r\n    }\r\n\r\n    .col2-row1 {\r\n        grid-area: 1 / 2 / 2 / 3;\r\n    }\r\n\r\n    .col3-row1 {\r\n        grid-area: 1 / 3 / 2 / 4;\r\n    }\r\n\r\n    .col1-row2 {\r\n        grid-area: 2 / 1 / 3 / 2;\r\n    }\r\n\r\n    .col2-row2 {\r\n        grid-area: 2 / 2 / 3 / 3;\r\n    }\r\n\r\n    .col3-row2 {\r\n        grid-area: 2 / 3 / 3 / 4;\r\n    }\r\n\r\n    .col1-row3 {\r\n        grid-area: 3 / 1 / 4 / 2;\r\n    }\r\n\r\n    .col2-row3 {\r\n        grid-area: 3 / 2 / 4 / 3;\r\n    }\r\n\r\n    .col3-row3 {\r\n        grid-area: 3 / 3 / 4 / 4;\r\n    }\r\n}",
                    "styleUrl": "./m5-paper-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"page-select\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"page-back\">\r\n            <button title=\"Backward\" (click)=\"pageBackward()\"><fa-icon [icon]=\"faBackward\"></fa-icon></button>\r\n        </div>\r\n        <div class=\"page-number\">Page {{pageNumber}}</div>\r\n        <div class=\"page-forward\">\r\n            <button title=\"Forward\" (click)=\"pageForward()\"><fa-icon [icon]=\"faForward\"></fa-icon></button>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"page\">\r\n        <div class=\"col1-row1 button-select\">\r\n            <select #btn1 id=\"btn1-select\" title=\"Script\" [(ngModel)]=\"currentPage.button1.id\" (change)=\"selectionChange(1, btn1.value)\">\r\n                <option value=\"0\" selected>None</option>\r\n                <ng-container *ngFor=\"let script of scripts\">\r\n                    <option value=\"{{script.id}}\">{{script.name}}</option>\r\n                </ng-container>\r\n            </select>\r\n        </div>\r\n        <div class=\"col2-row1 button-select\">             \r\n            <select #btn2 id=\"btn2-select\" title=\"Script\" [(ngModel)]=\"currentPage.button2.id\" (change)=\"selectionChange(2, btn2.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col3-row1 button-select\">            \r\n            <select #btn3 id=\"btn3-select\" title=\"Script\" [(ngModel)]=\"currentPage.button3.id\" (change)=\"selectionChange(3, btn3.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col1-row2 button-select\">            \r\n            <select #btn4 id=\"btn4-select\" title=\"Script\" [(ngModel)]=\"currentPage.button4.id\" (change)=\"selectionChange(4, btn4.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col2-row2 button-select\">             \r\n            <select #btn5 id=\"btn5-select\" title=\"Script\" [(ngModel)]=\"currentPage.button5.id\" (change)=\"selectionChange(5, btn5.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col3-row2 button-select\">             \r\n            <select #btn6 id=\"btn6-select\" title=\"Script\" [(ngModel)]=\"currentPage.button6.id\" (change)=\"selectionChange(6, btn6.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col1-row3 button-select\">             \r\n            <select #btn7 id=\"btn7-select\" title=\"Script\" [(ngModel)]=\"currentPage.button7.id\" (change)=\"selectionChange(7, btn7.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col2-row3 button-select\">             \r\n            <select #btn8 id=\"btn8-select\" title=\"Script\" [(ngModel)]=\"currentPage.button8.id\"  (change)=\"selectionChange(8, btn8.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n        <div class=\"col3-row3 button-select\">             \r\n            <select #btn9 id=\"btn9-select\" title=\"Script\" [(ngModel)]=\"currentPage.button9.id\" (change)=\"selectionChange(9, btn9.value)\">\r\n            <option value=\"0\" selected>None</option>\r\n            <ng-container *ngFor=\"let script of scripts\">\r\n                <option value=\"{{script.id}}\">{{script.name}}</option>\r\n            </ng-container>\r\n        </select>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ModalBaseComponent",
            "id": "component-ModalBaseComponent-9cad00ccfa1cd1a07e59d1579a64be53c66ee2523e6fd0e7e51357162c3a465d8e49b7bb3f256e4f7336b3d6bdfbe2ea7551448846cdb5ff6bf209b7c5e61f19",
            "file": "src/app/components/modals/modal-base/modal-base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-base",
            "styleUrls": [
                "./modal-base.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-modal-base',\r\n  template: '',\r\n  styleUrls: ['./modal-base.component.scss']\r\n})\r\nexport abstract class ModalBaseComponent {\r\n\r\n  @Input()\r\n  resources!: Map<string, unknown>;\r\n\r\n  @Output() modalCallback = new EventEmitter<ModalCallbackEvent>();\r\n}\r\n\r\nexport class ModalCallbackEvent{\r\n  public type: string;\r\n  public value: unknown;\r\n\r\n  constructor(type: string, value: unknown){\r\n      this.type = type;\r\n      this.value = value;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-base.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-b072cbdc029bd50d638a79819a540da9660b79568562b7be3bde23f6d5c7ce352cff5c2c9d1cea4ea856e018e735e589f47e11356758877805460887386cc391",
            "file": "src/app/components/modals/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-astros-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disableBackgroundClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, Renderer2, OnDestroy } from '@angular/core';\r\nimport { ModalService } from 'src/app/services/modal/modal.service';\r\n\r\n@Component({\r\n    selector: 'app-astros-modal',\r\n    templateUrl: './modal.component.html',\r\n    styleUrls: ['./modal.component.scss'],\r\n    standalone: true\r\n})\r\nexport class ModalComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() id: string;\r\n  @Input() disableBackgroundClick: string;\r\n\r\n  private element: ElementRef;\r\n\r\n  constructor(private renderer: Renderer2, private modalService: ModalService, private el: ElementRef) {\r\n    this.id = '';\r\n    this.disableBackgroundClick = '';\r\n    this.element = el;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    if (!this.id || this.id === '') {\r\n      console.error('modal must have an id');\r\n      return;\r\n    }\r\n\r\n    this.renderer.appendChild(document.body, this.element.nativeElement);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    this.element.nativeElement.addEventListener('click', (el: any) => {\r\n      if (el.target.className === 'astros-modal-background' && !+this.disableBackgroundClick) {\r\n        this.close();\r\n      }\r\n    });\r\n\r\n    this.modalService.add(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.modalService.remove(this.id);\r\n    this.element.nativeElement.remove();\r\n  }\r\n\r\n  open(): void {\r\n    this.element.nativeElement.style.display = 'block';\r\n    document.body.classList.add('astros-modal-open');\r\n  }\r\n\r\n  close(): void {\r\n    this.element.nativeElement.style.display = 'none';\r\n    document.body.classList.remove('astro-modal-open');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".astros-modal {\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1000;\r\n}\r\n\r\n.astros-modal-body{\r\n    padding: 2rem;\r\n    background: #fff;\r\n    margin: 4rem;\r\n}\r\n\r\n.astros-modal-background{\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n\r\n    background-color: #000;\r\n    opacity: 0.75;\r\n\r\n    z-index: 900;\r\n}\r\n\r\nbody.astros-modal-open{\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"astros-modal-background\"></div>\r\n<div class=\"astros-modal\">\r\n    <div class=\"astros-modal-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ModulesComponent",
            "id": "component-ModulesComponent-aa7d0ddb1e015961aa63725f54c719ae33772753dbe1a74c7633191564bd96159546d924ebc0286f5252f956a52d3858349e9ae20fb73c82e9505b1e74be0f58",
            "file": "src/app/pages/modules/modules.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modules",
            "styleUrls": [
                "./modules.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modules.component.html"
            ],
            "viewProviders": [
                {
                    "name": "MatExpansionPanel"
                }
            ],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableCoreControllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "availableDomeControllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "backgroundClickDisabled",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "bodyCaption",
                    "defaultValue": "{ str: 'Module Down' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "bodyEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'body', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "bodyLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "bodyWarning",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreCaption",
                    "defaultValue": "{ str: 'Module Down' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "coreEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'core', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "coreWarning",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "domeCaption",
                    "defaultValue": "{ str: 'Module Down' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "domeEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dome', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "domeLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControllerLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "domeWarning",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "isLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isMaster",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "moduleDown",
                    "defaultValue": "\"Module Down\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notSynced",
                    "defaultValue": "\"Not Synced\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "possibleControllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "controllerSelectChanged",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "el",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "el",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAlertModal",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openControllerSyncModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openServoTestModal",
                    "args": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseModules",
                    "args": [
                        {
                            "name": "locations",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locations",
                            "type": "AstrOsLocationCollection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveModuleSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "servoTestModalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncModalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncModuleSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatAccordion"
                },
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "EspModuleComponent",
                    "type": "component"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatExpansionPanel, MatAccordion, MatExpansionPanelHeader, MatExpansionPanelTitle } from '@angular/material/expansion';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ControlModule, ControllerStatus, AstrOsLocationCollection, ControllerLocation } from 'astros-common';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { StatusService } from 'src/app/services/status/status.service';\r\nimport { ModalService } from 'src/app/services/modal/modal.service';\r\nimport { LoadingModalComponent } from '../../components/modals/loading-modal/loading-modal.component';\r\nimport { ServoTestModalComponent } from '../../components/modals/servo-test-modal/servo-test-modal.component';\r\nimport { ModalCallbackEvent, ModalResources } from 'src/app/shared/modal-resources';\r\nimport { AlertModalComponent } from 'src/app/components/modals/alert-modal/alert-modal.component';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgIf, NgFor } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { EspModuleComponent } from './esp-module/esp-module.component';\r\nimport { ModalComponent } from 'src/app/components/modals/modal.component';\r\n\r\ninterface Caption { str: string }\r\n\r\n@Component({\r\n  selector: 'app-modules',\r\n  templateUrl: './modules.component.html',\r\n  styleUrls: ['./modules.component.scss'],\r\n  viewProviders: [MatExpansionPanel],\r\n  standalone: true,\r\n  imports: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    FontAwesomeModule,\r\n    NgIf,\r\n    FormsModule,\r\n    EspModuleComponent,\r\n    NgFor,\r\n    ModalComponent\r\n  ]\r\n})\r\nexport class ModulesComponent implements AfterViewInit {\r\n\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n  isLoaded = false;\r\n\r\n  backgroundClickDisabled = '1';\r\n  isMaster = true;\r\n\r\n  possibleControllers: ControlModule[] = [];\r\n  availableDomeControllers: ControlModule[] = [];\r\n  availableCoreControllers: ControlModule[] = [];\r\n\r\n  coreWarning = faExclamationTriangle;\r\n  domeWarning = faExclamationTriangle;\r\n  bodyWarning = faExclamationTriangle;\r\n\r\n  @ViewChild('core', { static: false }) coreEl!: ElementRef;\r\n  @ViewChild('dome', { static: false }) domeEl!: ElementRef;\r\n  @ViewChild('body', { static: false }) bodyEl!: ElementRef;\r\n\r\n  coreLocation!: ControllerLocation;\r\n  domeLocation!: ControllerLocation;\r\n  bodyLocation!: ControllerLocation;\r\n\r\n  coreCaption: Caption = { str: 'Module Down' }\r\n  domeCaption: Caption = { str: 'Module Down' }\r\n  bodyCaption: Caption = { str: 'Module Down' }\r\n\r\n  private notSynced = \"Not Synced\";\r\n  private moduleDown = \"Module Down\";\r\n\r\n  constructor(private controllerService: ControllerService,\r\n    private websocketService: WebsocketService,\r\n    private snackBar: SnackbarService,\r\n    private modalService: ModalService,\r\n    private renderer: Renderer2,\r\n    private status: StatusService) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.openControllerSyncModal();\r\n  }\r\n\r\n  openControllerSyncModal() {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    const component = this.container.createComponent(LoadingModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((result: unknown) => {\r\n      this.syncModalCallback(result);\r\n    });\r\n\r\n    this.modalService.open('modules-modal');\r\n  }\r\n\r\n  syncModalCallback(evt: any) {\r\n    this.parseModules(evt.response.locations);\r\n\r\n    // always filter out the master controller since it's always the body module\r\n    this.possibleControllers = evt.response.controllers.filter((controller: ControlModule) => controller.id !== 1);\r\n\r\n    this.availableCoreControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.domeLocation.controller?.id);\r\n    this.availableDomeControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.coreLocation.controller?.id);\r\n\r\n    this.handleStatus(this.status.getCoreStatus(), this.coreEl, this.coreCaption);\r\n    this.handleStatus(this.status.getDomeStatus(), this.domeEl, this.domeCaption);\r\n    this.handleStatus(this.status.getBodyStatus(), this.bodyEl, this.bodyCaption);\r\n\r\n    this.status.coreStateObserver.subscribe(value => this.handleStatus(value, this.coreEl, this.coreCaption));\r\n    this.status.domeStateObserver.subscribe(value => this.handleStatus(value, this.domeEl, this.domeCaption));\r\n    this.status.bodyStateObserver.subscribe(value => this.handleStatus(value, this.bodyEl, this.bodyCaption));\r\n\r\n    this.isLoaded = true;\r\n\r\n    this.modalService.close('modules-modal');\r\n  }\r\n\r\n  openAlertModal(message: string) {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, any>();\r\n\r\n    const component = this.container.createComponent(AlertModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.resources.set(ModalResources.message, message);\r\n\r\n    component.instance.modalCallback.subscribe((_: unknown) => {\r\n      this.modalService.close('modules-modal');\r\n    });\r\n\r\n    this.modalService.open('modules-modal');\r\n  }\r\n\r\n  openServoTestModal(value: { controllerId: number, channelId: number }) {\r\n\r\n    if (value.controllerId === 0) {\r\n      this.openAlertModal(\"Location for this servo is not set.\");\r\n      return;\r\n    }\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, any>();\r\n\r\n    const component = this.container.createComponent(ServoTestModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.resources.set(ModalResources.controllerId, value.controllerId);\r\n    component.instance.resources.set(ModalResources.servoId, value.channelId);\r\n\r\n    component.instance.modalCallback.subscribe((result: any) => {\r\n      this.servoTestModalCallback(result);\r\n    });\r\n\r\n    this.modalService.open('modules-modal');\r\n  }\r\n\r\n  servoTestModalCallback(evt: any) {\r\n    switch (evt.id) {\r\n      case ModalCallbackEvent.sendServoMove:\r\n\r\n        this.websocketService.sendMessage({ msgType: \"SERVO_TEST\", data: { controllerId: evt.controllerId, servoId: evt.servoId, value: evt.value } });\r\n\r\n        break;\r\n      case ModalCallbackEvent.close:\r\n        this.modalService.close('modules-modal');\r\n        break;\r\n    }\r\n  }\r\n\r\n  controllerSelectChanged(_: unknown) {\r\n\r\n    this.availableCoreControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.domeLocation.controller?.id);\r\n    this.availableDomeControllers = this.possibleControllers.filter((controller: ControlModule) => controller.id !== this.coreLocation.controller?.id);\r\n\r\n  }\r\n\r\n  saveModuleSettings() {\r\n    const observer = {\r\n      next: (result: any) => {\r\n        if (result.message === 'success') {\r\n          console.log('module settings saved!')\r\n          this.snackBar.okToast('Module settings saved!');\r\n        } else {\r\n          console.log('module settings save failed!')\r\n          this.snackBar.okToast('Module settings save failed!');\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Module settings save failed!');\r\n      }\r\n    };\r\n\r\n    this.controllerService.saveLocations(new AstrOsLocationCollection(this.coreLocation, this.domeLocation, this.bodyLocation))\r\n      .subscribe(observer);\r\n\r\n    this.status.resetStatus();\r\n  }\r\n\r\n  syncModuleSettings() {\r\n    const observer = {\r\n      next: (result: any) => {\r\n        if (result.message === 'success') {\r\n          console.log('module sync queued!')\r\n          this.snackBar.okToast('Module sync queued!');\r\n        } else {\r\n          console.log('module sync failed to queue')\r\n          this.snackBar.okToast(`Module sync failed to queue.`);\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Module sync failed!');\r\n      }\r\n    };\r\n\r\n    this.controllerService.syncLocationConfig()\r\n      .subscribe(observer);\r\n  }\r\n\r\n  private parseModules(locations: AstrOsLocationCollection) {\r\n\r\n    console.log(locations);\r\n    try {\r\n      this.coreLocation = locations.coreModule ?? this.coreLocation;\r\n      this.domeLocation = locations.domeModule ?? this.domeLocation;\r\n      this.bodyLocation = locations.bodyModule ?? this.bodyLocation;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  handleStatus(status: ControllerStatus, el: ElementRef, caption: Caption) {\r\n    switch (status) {\r\n      case ControllerStatus.up:\r\n        caption.str = '';\r\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'hidden');\r\n        break;\r\n      case ControllerStatus.needsSynced:\r\n        caption.str = this.notSynced;\r\n        this.renderer.setStyle(el.nativeElement, 'color', 'yellow');\r\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\r\n        break;\r\n      case ControllerStatus.down:\r\n        caption.str = this.moduleDown;\r\n        this.renderer.setStyle(el.nativeElement, 'color', 'red');\r\n        this.renderer.setStyle(el.nativeElement, 'visibility', 'visible');\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/styles/variables\";\r\n\r\n\r\n\r\n.module-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n     \r\n    .spacer {\r\n        flex: 1;\r\n    }\r\n\r\n    .module-body {\r\n        padding: 20px;\r\n        max-width: 1000px;\r\n        flex-grow: 20;\r\n\r\n        .button-bar {\r\n            display: flex;\r\n            flex-direction: row;\r\n            height: 54px;\r\n            line-height: 54px;\r\n\r\n            .title {\r\n                width: 200px;\r\n                font-size: xx-large;\r\n                font-family: $swfont;\r\n            }\r\n\r\n            .button-box {\r\n                float: right;\r\n\r\n                button {\r\n                    font-size: x-large;\r\n                    font-family: $swfont;\r\n                    background-color: $dark-blue;\r\n                }\r\n            }\r\n        }\r\n\r\n        .module-accordian {\r\n            .controller-select {\r\n                select {\r\n                    padding-top: 4px;\r\n                    width: 100%;\r\n                    max-width: 300px;\r\n                    font-size: large;\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .warning {\r\n                margin-right: 20px;\r\n                color: slategray;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n.tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n    border-bottom: 1px dotted lightgray;\r\n}\r\n\r\n.tooltip .tooltiptext {\r\n    visibility: hidden;\r\n    width: 120px;\r\n    background-color: black;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 20px;\r\n    padding: 5px 0;\r\n\r\n    /* Position the tooltip */\r\n    position: absolute;\r\n    z-index: 1;\r\n    top: -5px;\r\n    right: 200%;\r\n}\r\n\r\n.tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n}\r\n\r\n",
                    "styleUrl": "./modules.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "websocketService",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"module-container\">\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"module-body\">\r\n        <div class=\"button-bar\">\r\n            <div class=\"title\">\r\n               Modules\r\n            </div>\r\n            <div class=\"spacer\"></div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"saveModuleSettings()\">Save</button>\r\n            </div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"syncModuleSettings()\">Sync</button>\r\n            </div>\r\n        </div>\r\n        <mat-accordion class=\"module-accordian\">\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>Body Module</mat-panel-title>\r\n                    <div class=\"warning tooltip\" #body>\r\n                        <span class=\"tooltiptext\">{{bodyCaption.str}}</span>\r\n                        <fa-icon [icon]=\"bodyWarning\"></fa-icon>       \r\n                    </div>   \r\n                </mat-expansion-panel-header>\r\n                <ng-container  *ngIf=\"isLoaded\" >\r\n                    <div class=\"controller-select\">\r\n                        <select title=\"Controller Select\" disabled>\r\n                            <option value=\"0\" selected>Master Controller</option>\r\n                        </select>       \r\n                    </div>\r\n                    <app-esp-module (openServoTestModal)=\"openServoTestModal($event)\" [module]=\"bodyLocation\" [isMaster]=\"true\"></app-esp-module>\r\n                </ng-container>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>Core Module</mat-panel-title>\r\n                    <div class=\"warning tooltip\" #core>\r\n                        <span class=\"tooltiptext\">{{coreCaption.str}}</span>\r\n                        <fa-icon [icon]=\"coreWarning\"></fa-icon>       \r\n                    </div>\r\n                </mat-expansion-panel-header>\r\n                <ng-container  *ngIf=\"isLoaded\" >\r\n                    <div class=\"controller-select\">\r\n                        <select id=\"core-controller-select\" title=\"Controller Select\"\r\n                        [(ngModel)]=\"coreLocation.controller.id\"\r\n                        (change)=\"controllerSelectChanged($event)\">\r\n                            <option [ngValue]=\"0\" selected>Disabled</option>\r\n                            <ng-container *ngFor=\"let controller of availableCoreControllers\"> \r\n                                <option [ngValue]=\"controller.id\">{{controller.name}}</option>\r\n                            </ng-container>\r\n                        </select>       \r\n                    </div>\r\n                    <app-esp-module (openServoTestModal)=\"openServoTestModal($event)\" [module]=\"coreLocation\"></app-esp-module>\r\n                </ng-container>\r\n            </mat-expansion-panel>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>Dome Module</mat-panel-title>\r\n                    <div class=\"warning tooltip\" #dome>\r\n                        <span class=\"tooltiptext\">{{domeCaption.str}}</span>\r\n                        <fa-icon [icon]=\"domeWarning\"></fa-icon>       \r\n                    </div>\r\n                </mat-expansion-panel-header>\r\n                <ng-container  *ngIf=\"isLoaded\" >\r\n                    <div class=\"controller-select\">\r\n                        <select id=\"dome-controller-select\" title=\"Controller Select\"\r\n                        [(ngModel)]=\"domeLocation.controller.id\"\r\n                        (change)=\"controllerSelectChanged($event)\">\r\n                            <option [ngValue]=\"0\" selected>Disabled</option>\r\n                            <ng-container *ngFor=\"let controller of availableDomeControllers\"> \r\n                                <option [ngValue]=\"controller.id\">{{controller.name}}</option>\r\n                            </ng-container>\r\n                        </select>       \r\n                    </div>\r\n                    <app-esp-module (openServoTestModal)=\"openServoTestModal($event)\" [module]=\"domeLocation\"></app-esp-module>\r\n                </ng-container>\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n</div>\r\n\r\n<app-astros-modal id=\"modules-modal\"  disableBackgroundClick=\"{{backgroundClickDisabled}}\" >\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-1a7a5dfb2a0a16570c29cecb8376710d31076ae0077cdbdf55dd760673d7326cc9e6f95d1784181d5122cdda53ad7eeddf29017ec4061a643db5faab820c3db6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RemoteConfigComponent",
            "id": "component-RemoteConfigComponent-798df2a2d6c165735a174aa8290b4fd7b38435151b61fa231eb819ac65c325086f142fbf56198ae1842af46561f0f77e08e3bb5a952c2ea78b77c119aafea506",
            "file": "src/app/pages/remote-config/remote-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-remote-config",
            "styleUrls": [
                "./remote-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./remote-config.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "M5PaperConfigComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'config'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "remoteName",
                    "defaultValue": "\"Astr-Os Screen\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "hasSettings",
                    "args": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "M5PaperConfigComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\r\nimport { M5Page, PageButton } from 'astros-common';\r\nimport { RemotesService } from 'src/app/services/remotes/remotes.service';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { M5PaperConfigComponent } from './m5-paper-config/m5-paper-config.component';\r\n\r\n@Component({\r\n    selector: 'app-remote-config',\r\n    templateUrl: './remote-config.component.html',\r\n    styleUrls: ['./remote-config.component.scss'],\r\n    standalone: true,\r\n    imports: [M5PaperConfigComponent]\r\n})\r\nexport class RemoteConfigComponent {\r\n\r\n  @ViewChild('config') config!: M5PaperConfigComponent;\r\n\r\n  remoteName = \"Astr-Os Screen\";\r\n\r\n  constructor(private remoteService: RemotesService, private snackBar: SnackbarService) { }\r\n\r\n saveConfig(){\r\n\r\n    const observer = {\r\n      next: (result: any) => {\r\n        if (result.message === 'success') {\r\n          console.log('Config saved!')\r\n          this.snackBar.okToast('Config saved!');\r\n        } else {\r\n          console.log('Config save failed!')\r\n          this.snackBar.okToast('Script settings save failed!');\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Config save failed!');\r\n      }\r\n    };\r\n\r\n    const config = new Array<M5Page>();\r\n    this.config.m5Config.forEach(page => {\r\n     if (this.hasSettings(page)) {\r\n       config.push(page);\r\n     }\r\n   });\r\n\r\n    this.remoteService.saveRemoteConfig(JSON.stringify(config)).subscribe(observer);\r\n  }\r\n\r\n  hasSettings(page: any): boolean {\r\n    for (const key in page) {\r\n        if (Object.prototype.hasOwnProperty.call(page, key)) {\r\n            const element = (page[key] as unknown) as PageButton;\r\n            if (element.id != \"0\"){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/variables';\r\n\r\n.remote-title {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 1200px;\r\n    margin: 0 auto;\r\n  \r\n    .remote-name{\r\n        font-size: xx-large;\r\n        font-family: $swfont;\r\n        margin: auto;\r\n    }\r\n\r\n    .spacer {\r\n        flex-grow: 1;\r\n    }\r\n    .button-box {\r\n      float: right;\r\n  \r\n      button{\r\n          font-size: x-large;\r\n          font-family: $swfont;\r\n          background-color: $dark-blue;\r\n      }\r\n    }\r\n}",
                    "styleUrl": "./remote-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "remoteService",
                        "type": "RemotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"remote-title\">\r\n    <div class=\"remote-name\">\r\n    {{remoteName}}\r\n    </div>\r\n    <div class=\"spacer\">\r\n    </div>\r\n    <div class=\"button-box\">\r\n        <button (click)=\"saveConfig()\">Save</button>\r\n    </div>\r\n</div>\r\n<app-m5-paper-config #config></app-m5-paper-config>\r\n"
        },
        {
            "name": "ScripterComponent",
            "id": "component-ScripterComponent-181d6e32c670248cecee40183ea6887fb570f12087af43d8e1b070872a5288f81646746e595fc3ef14afe55fbcec6825bcc0f8682d7e5b68a3fae165e17bd071",
            "file": "src/app/pages/scripter/scripter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scripter",
            "styleUrls": [
                "./scripter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scripter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundClickDisabled",
                    "defaultValue": "'0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "characters",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "menuTopLeft",
                    "defaultValue": "{ x: 0, y: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "menuTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "renderedEvents",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resourcesLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "script",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Script",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "scriptChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptChannel[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "scriptId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scriptResources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptResources",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "segmentFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "segments",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "segmentWidth",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timeLineArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [
                {
                    "name": "addChannel",
                    "args": [
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "channels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 588,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channelType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "channels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 624,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "channelCompare",
                    "args": [
                        {
                            "name": "a",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 699,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "ScriptChannel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "channelTestCallback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 555,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEventModal",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isEdit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 372,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isEdit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 635,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateScriptId",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 715,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIdFromChannel",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKangarooControllerFromChannel",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 442,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUartChannelFromChannel",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 431,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 470,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openChannelAddModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditEventModal",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openNewEventModal",
                    "args": [
                        {
                            "name": "evt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openScriptTestModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCallback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 512,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeChannel",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 534,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 686,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "channelId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 650,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ScriptEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveBeforeTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendChannelTest",
                    "args": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "commandType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "commandType",
                            "type": "ChannelType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "command",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timelineCallback",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 500,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "ScriptRowComponent",
                    "type": "component"
                },
                {
                    "name": "MatMenuTrigger"
                },
                {
                    "name": "MatMenu"
                },
                {
                    "name": "MatMenuContent"
                },
                {
                    "name": "MatMenuItem"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewChecked, Component, ComponentRef, OnInit, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatMenuTrigger, MatMenu, MatMenuContent, MatMenuItem } from '@angular/material/menu'\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Guid } from 'guid-typescript';\r\nimport { ConfirmModalComponent, ModalService } from 'src/app/modal';\r\nimport { ScriptResources } from 'src/app/models/script-resources';\r\nimport {\r\n  ChannelSubType,\r\n  ChannelType,\r\n  AstrOsLocationCollection,\r\n  Script,\r\n  ScriptChannel,\r\n  ScriptEvent,\r\n  ControllerLocation,\r\n  BaseChannel\r\n} from 'astros-common';\r\nimport { ControllerService } from 'src/app/services/controllers/controller.service';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\r\nimport { ControllerModalComponent } from '../../components/modals/scripting/controller-modal/controller-modal.component';\r\nimport { I2cEventModalComponent } from '../../components/modals/i2c-event-modal/i2c-event-modal.component';\r\nimport { ModalCallbackEvent, ModalResources } from '../../shared/modal-resources';\r\nimport { AudioEventModalComponent } from '../../components/modals/scripting/audio-event-modal/audio-event-modal.component';\r\nimport { KangarooEventModalComponent } from '../../components/modals/kangaroo-event-modal/kangaroo-event-modal.component';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { ScriptTestModalComponent } from '../../components/modals/script-test-modal/script-test-modal.component';\r\nimport { ChannelTestModalComponent } from '../../components/modals/channel-test-modal/channel-test-modal.component';\r\nimport EventMarkerHelper from './helper/event-marker-helper';\r\nimport { UartEventModalComponent } from '../../components/modals/scripting/uart-event-modal/uart-event-modal.component';\r\nimport { HumanCyborgModalComponent } from '../../components/modals/human-cyborg-modal/human-cyborg-modal.component';\r\nimport { GpioEventModalComponent } from '../../components/modals/gpio-event-modal/gpio-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgFor } from '@angular/common';\r\nimport { ScriptRowComponent } from './script-row/script-row.component';\r\nimport { ModalComponent } from '../../services/modal/modal.component';\r\n\r\n\r\nexport interface Item {\r\n  timeline: string;\r\n  xPos: number;\r\n}\r\n\r\ntype ScripterModal  =\r\n  UartEventModalComponent | \r\n  KangarooEventModalComponent | \r\n  I2cEventModalComponent | \r\n  AudioEventModalComponent | \r\n  GpioEventModalComponent | \r\n  HumanCyborgModalComponent;\r\n\r\n\r\n@Component({\r\n  selector: 'app-scripter',\r\n  templateUrl: './scripter.component.html',\r\n  styleUrls: ['./scripter.component.scss'],\r\n  standalone: true,\r\n  imports: [FormsModule, NgFor, ScriptRowComponent, MatMenuTrigger, MatMenu, MatMenuContent, MatMenuItem, ModalComponent]\r\n})\r\nexport class ScripterComponent implements OnInit, AfterViewChecked {\r\n\r\n  @ViewChild(MatMenuTrigger) menuTrigger!: MatMenuTrigger;\r\n\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n  private segmentWidth = 60;\r\n  private segments = 3000;\r\n  private segmentFactor = 10;\r\n  private scriptId: string;\r\n  private resourcesLoaded = false;\r\n  private renderedEvents = false;\r\n  private characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  backgroundClickDisabled = '0';\r\n\r\n  script!: Script;\r\n  scriptChannels: ScriptChannel[];\r\n\r\n  timeLineArray: number[];\r\n  menuTopLeft = { x: 0, y: 0 };\r\n\r\n  scriptResources!: ScriptResources;\r\n\r\n\r\n  components: unknown[];\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private snackBar: SnackbarService,\r\n    private modalService: ModalService,\r\n    private renderer: Renderer2,\r\n    private controllerService: ControllerService,\r\n    private scriptService: ScriptsService) {\r\n\r\n    this.scriptId = this.route.snapshot.paramMap.get('id') ?? '0';\r\n\r\n    this.timeLineArray = Array.from({ length: this.segments }, (_, i) => (i + 1) / this.segmentFactor)\r\n\r\n    this.scriptChannels = new Array<ScriptChannel>();\r\n    this.components = new Array<unknown>();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    // \"this\" needs to exist before we render events\r\n    if (!this.renderedEvents) {\r\n      if (this.script != undefined) {\r\n        for (const ch of this.script.scriptChannels) {\r\n          for (const kvp of ch.eventsKvpArray) {\r\n            this.renderEvent(kvp.value);\r\n          }\r\n        }\r\n        this.renderedEvents = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const csObserver = {\r\n      next: (result: AstrOsLocationCollection) => {\r\n\r\n        const modules = new Array<ControllerLocation>();\r\n\r\n        if (result.domeModule)\r\n          modules.push(result.domeModule);\r\n        if (result.coreModule)\r\n          modules.push(result.coreModule);\r\n        if (result.bodyModule)\r\n          modules.push(result.bodyModule);\r\n\r\n        this.scriptResources = new ScriptResources(modules);\r\n        this.resourcesLoaded = true;\r\n      },\r\n      error: (err: unknown) => console.error(err)\r\n    };\r\n\r\n    this.controllerService.getLoadedLocations().subscribe(csObserver);\r\n\r\n    if (this.scriptId === '0') {\r\n      this.scriptId = this.generateScriptId(5);\r\n      console.log(`new script id:${this.scriptId}`);\r\n      this.script = new Script(this.scriptId, \"\",\r\n        \"\", new Date(Date.parse(\"1970-01-01 00:00:00.000\")));\r\n\r\n      this.scriptChannels = this.script.scriptChannels;\r\n    }\r\n    else {\r\n\r\n      const ssObserver = {\r\n        next: async (result: Script) => {\r\n\r\n          for (const ch of result.scriptChannels) {\r\n            ch.events = new Map<number, ScriptEvent>();\r\n\r\n            for (const kvp of ch.eventsKvpArray) {\r\n              ch.events.set(kvp.key, kvp.value);\r\n            }\r\n          }\r\n\r\n          this.script = result;\r\n\r\n          this.scriptChannels = this.script.scriptChannels;\r\n\r\n          this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\r\n\r\n          if (!this.resourcesLoaded) {\r\n            await new Promise(f => setTimeout(f, 1000));\r\n          }\r\n\r\n          this.scriptResources.applyScript(this.script);\r\n        },\r\n        error: (err: unknown) => console.error(err)\r\n      };\r\n\r\n      this.scriptService.getScript(this.scriptId).subscribe(ssObserver)\r\n    }\r\n\r\n\r\n  }\r\n\r\n  saveScript() {\r\n\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        if (result && typeof result === 'object' && 'message' in result) {\r\n          if (result.message === 'success') {\r\n            console.log('script settings saved!')\r\n            this.snackBar.okToast('Script settings saved!');\r\n          }\r\n        } else {\r\n          console.log('script settings save failed!')\r\n          this.snackBar.okToast('Script settings save failed!');\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Script settings save failed!');\r\n      }\r\n    };\r\n\r\n    // Maps don't survive JSON.stringify\r\n    for (const ch of this.script.scriptChannels) {\r\n\r\n      ch.eventsKvpArray = [];\r\n\r\n      for (const key of ch.events.keys()) {\r\n        ch.eventsKvpArray.push({ key: key, value: ch.events.get(key) });\r\n      }\r\n    }\r\n\r\n    this.scriptService.saveScript(this.script).subscribe(observer);\r\n  }\r\n\r\n  //#region testing methods\r\n\r\n  openScriptTestModal() {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    modalResources.set(ModalResources.scriptId, this.scriptId);\r\n\r\n    const locations = new Array<string>();\r\n\r\n    this.script.deploymentStatusKvp.forEach((kvp) => { locations.push(kvp.key) });\r\n\r\n    modalResources.set(ModalResources.locations, locations);\r\n\r\n    const component = this.container.createComponent(ScriptTestModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.components.push(component);\r\n\r\n    this.backgroundClickDisabled = '1';\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  saveBeforeTest() {\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        if (result && typeof result === 'object' && 'message' in result) {\r\n          if (result.message === 'success') {\r\n            console.log('script settings saved!')\r\n            this.openScriptTestModal();\r\n          }\r\n        } else {\r\n          console.log('script settings save failed!')\r\n          this.snackBar.okToast('Script settings save failed!');\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Script settings save failed!');\r\n      }\r\n    };\r\n\r\n    // Maps don't survive JSON.stringify\r\n    for (const ch of this.script.scriptChannels) {\r\n\r\n      ch.eventsKvpArray = [];\r\n\r\n      for (const key of ch.events.keys()) {\r\n        ch.eventsKvpArray.push({ key: key, value: ch.events.get(key) });\r\n      }\r\n    }\r\n\r\n    this.scriptService.saveScript(this.script).subscribe(observer);\r\n  }\r\n\r\n\r\n  sendChannelTest(controllerId: number, commandType: ChannelType, command: unknown) {\r\n\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        if (result && typeof result === 'object' && 'message' in result) {\r\n          if (result.message === 'success') {\r\n            console.log('Test command sent!')\r\n            this.snackBar.okToast('Test command sent!');\r\n          }\r\n        } else {\r\n          console.log('Test command send failed!')\r\n          this.snackBar.okToast('Test command send failed!');\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBar.okToast('Test command send failed!');\r\n      }\r\n    };\r\n\r\n    this.controllerService.sendControllerCommand(controllerId, commandType, command)\r\n      .subscribe(observer);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  openChannelAddModal() {\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    modalResources.set(ModalResources.controllers, this.scriptResources.locations);\r\n    modalResources.set(ModalResources.modules, this.scriptResources.getAvailableModules());\r\n    modalResources.set(ModalResources.channels, this.scriptResources.getAvailableChannels());\r\n\r\n    const component = this.container.createComponent(ControllerModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.components.push(component);\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  openNewEventModal(evt: unknown) {\r\n    let time = 0;\r\n\r\n    if (evt && typeof evt === 'object' && 'timeline' in evt && 'xPos' in evt) {\r\n\r\n      const line = document.getElementById(`script-row-${evt.timeline}`);\r\n      const scrollContainer = document.getElementById(\"scripter-container\");\r\n\r\n      if (line != null && scrollContainer != null) {\r\n\r\n        const clickPos = (evt.xPos as number + scrollContainer.scrollLeft - line.offsetLeft);\r\n\r\n        time = Math.floor(clickPos / this.segmentWidth);\r\n\r\n        const left = (time * this.segmentWidth);\r\n\r\n        if (Math.floor(clickPos) - left >= 30) {\r\n          time += 1\r\n        }\r\n      }\r\n      else {\r\n        this.snackBar.okToast('Could not determine event time!');\r\n        console.log('could not determine event time');\r\n        return;\r\n      }\r\n\r\n      const chIdx = this.scriptChannels\r\n        .map((ch) => { return ch.id })\r\n        .indexOf(evt.timeline as string);\r\n\r\n      const ch = this.scriptChannels[chIdx];\r\n\r\n      const event = new ScriptEvent(ch.id, ch.type, ch.subType, time, '');\r\n\r\n      this.createEventModal(event, false);\r\n    }\r\n  }\r\n\r\n  openEditEventModal(channelId: string, time: number) {\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    if (chIdx > -1) {\r\n      const event = this.scriptChannels[chIdx].events.get(time);\r\n\r\n      if (event) {\r\n        this.createEventModal(event, true);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  createEventModal(event: ScriptEvent, isEdit: boolean) {\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n    modalResources.set(ModalResources.scriptEvent, event)\r\n\r\n    if (isEdit) {\r\n      modalResources.set(ModalResources.callbackType, ModalCallbackEvent.editEvent);\r\n    }\r\n\r\n    let component!: ComponentRef<ScripterModal>;\r\n\r\n    switch (event.channelType) {\r\n      case ChannelType.uart:\r\n        switch (event.channelSubType) {\r\n          case ChannelSubType.genericSerial:\r\n            component = this.container.createComponent(UartEventModalComponent)\r\n            modalResources.set(ModalResources.channelId, this.getUartChannelFromChannel(event.scriptChannel));\r\n            break;\r\n          case ChannelSubType.kangaroo:\r\n            component = this.container.createComponent(KangarooEventModalComponent)\r\n            modalResources.set(ModalResources.channelId, this.getUartChannelFromChannel(event.scriptChannel));\r\n            modalResources.set(ModalResources.kangaroo, this.getKangarooControllerFromChannel(event.scriptChannel));\r\n            break;\r\n          case ChannelSubType.humanCyborgRelations:\r\n            component = this.container.createComponent(HumanCyborgModalComponent)\r\n            modalResources.set(ModalResources.channelId, this.getUartChannelFromChannel(event.scriptChannel));\r\n            break;\r\n        }\r\n        break;\r\n      case ChannelType.i2c:\r\n        component = this.container.createComponent(I2cEventModalComponent);\r\n        modalResources.set(ModalResources.i2cId, this.getIdFromChannel(event.scriptChannel))\r\n        break;\r\n      /* case ChannelType.servo:\r\n         component = this.container.createComponent(ServoEventModalComponent);\r\n         modalResources.set(ModalResources.servoId, this.getIdFromChannel(event.scriptChannel))\r\n         break; */\r\n      case ChannelType.audio:\r\n        component = this.container.createComponent(AudioEventModalComponent);\r\n        break;\r\n      case ChannelType.gpio:\r\n        component = this.container.createComponent(GpioEventModalComponent);\r\n        modalResources.set(ModalResources.gpioId, this.getIdFromChannel(event.scriptChannel))\r\n        break;\r\n    }\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n    this.components.push(component);\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  //#region resources for modals \r\n\r\n  getUartChannelFromChannel(channelId: string) {\r\n    const _ = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    /*if (chIdx > -1) {\r\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\r\n      return uart.id;\r\n    }*/\r\n  }\r\n\r\n  getKangarooControllerFromChannel(channelId: string) {\r\n\r\n    const _ = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    /*if (chIdx > -1) {\r\n      const uart = this.scriptChannels[chIdx].channel as UartChannel;\r\n      return uart.module as KangarooController;\r\n    }*/\r\n  }\r\n\r\n  getIdFromChannel(channelId: string): number | null {\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    if (chIdx > -1) {\r\n      const servo = this.scriptChannels[chIdx].channel as BaseChannel;\r\n      return servo.id;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n\r\n  //#endregion\r\n\r\n  modalCallback(evt: any) {\r\n\r\n    switch (evt.id) {\r\n      case ModalCallbackEvent.addChannel:\r\n        this.addChannel(evt.controller, evt.module, evt.channels);\r\n        break;\r\n      case ModalCallbackEvent.removeChannel:\r\n        this.removeChannel(evt.val);\r\n        break;\r\n      case ModalCallbackEvent.addEvent:\r\n        this.addEvent(evt.scriptEvent);\r\n        break;\r\n      case ModalCallbackEvent.editEvent:\r\n        this.editEvent(evt.scriptEvent, evt.originalEventTime);\r\n        break;\r\n      case ModalCallbackEvent.removeEvent:\r\n        this.removeEvent(evt.channelId, evt.time);\r\n        break;\r\n      case ModalCallbackEvent.channelTest:\r\n        this.sendChannelTest(evt.controllerId, evt.commandType, evt.command);\r\n    }\r\n\r\n    this.modalService.close('scripter-modal');\r\n    this.container.clear();\r\n    this.components.splice(0, this.components.length);\r\n    this.backgroundClickDisabled = '0';\r\n  }\r\n\r\n  //#region script row call backs\r\n\r\n  timelineCallback(msg: any) {\r\n\r\n    msg.event.preventDefault();\r\n\r\n    this.menuTopLeft.x = msg.event.clientX;\r\n    this.menuTopLeft.y = msg.event.clientY;\r\n\r\n    this.menuTrigger.menuData = { 'item': { 'timeline': msg.id, 'xPos': msg.event.clientX } };\r\n\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  removeCallback(msg: any) {\r\n\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n    modalResources.set(ModalResources.action, 'Delete')\r\n    modalResources.set(ModalResources.message, 'Are you sure you want to delete channel?');\r\n    modalResources.set(ModalResources.confirmEvent, { id: ModalCallbackEvent.removeChannel, val: msg.id });\r\n    modalResources.set(ModalResources.closeEvent, { id: ModalCallbackEvent.close })\r\n\r\n    const component = this.container.createComponent(ConfirmModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: unknown) => {\r\n      this.modalCallback(evt);\r\n    });\r\n\r\n    this.components.push(component);\r\n\r\n    this.modalService.open('scripter-modal');\r\n  }\r\n\r\n  private removeChannel(id: string) {\r\n\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(id);\r\n\r\n    if (chIdx !== undefined && chIdx > -1) {\r\n      const channel = this.scriptChannels[chIdx];\r\n\r\n      this.scriptChannels.splice(chIdx, 1);\r\n\r\n      this.scriptResources.removeChannel(\r\n        channel.locationId,\r\n        channel.type,\r\n        channel.channel?.id\r\n      );\r\n\r\n      this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\r\n    }\r\n  }\r\n\r\n  channelTestCallback(msg: any) {\r\n\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(msg.id);\r\n\r\n    if (chIdx !== undefined && chIdx > -1) {\r\n\r\n      const ch = this.scriptChannels[chIdx];\r\n\r\n      this.container.clear();\r\n\r\n      const modalResources = new Map<string, unknown>();\r\n\r\n      modalResources.set(ModalResources.channelType, ch.type);\r\n      modalResources.set(ModalResources.channelSubType, ch.subType);\r\n      modalResources.set(ModalResources.channelId, ch.channelNumber);\r\n      modalResources.set(ModalResources.controllerType, ch.locationId);\r\n\r\n      const component = this.container.createComponent(ChannelTestModalComponent);\r\n\r\n      component.instance.resources = modalResources;\r\n      component.instance.modalCallback.subscribe((evt: unknown) => {\r\n        this.modalCallback(evt);\r\n      });\r\n      this.components.push(component);\r\n\r\n      this.modalService.open('scripter-modal');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  private addChannel(locationId: number, channelType: ChannelType, channels: number[]): void {\r\n\r\n    let name = this.scriptResources.locations.get(locationId)?.name;\r\n\r\n    if (!name) {\r\n      name = ''\r\n    }\r\n\r\n    if (channelType === ChannelType.audio) {\r\n      const chValue = this.scriptResources.addChannel(locationId, channelType, 0);\r\n\r\n      const subType = 0;\r\n\r\n      const ch = new ScriptChannel(Guid.create().toString(), this.scriptId, locationId, channelType, subType, 0, chValue, this.segments);\r\n\r\n      this.scriptChannels.push(ch);\r\n    }\r\n    else {\r\n      channels.forEach(channel => {\r\n        const chValue = this.scriptResources.addChannel(locationId, channelType, +channel);\r\n\r\n        let subType = 0;\r\n\r\n        if (channelType === ChannelType.uart) {\r\n          subType = chValue.type;\r\n        }\r\n\r\n        const ch = new ScriptChannel(Guid.create().toString(), this.scriptId, locationId, channelType, subType, channel, chValue, this.segments);\r\n\r\n        this.scriptChannels.push(ch);\r\n      });\r\n    }\r\n\r\n    this.scriptChannels.sort((a, b) => this.channelCompare(a, b));\r\n  }\r\n\r\n  private addEvent(event: ScriptEvent): void {\r\n\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(event.scriptChannel);\r\n\r\n    this.scriptChannels[chIdx].events.set(event.time, event);\r\n\r\n    this.renderEvent(event);\r\n  }\r\n\r\n  private editEvent(event: ScriptEvent, oldTime: number) {\r\n    //if (event.time !== oldTime) {\r\n    this.removeEvent(event.scriptChannel, oldTime);\r\n    this.addEvent(event);\r\n    // }\r\n    // else {\r\n\r\n    //  const chIdx = this.scriptChannels\r\n    //    .map((ch) => { return ch.id })\r\n    //    .indexOf(event.scriptChannel);\r\n\r\n    //  this.scriptChannels[chIdx].events.set(event.time, event);\r\n    //}\r\n  }\r\n\r\n  private renderEvent(event: ScriptEvent) {//channelId: string, time: number) {\r\n    const line = document.getElementById(`script-row-${event.scriptChannel}`);\r\n\r\n    const floater = this.renderer.createElement('div');\r\n    const displayText = EventMarkerHelper.generateText(event);\r\n\r\n    const line1 = this.renderer.createElement('div');\r\n    const line1txt = this.renderer.createText(displayText[0]);\r\n    this.renderer.appendChild(line1, line1txt);\r\n    this.renderer.appendChild(floater, line1);\r\n\r\n    const line2 = this.renderer.createElement('div');\r\n    const line2txt = this.renderer.createText(displayText[1]);\r\n    this.renderer.appendChild(line2, line2txt);\r\n    this.renderer.appendChild(floater, line2);\r\n\r\n    const line3 = this.renderer.createElement('div');\r\n    const line3txt = this.renderer.createText(displayText[2]);\r\n    this.renderer.appendChild(line3, line3txt);\r\n    this.renderer.appendChild(floater, line3);\r\n\r\n    const line4 = this.renderer.createElement('div');\r\n    const line4txt = this.renderer.createText(displayText[3]);\r\n    this.renderer.appendChild(line4, line4txt);\r\n    this.renderer.appendChild(floater, line4);\r\n\r\n    this.renderer.setAttribute(floater, 'class', 'scripter-timeline-marker');\r\n    this.renderer.setAttribute(floater, 'id', `event-${event.scriptChannel}-${event.time}`)\r\n    this.renderer.setStyle(floater, 'top', `-5px`);\r\n    this.renderer.setStyle(floater, 'left', `${(event.time * this.segmentWidth) - 37}px`);\r\n    this.renderer.listen(floater, 'click', (_) => {\r\n      this.openEditEventModal(event.scriptChannel, event.time);\r\n    })\r\n    this.renderer.appendChild(line, floater);\r\n  }\r\n\r\n  private removeEvent(channelId: string, time: number) {\r\n    const chIdx = this.scriptChannels\r\n      .map((ch) => { return ch.id })\r\n      .indexOf(channelId);\r\n\r\n    this.scriptChannels[chIdx].events.delete(time);\r\n\r\n    const element = document.getElementById(`event-${channelId}-${time}`);\r\n    if (element) {\r\n      element.parentNode?.removeChild(element);\r\n    }\r\n  }\r\n\r\n  private channelCompare(a: ScriptChannel, b: ScriptChannel) {\r\n    let val = a.locationId - b.locationId;\r\n\r\n    if (val !== 0) {\r\n      return val;\r\n    }\r\n\r\n    val = a.type - b.type;\r\n\r\n    if (val !== 0) {\r\n      return val;\r\n    }\r\n\r\n    return a.channel.channelName < b.channel.channelName ? -1 : 1;\r\n  }\r\n\r\n  private generateScriptId(length: number): string {\r\n    let result = `s${Math.floor(Date.now() / 1000)}`;\r\n    const charactersLength = this.characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n      result += this.characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/variables';\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 84%;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n\r\n}\r\n\r\n.script-title {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 8px;\r\n  input {\r\n    font-size: 20px;\r\n    height: 30px;\r\n    width: 100%;\r\n  }\r\n\r\n  .button-box {\r\n    float: right;\r\n\r\n    button{\r\n        font-size: x-large;\r\n        font-family: $swfont;\r\n        background-color: $dark-blue;\r\n    }\r\n  }\r\n\r\n\r\n  .script-name{\r\n    width: 240px;\r\n  }\r\n\r\n  .script-description{\r\n    flex-grow: 1;\r\n  }\r\n\r\n}\r\n.scripter-container {\r\n  background-color: $color-dark;\r\n  flex-grow: 1;\r\n  display: flex;\r\n  border: 2px solid black;\r\n  border-radius: 10px;\r\n  overflow-y: scroll;\r\n}\r\n\r\n\r\n.scripter-body {\r\ndisplay: flex;\r\nflex-direction: column;\r\n}\r\n\r\n.scripter-header {\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  top: 0px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  z-index: 500;\r\n}\r\n\r\n.scripter-modules {\r\n  flex-basis: 200px;\r\n  flex-grow: 0;\r\n  flex-shrink: 0;\r\n  padding-bottom: 17px;\r\n}\r\n\r\n.scripter-module-header {\r\n  cursor: pointer;\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  left: 0px;\r\n  top: 0px;\r\n  background-color: $color-medium;\r\n  font-family: $swfont;\r\n  font-size: x-large;\r\n  color: white;\r\n  text-shadow:\r\n  -2px -2px 0 $dark-blue,\r\n  2px -2px 0 $dark-blue,\r\n  -2px 2px 0 $dark-blue,\r\n  2px 2px 0 $dark-blue;\r\n  border-bottom: 2px solid black;\r\n  border-right: 2px solid black;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  width: 200px;\r\n  text-align: center;\r\n}\r\n\r\n.timeline-spacer {\r\n  width: 29px;\r\n  background-color: $color-pale;\r\n  border-bottom: 2px solid black;\r\n}\r\n\r\n.timeline-header {\r\n  width: 60px;\r\n  border-bottom: 2px solid black;\r\n}\r\n\r\n.timeline-gradient {\r\n  -ms-user-select: none;\r\n  -webkit-user-select: none;\r\n  user-select:none;\r\n  text-align: center;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  background-color: $color-pale;\r\n  font-weight: 500;  \r\n  color: black;\r\n  \r\n  background-image:\r\n    linear-gradient(90deg,\r\n      rgba(73, 73, 73, 0.5) 0,\r\n      rgba(73, 73, 73, 0.5) 2px,\r\n      transparent 2%),\r\n    linear-gradient(90deg,\r\n      transparent 50%,\r\n      rgba(73, 73, 73, 0.5) 0,\r\n      rgba(73, 73, 73, 0.5) 2px,\r\n      transparent 54%);\r\n\r\n  background-size: 100% 10px;\r\n  background-position: 0px 100%;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.scripter-timeline-marker {\r\n  text-align: center;\r\n  color: white;\r\n  position: absolute;\r\n  height: 74px;\r\n  width: 74px;\r\n  vertical-align: middle;\r\n  line-height: 18px;\r\n  margin-top: 15px;\r\n  padding-top: 2px;\r\n  top: 0px;\r\n  z-index: 100;\r\n  background-color: $light-blue;\r\n  border: 2px solid black;\r\n  border-radius: 15%;\r\n  cursor: pointer;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./scripter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controllerService",
                        "type": "ControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"script-title\">\r\n        <div class=\"script-name\">\r\n            <input matInput placeholder=\"Name\" [ngModel]=\"script?.scriptName\" (ngModelChange)=\"script.scriptName=$event\" />\r\n        </div>\r\n        <div class=\"script-description\">\r\n            <input matInput placeholder=\"Description\" [ngModel]=\"script?.description\" (ngModelChange)=\"script.description=$event\" />\r\n        </div>\r\n        <div class=\"button-box\">\r\n            <button (click)=\"saveScript()\">Save</button>\r\n            <button (click)=\"saveBeforeTest()\">Test</button>\r\n        </div>\r\n    </div>\r\n    <div id=\"scripter-container\" class=\"scripter-container\">\r\n        <div  class=\"scripter-body\">\r\n            <div class=\"scripter-header\">\r\n                <div class=\"scripter-module-header\" (click)=\"openChannelAddModal()\">Add Channel</div>\r\n                <div class=\" timeline-spacer\"></div>\r\n                <div *ngFor=\"let item of timeLineArray;\" class=\"timeline-gradient timeline-header\">{{item.toFixed(1)}}</div>\r\n            </div>\r\n            <app-script-row *ngFor=\"let ch of scriptChannels\" id=\"timeline-{{ch.id}}\"\r\n                (timelineCallback)=\"timelineCallback($event)\"\r\n                (removeCallback)=\"removeCallback($event)\"\r\n                (channelTestCallback)=\"channelTestCallback($event)\"\r\n                [channel]=\"ch\"></app-script-row>\r\n        </div>\r\n\r\n\r\n\r\n        <!-- an hidden div is created to set the position of appearance of the menu-->\r\n        <div style=\"visibility: hidden; position: fixed;\" [style.left.px]=\"menuTopLeft.x\" [style.top.px]=\"menuTopLeft.y\"\r\n            [matMenuTriggerFor]=\"rightMenu\"></div>\r\n\r\n\r\n\r\n        <!-- standard material menu -->\r\n        <mat-menu #rightMenu=\"matMenu\">\r\n            <ng-template matMenuContent let-item=\"item\">\r\n                <button (click)=\"openNewEventModal(item)\" mat-menu-item>Add Event</button>\r\n            </ng-template>\r\n        </mat-menu>\r\n    </div>\r\n</div>\r\n\r\n<app-astros-modal id=\"scripter-modal\"  disableBackgroundClick=\"{{backgroundClickDisabled}}\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "ScriptRowComponent",
            "id": "component-ScriptRowComponent-5569648b7a4395a80cd6e8e02ca49d3e3560e214fe5f27a62cd6c7c11a5a11747d55288ce1f3ff16d180fef1a8757835588d268d0936b07f7f7ae92601a8b14a",
            "file": "src/app/pages/scripter/script-row/script-row.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-script-row",
            "styleUrls": [
                "./script-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./script-row.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ScriptChannel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "channelTestCallback",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeCallback",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "timelineCallback",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptChannel",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "faEdit",
                    "defaultValue": "faEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "faPlay",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "locationName",
                    "defaultValue": "\"Location\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "segments",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "segmentWidth",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timeLineArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "timelineEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'timeline', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "uartType",
                    "defaultValue": "\"None\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getLocationName",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTimelineRightClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serialName",
                    "args": [
                        {
                            "name": "type",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "UartType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { EventEmitter, Component, Input, Output, Renderer2, ViewChild, ElementRef } from '@angular/core';\r\nimport { faTrash, faEdit, faPlay } from '@fortawesome/free-solid-svg-icons'\r\nimport { UartType, ScriptChannel } from 'astros-common';\r\nimport { NgIf } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'app-script-row',\r\n    templateUrl: './script-row.component.html',\r\n    styleUrls: ['./script-row.component.scss'],\r\n    standalone: true,\r\n    imports: [NgIf, FontAwesomeModule]\r\n})\r\n\r\nexport class ScriptRowComponent {\r\n\r\n  private segmentWidth = 60;\r\n  faTrash = faTrash;\r\n  faEdit = faEdit;\r\n  faPlay = faPlay;\r\n\r\n  locationName = \"Location\";\r\n  uartType = \"None\";\r\n\r\n  @ViewChild('timeline', { static: false }) timelineEl!: ElementRef;\r\n\r\n  _channel!: ScriptChannel\r\n\r\n  @Input()\r\n  set channel(channel: ScriptChannel) {\r\n    this._channel = channel;\r\n    this.locationName = this.getLocationName(channel.locationId);\r\n    this.uartType = this.serialName(channel.channel.type);\r\n  }\r\n  get channel(): ScriptChannel {\r\n    return this._channel;\r\n  }\r\n\r\n  @Output() timelineCallback = new EventEmitter<unknown>();\r\n  @Output() removeCallback = new EventEmitter<unknown>();\r\n  @Output() channelTestCallback = new EventEmitter<unknown>();\r\n\r\n  timeLineArray: number[];\r\n  private segments = 3000;\r\n\r\n  constructor(private renderer: Renderer2) {\r\n    this.timeLineArray = Array.from({ length: this.segments }, (_, i) => (i + 1))\r\n  }\r\n\r\n  remove(): void {\r\n    this.removeCallback.emit({ id: this.channel.id });\r\n  }\r\n\r\n  test(): void {\r\n    this.channelTestCallback.emit({ id: this.channel.id })\r\n  }\r\n\r\n  onTimelineRightClick(event: MouseEvent): void {\r\n    event.preventDefault();\r\n\r\n    this.timelineCallback.emit({ event: event, id: this.channel.id });\r\n  }\r\n\r\n  getLocationName(id: number): string {\r\n    switch (id) {\r\n      case 1:\r\n        return \"Body\";\r\n      case 2:\r\n        return \"Core\";\r\n      case 3:\r\n        return \"Dome\";\r\n      case 4:\r\n        return \"Audio Playback\";\r\n      default:\r\n        return \"Unknown\";\r\n    }\r\n  }\r\n\r\n  serialName(type: UartType): string {\r\n    switch (type) {\r\n      case UartType.none:\r\n        return \"None\";\r\n      case UartType.genericSerial:\r\n        return \"Generic Serial\";\r\n      case UartType.kangaroo:\r\n        return \"Kangaroo X2\";\r\n      case UartType.humanCyborgRelations:\r\n        return \"Human Cyborg Relations\";\r\n      default:\r\n        return \"None\";\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables';\r\n\r\n.script-row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.module-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: -webkit-sticky;\r\n    position: sticky;\r\n    left: 0px;\r\n    background-color: $light-blue;\r\n    color: white;\r\n    border-bottom: 2px solid black;\r\n    border-right: 2px solid black;\r\n    height: 100px;\r\n    width: 200px;\r\n    text-align: center;\r\n    z-index: 200;\r\n\r\n\r\n    .title {\r\n        font-size: x-large;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        margin: 4px 8px;\r\n        padding: 0px 0px 4px 0px;\r\n    }\r\n\r\n    .spacer{\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .button-bar{\r\n        text-align: right;\r\n        padding: 0px 0px 4px 0px;\r\n        button {\r\n            font-size: large;\r\n            padding: 0;\r\n            margin: 0px 12px 0px 0px;\r\n            border: none;\r\n            background-color: transparent;\r\n            color: white;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n\r\n.timeline-container{\r\n    background-color: rgb(218, 218, 218);\r\n    border-right: 2px solid black;\r\n    border-bottom: 2px solid black;\r\n    display: flex;\r\n    flex-direction: row;\r\n    position: relative;\r\n    width: 180030px;\r\n\r\n    --ruler-unit: 1px;\r\n  /* Tall ticks */\r\n  --ruler-bdw: 2px;\r\n  --ruler-c:  rgb(109, 109, 109);\r\n  --ruler-h: 100px;\r\n  --ruler-space: 60;\r\n  background-image:\r\n  linear-gradient(90deg, var(--ruler-c) 0 var(--ruler-bdw), transparent 0);\r\n  background-repeat: repeat-x;\r\n  background-size:\r\n  calc(var(--ruler-unit) * var(--ruler-space)) var(--ruler-h);\r\n  background-position: -1px 0px;\r\n}\r\n\r\n.scripter-timeline-marker {\r\n    text-align: center;\r\n    color: white;\r\n    position: absolute;\r\n    height: 60px;\r\n    width: 60px;\r\n    vertical-align: middle;\r\n    line-height: 60px;\r\n    margin-top: 15px;\r\n    top: 0px;\r\n    z-index: 100;\r\n    background-color: rgb(43, 74, 133);\r\n    border: 2px solid black;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n  }\r\n\r\n",
                    "styleUrl": "./script-row.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "channel": {
                    "name": "channel",
                    "setSignature": {
                        "name": "channel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "channel",
                                "type": "ScriptChannel",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "channel",
                                "type": "ScriptChannel",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "channel",
                        "type": "",
                        "returnType": "ScriptChannel",
                        "line": 35
                    }
                }
            },
            "templateData": "<div class=\"script-row-container\">\r\n    <div class=\"module-container\">\r\n        <div class=\"title\" *ngIf=\"channel.type !== 1 && channel.type !== 4\">{{channel.channel.channelName}}</div>\r\n        <div class=\"title\" *ngIf=\"channel.type === 1\">{{channel.channel.moduleName}}</div>\r\n        <div class=\"title\" *ngIf=\"channel.type === 4\">{{locationName}}</div>\r\n        \r\n        <div *ngIf=\"channel.type !== 4\">{{locationName}}</div>\r\n        <div  *ngIf=\"channel.type === 1\">{{uartType}}</div>\r\n        <div  *ngIf=\"channel.type === 2\"><span>I2C Channel: </span>{{channel.channel?.id}} </div>\r\n        <div  *ngIf=\"channel.type === 3\"><span>Servo Channel: </span>{{channel.channel?.id}} </div>\r\n        <div *ngIf=\"channel.type === 5\"><span>GPIO: </span>{{channel.channel?.id}}</div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"button-bar\">\r\n            <button title=\"Test\" (click)=\"test()\"><fa-icon [icon]=\"faPlay\"></fa-icon></button>\r\n            <button title=\"Remove\" (click)=\"remove()\"><fa-icon [icon]=\"faTrash\"></fa-icon></button>\r\n        </div>\r\n    </div> \r\n    <div id=\"script-row-{{channel.id}}\" class=\"timeline-container\" (contextmenu)=\"onTimelineRightClick($event)\" #timeline>\r\n        \r\n    </div>\r\n<div>\r\n"
        },
        {
            "name": "ScriptsComponent",
            "id": "component-ScriptsComponent-8a75e84aa05f62f2ba1759361f03c018f1fb2471c5f7359199180d9d1561fbee0257632822e8fed89172c50b5bcbaebbf9bd4a1007231d3720a607e1f59df825",
            "file": "src/app/pages/scripts/scripts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scripts",
            "styleUrls": [
                "./scripts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scripts.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_scripts",
                    "defaultValue": "new Array<Script>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Script[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "faCopy",
                    "defaultValue": "faCopy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faRun",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "faUpload",
                    "defaultValue": "faUpload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "initialStatusSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "locationMap",
                    "defaultValue": "new Map<number, string>([\r\n    [1, 'body'],\r\n    [2, 'core'],\r\n    [3, 'dome']])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scripts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Script[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "copyClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScript",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Script | undefined",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUploadStatus",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUploadStatusClass",
                    "args": [
                        {
                            "name": "status",
                            "type": "UploadStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"notuploaded\" | \"uploading\" | \"uploaded\"",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "UploadStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUploadDate",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controllerId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUploadingStatus",
                    "args": [
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusUpdate",
                    "args": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUploadStatusElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locationId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scriptId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadClicked",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ViewContainerRef, AfterViewChecked } from '@angular/core';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { faCopy, faPlay, faTrash, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { ScriptResponse, TransmissionStatus, TransmissionType, UploadStatus, Script } from 'astros-common';\r\nimport { ConfirmModalComponent, ModalCallbackResult, ModalService } from 'src/app/modal';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { ModalCallbackEvent, ModalResources } from 'src/app/shared/modal-resources';\r\nimport { NgFor } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { ModalComponent } from '../../services/modal/modal.component';\r\n\r\n@Component({\r\n  selector: 'app-scripts',\r\n  templateUrl: './scripts.component.html',\r\n  styleUrls: ['./scripts.component.scss'],\r\n  standalone: true,\r\n  imports: [NgFor, RouterLink, FontAwesomeModule, ModalComponent]\r\n})\r\nexport class ScriptsComponent implements OnInit, AfterViewChecked {\r\n\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n  private initialStatusSet = false;\r\n\r\n  faTrash = faTrash;\r\n  faUpload = faUpload;\r\n  faRun = faPlay;\r\n  faCopy = faCopy;\r\n\r\n  _scripts: Script[] = new Array<Script>();\r\n\r\n  scripts: Script[]\r\n\r\n  locationMap = new Map<number, string>([\r\n    [1, 'body'],\r\n    [2, 'core'],\r\n    [3, 'dome']]);\r\n\r\n  constructor(private router: Router,\r\n    private scriptService: ScriptsService,\r\n    private socket: WebsocketService,\r\n    private snackBarService: SnackbarService,\r\n    private modalService: ModalService) {\r\n    this.scripts = new Array<Script>();\r\n\r\n    this.socket.messages.subscribe((msg: unknown) => {\r\n      if (msg && typeof msg === 'object' && 'type' in msg)\r\n        if (msg.type === TransmissionType.script) {\r\n          this.statusUpdate(msg as ScriptResponse);\r\n        }\r\n    });\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const observer = {\r\n      next: (result: Script[]) => {\r\n        this.scripts = result.sort((a, b) => {\r\n          if (a.scriptName > b.scriptName) { return 1; }\r\n          if (a.scriptName < b.scriptName) { return -1; }\r\n          return 0;\r\n        });\r\n      },\r\n      error: (err: unknown) => console.error(err)\r\n    };\r\n\r\n    this.scriptService.getAllScripts().subscribe(observer);\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this.initialStatusSet) { return; }\r\n    if (this.scripts.length === 0) { return; }\r\n\r\n    for (const script of this.scripts) {\r\n      this.updateUploadStatusElement('body', 1, script.id);\r\n      this.updateUploadStatusElement('core', 2, script.id);\r\n      this.updateUploadStatusElement('dome', 3, script.id);\r\n    }\r\n\r\n    this.initialStatusSet = true;\r\n  }\r\n\r\n  updateUploadStatusElement(element: string, locationId: number, scriptId: string): void {\r\n    const el = document.getElementById(`${scriptId}_${element}`);\r\n    if (el === null) { return; }\r\n    const status = this.getUploadStatus(scriptId, locationId);\r\n    el.classList.remove('uploaded');\r\n    el.classList.remove('notuploaded');\r\n    el.classList.remove('uploading');\r\n    el.classList.add(status.s);\r\n\r\n    const toolTip = document.getElementById(`${scriptId}_${element}_tooltip`);\r\n    if (toolTip === null) { return; }\r\n    toolTip.innerText = status.d;\r\n  }\r\n\r\n  setUploadingStatus(scriptId: string): void {\r\n\r\n    const script = this.getScript(scriptId);\r\n\r\n    if (!script) { return; }\r\n\r\n    for (const location of this.locationMap.entries()) {\r\n      if (script.deploymentStatusKvp.map((s) => { return s.key }).indexOf(location[0].toString()) > -1) {\r\n        const el = document.getElementById(`${scriptId}_${location[1]}`);\r\n        if (el === null) { continue; }\r\n        el.classList.remove('uploaded');\r\n        el.classList.remove('notuploaded');\r\n        el.classList.add('uploading');\r\n\r\n        const toolTip = document.getElementById(`${scriptId}_${location}_tooltip`);\r\n        if (toolTip === null) { continue; }\r\n        toolTip.innerText = 'Uploading...';\r\n      }\r\n    }\r\n  }\r\n\r\n  newScript() {\r\n    this.router.navigate(['scripter', '0']);\r\n  }\r\n\r\n  modalCallback(evt: ModalCallbackResult) {\r\n\r\n    switch (evt.type) {\r\n      case ConfirmModalComponent.confirmEvent:\r\n        this.removeFile(evt.value as string);\r\n        break;\r\n    }\r\n\r\n    this.modalService.close('scripts-modal');\r\n    this.container.clear();\r\n  }\r\n\r\n  removeClicked(id: string) {\r\n    this.container.clear();\r\n\r\n    const modalResources = new Map<string, unknown>();\r\n    modalResources.set(ModalResources.action, 'Delete')\r\n    modalResources.set(ModalResources.message, `Are you sure you want to delete script?`);\r\n    modalResources.set(ModalResources.confirmEvent, { id: ModalCallbackEvent.delete, val: id });\r\n    modalResources.set(ModalResources.closeEvent, { id: ModalCallbackEvent.close })\r\n\r\n    const component = this.container.createComponent(ConfirmModalComponent);\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: ModalCallbackResult) => {\r\n      this.modalCallback(evt);\r\n    });\r\n\r\n    this.modalService.open('scripts-modal');\r\n  }\r\n\r\n  removeFile(id: string) {\r\n    const idx = this.scripts\r\n      .map((s) => { return s.id })\r\n      .indexOf(id);\r\n\r\n    if (idx < 0) {\r\n      return;\r\n    }\r\n\r\n    this.scripts.splice(idx, 1);\r\n\r\n    this.scriptService.deleteScript(id).subscribe();\r\n  }\r\n\r\n  runClicked(id: string) {\r\n    const idx = this.scripts\r\n      .map((s) => { return s.id })\r\n      .indexOf(id);\r\n\r\n    if (idx < 0) {\r\n      return;\r\n    }\r\n\r\n    const observer = {\r\n      next: (result: unknown) => {\r\n        console.log(result);\r\n        this.snackBarService.okToast('Script run queued!');\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBarService.okToast('Error requesting upload. Check logs.');\r\n      }\r\n    }\r\n\r\n    this.scriptService.runScript(id).subscribe(observer);\r\n  }\r\n\r\n  copyClicked(id: string) {\r\n    const idx = this.scripts\r\n      .map((s) => { return s.id })\r\n      .indexOf(id);\r\n\r\n    if (idx < 0) {\r\n      return;\r\n    }\r\n\r\n    const observer = {\r\n      next: (result: Script) => {\r\n        if (result === undefined) {\r\n          this.snackBarService.okToast('Error copying script. Check logs.');\r\n        } else {\r\n          this.scripts.push(result);\r\n\r\n          this.scripts.sort((a, b) => {\r\n            if (a.scriptName > b.scriptName) { return 1; }\r\n            if (a.scriptName < b.scriptName) { return -1; }\r\n            return 0;\r\n          });\r\n        }\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBarService.okToast('Error copying script. Check logs.');\r\n      }\r\n    }\r\n\r\n    this.scriptService.copyScript(id).subscribe(observer);\r\n  }\r\n\r\n  uploadClicked(id: string) {\r\n    const observer = {\r\n      next: (result: unknown) => console.log(result),\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.snackBarService.okToast('Error requesting upload. Check logs.');\r\n      }\r\n    };\r\n\r\n    const idx = this.scripts\r\n      .map((s) => { return s.id })\r\n      .indexOf(id);\r\n\r\n    if (idx < 0) {\r\n      return;\r\n    }\r\n\r\n    this.scriptService.uploadScript(id).subscribe(observer);\r\n    this.setUploadingStatus(id);\r\n  }\r\n\r\n  statusUpdate(msg: ScriptResponse) {\r\n\r\n    if (msg.status === TransmissionStatus.success) {\r\n      this.setUploadDate(msg.scriptId, msg.locationId, msg.date);\r\n    }\r\n\r\n    this.updateUploadStatusElement(this.locationMap.get(msg.locationId) as string, msg.locationId, msg.scriptId);\r\n  }\r\n\r\n  getUploadStatus(id: string, locationId: number): { s: string, d: string } {\r\n    let dateString = 'Not Uploaded';\r\n\r\n    const script = this.getScript(id);\r\n\r\n    if (!script) { return { s: 'notuploaded', d: dateString }; }\r\n\r\n    const sidx = script.deploymentStatusKvp\r\n      .map((s) => { return s.key })\r\n      .indexOf(locationId.toString());\r\n\r\n    if (sidx < 0) { return { s: 'notuploaded', d: dateString }; }\r\n\r\n    const kvp = script.deploymentStatusKvp[sidx];\r\n    let uploadStatus = kvp.value.value;\r\n\r\n\r\n    if (kvp.value.date) {\r\n      const uploaddate = new Date(kvp.value.date);\r\n      const scriptdate = new Date(script.lastSaved)\r\n      if (uploaddate < scriptdate) {\r\n        uploadStatus = UploadStatus.notUploaded;\r\n        dateString = ' Out of date ';\r\n      } else {\r\n        dateString = uploaddate.toLocaleDateString(navigator.language, { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' });\r\n      }\r\n    }\r\n\r\n    return { s: this.getUploadStatusClass(uploadStatus), d: dateString };\r\n  }\r\n\r\n  getUploadStatusClass(status: UploadStatus) {\r\n    switch (status) {\r\n      case UploadStatus.notUploaded:\r\n        return 'notuploaded';\r\n      case UploadStatus.uploading:\r\n        return 'uploading';\r\n      case UploadStatus.uploaded:\r\n        return 'uploaded';\r\n      default:\r\n        return 'notuploaded';\r\n    }\r\n  }\r\n\r\n  setUploadDate(id: string, controllerId: number, date: Date): void {\r\n    const script = this.getScript(id);\r\n\r\n    if (!script) { return; }\r\n\r\n    const sidx = script.deploymentStatusKvp\r\n      .map((s) => { return s.key })\r\n      .indexOf(controllerId.toString());\r\n\r\n    if (sidx < 0) { return; }\r\n\r\n    script.deploymentStatusKvp[sidx].value.date = date;\r\n  }\r\n\r\n  getScript(id: string): Script | undefined {\r\n    const idx = this.scripts\r\n      .map((s) => { return s.id })\r\n      .indexOf(id);\r\n\r\n    if (idx < 0) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.scripts[idx];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/styles/variables\";\r\n\r\n.script-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n\r\n    .spacer {\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .script-body {\r\n\r\n        padding: 20px;\r\n        max-width: 1000px;\r\n        flex-grow: 20;\r\n\r\n        .button-bar {\r\n            display: flex;\r\n            flex-direction: row;\r\n            height: 54px;\r\n            line-height: 54px;\r\n\r\n            .title {\r\n                width: 200px;\r\n                font-size: xx-large;\r\n                font-family: $swfont;\r\n            }\r\n\r\n\r\n            .button-box {\r\n                float: right;\r\n\r\n                button {\r\n                    font-size: x-large;\r\n                    font-family: $swfont;\r\n                    background-color: $dark-blue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.script-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n\r\n    .script-line {\r\n        display: flex;\r\n        height: 40px;\r\n        line-height: 40px;\r\n        flex-direction: row;\r\n        border-bottom: solid 2px black;\r\n    }\r\n\r\n    .click-bar {\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .name-section {\r\n        font-size: large;\r\n        flex-basis: 240px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    .desc-section {\r\n        flex-grow: 1;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    .upload-section {\r\n        text-align: center;\r\n        width: 60px;\r\n        height: 24px;\r\n        line-height: 24px;\r\n        border: solid 1px black;\r\n        margin: 4px;\r\n    }\r\n\r\n    .uploaded {\r\n        background-color: green;\r\n        color: white;\r\n    }\r\n\r\n    .uploading {\r\n        background-color: goldenrod;\r\n        color: black;\r\n    }\r\n\r\n    .notuploaded {\r\n        background-color: maroon;\r\n        color: white;\r\n    }\r\n\r\n    .button-container {\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin-left: 12px;\r\n        \r\n        button {\r\n            font-size: large;\r\n            padding: 0;\r\n            margin: 0px 12px 0px 4px;\r\n            border: none;\r\n            background-color: transparent;\r\n            color: black;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n    border-bottom: 1px dotted black;\r\n}\r\n\r\n.tooltip .tooltiptext {\r\n    visibility: hidden;\r\n    width: 120px;\r\n    background-color: black;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 6px;\r\n    padding: 5px 0;\r\n\r\n    /* Position the tooltip */\r\n    position: absolute;\r\n    z-index: 1;\r\n}\r\n\r\n.tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n}",
                    "styleUrl": "./scripts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"script-container\">\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"script-body\">\r\n        <div class=\"button-bar\">\r\n            <div class=\"title\">\r\n                Scripts\r\n            </div>\r\n            <div class=\"spacer\"></div>\r\n            <div class=\"button-box\">\r\n                <button (click)=\"newScript()\" class=\"new-script\">New</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"script-list-container\">\r\n            <ul class=\"script-list\">\r\n                <li *ngFor=\"let script of scripts\">\r\n                    <div class=\"script-line\">\r\n                        <div class=\"click-bar\" routerLink=\"/scripter/{{script.id}}\">\r\n                            <div class=\"name-section\">{{script.scriptName}}</div>\r\n                            <div class=\"desc-section\">{{script.description}}</div>\r\n                        </div>\r\n                        <div [attr.id]=\"script.id + '_body'\"\r\n                            class=\"upload-section tooltip\">Body <span class=\"tooltiptext\" [attr.id]=\"script.id + '_body_tooltip'\"></span></div>\r\n                        <div [attr.id]=\"script.id + '_core'\"\r\n                            class=\"upload-section tooltip\">Core <span class=\"tooltiptext\" [attr.id]=\"script.id + '_core_tooltip'\"></span></div>\r\n                        <div [attr.id]=\"script.id + '_dome'\"\r\n                            class=\"upload-section tooltip\">Dome <span class=\"tooltiptext\" [attr.id]=\"script.id + '_dome_tooltip'\"></span></div>\r\n                        <div class=\"button-container\">\r\n                            <div class=\"copy\">\r\n                                <button title=\"Copy\" (click)=\"copyClicked(script.id)\"><fa-icon [icon]=\"faCopy\"></fa-icon></button>\r\n                            </div>\r\n                            <div class=\"upload\">\r\n                                <button title=\"Upload\" (click)=\"uploadClicked(script.id)\"><fa-icon [icon]=\"faUpload\"></fa-icon></button>\r\n                            </div>\r\n                            <div class=\"run\">\r\n                                <button title=\"Run\" (click)=\"runClicked(script.id)\"><fa-icon [icon]=\"faRun\"></fa-icon></button>\r\n                            </div>\r\n                            <div class=\"trash\">\r\n                                <button title=\"Delete\" (click)=\"removeClicked(script.id)\"><fa-icon [icon]=\"faTrash\"></fa-icon></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n</div>\r\n\r\n<app-astros-modal id=\"scripts-modal\" disableBackgroundClick=\"0\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "ScriptTestModalComponent",
            "id": "component-ScriptTestModalComponent-e20debc8b8023e8ddf985ac947d2587b3580870aedc3f772c6364d3eb2242f8dcda2cd0696c0b186b831a38b1a65bc2bf721dc6786b2dfb22630764e3e9bfaf4",
            "file": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-script-test-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./script-test-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./script-test-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "bodyCaption",
                    "defaultValue": "{ str: 'Uploading' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "bodyUpload",
                    "defaultValue": "TransmissionStatus.sending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransmissionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "coreCaption",
                    "defaultValue": "{ str: 'Uploading' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "coreUpload",
                    "defaultValue": "TransmissionStatus.sending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransmissionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "domeCaption",
                    "defaultValue": "{ str: 'Uploading' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Caption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "domeUpload",
                    "defaultValue": "TransmissionStatus.sending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransmissionStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "runDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "scriptId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "uploadInProgress",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCaption",
                    "args": [
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "TransmissionStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "caption",
                            "type": "Caption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "TransmissionStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInitialUploadStatus",
                    "args": [
                        {
                            "name": "hasBody",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasCore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasDome",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hasBody",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasCore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasDome",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusUpdate",
                    "args": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "ScriptResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { \r\n  ScriptResponse, \r\n  TransmissionStatus, \r\n  TransmissionType \r\n} from 'astros-common';\r\nimport { ScriptsService } from 'src/app/services/scripts/scripts.service';\r\nimport { WebsocketService } from 'src/app/services/websocket/websocket.service';\r\nimport { BaseEventModalComponent } from '../base-event-modal/base-event-modal.component';\r\n\r\ninterface Caption { str: string }\r\n\r\nexport class ScriptTestModalResources {\r\n  public static scriptId: string = 'scriptId';\r\n  public static locations: string = 'locations';\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-script-test-modal',\r\n  templateUrl: './script-test-modal.component.html',\r\n  styleUrls: ['../base-event-modal/base-event-modal.component.scss', './script-test-modal.component.scss'],\r\n  standalone: true\r\n})\r\nexport class ScriptTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  uploadInProgress = true;\r\n  runDisabled = true;\r\n\r\n  coreUpload: TransmissionStatus = TransmissionStatus.sending;\r\n  domeUpload: TransmissionStatus = TransmissionStatus.sending;\r\n  bodyUpload: TransmissionStatus = TransmissionStatus.sending;\r\n\r\n  coreCaption: Caption = { str: 'Uploading' };\r\n  domeCaption: Caption = { str: 'Uploading' };\r\n  bodyCaption: Caption = { str: 'Uploading' };\r\n\r\n  status: string;\r\n\r\n  scriptId = '';\r\n\r\n  constructor(private socket: WebsocketService, private scriptService: ScriptsService) {\r\n    super();\r\n    this.status = \"Uploading script...\";\r\n\r\n    this.socket.messages.subscribe((msg: unknown) => {\r\n      if (msg && typeof msg === 'object' && 'type' in msg) {\r\n        if (msg.type === TransmissionType.script) {\r\n          this.statusUpdate(msg as ScriptResponse);\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.scriptId = this.resources.get(ScriptTestModalResources.scriptId) as string;\r\n    const locations = this.resources.get(ScriptTestModalResources.locations) as number[];\r\n\r\n    let hasBody = false;\r\n    let hasCore = false;\r\n    let hasDome = false;\r\n\r\n    locations.forEach((location: number) => {\r\n      switch (location) {\r\n        case 1:\r\n          hasBody = true;\r\n          break;\r\n        case 2:\r\n          hasCore = true;\r\n          break;\r\n        case 3:\r\n          hasDome = true;\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.setInitialUploadStatus(hasBody, hasCore, hasDome);\r\n\r\n    const observer = {\r\n      next: (result: unknown) => console.log(result),\r\n      error: (err: unknown) => {\r\n        console.error(err);\r\n        this.status = 'Error requesting Script Upload';\r\n        this.coreUpload = TransmissionStatus.failed;\r\n        this.coreCaption.str = 'Failed';\r\n        this.domeUpload = TransmissionStatus.failed;\r\n        this.domeCaption.str = 'Failed';\r\n        this.bodyUpload = TransmissionStatus.failed;\r\n        this.bodyCaption.str = 'Failed';\r\n      }\r\n    };\r\n\r\n    if (this.scriptId != '') {\r\n      this.scriptService.uploadScript(this.scriptId).subscribe(observer);\r\n    }\r\n    else {\r\n      this.status = 'Script ID missing, close dialog to continue.'\r\n    }\r\n  }\r\n\r\n  runClicked() {\r\n    console.log(`Running script: ${this.scriptId}`)\r\n    this.scriptService.runScript(this.scriptId).subscribe();\r\n    this.closeModal();\r\n  }\r\n\r\n  setInitialUploadStatus(hasBody: boolean, hasCore: boolean, hasDome: boolean) {\r\n    if (hasBody) {\r\n      this.bodyUpload = TransmissionStatus.sending;\r\n      this.bodyCaption.str = 'Uploading';\r\n    } else {\r\n      this.bodyUpload = TransmissionStatus.success;\r\n      this.bodyCaption.str = 'Not Assigned';\r\n    }\r\n\r\n    if (hasCore) {\r\n      this.coreUpload = TransmissionStatus.sending;\r\n      this.coreCaption.str = 'Uploading';\r\n    } else {\r\n      this.coreUpload = TransmissionStatus.success;\r\n      this.coreCaption.str = 'Not Assigned';\r\n    }\r\n\r\n    if (hasDome) {\r\n      this.domeUpload = TransmissionStatus.sending;\r\n      this.domeCaption.str = 'Uploading';\r\n    } else {\r\n      this.domeUpload = TransmissionStatus.success;\r\n      this.domeCaption.str = 'Not Assigned';\r\n    }\r\n  }\r\n\r\n  statusUpdate(msg: ScriptResponse) {\r\n    switch (msg.locationId) {\r\n      case 1:\r\n        this.bodyUpload = msg.status;\r\n        this.setCaption(this.bodyCaption, msg.status);\r\n        break;\r\n      case 2:\r\n        this.coreUpload = msg.status;\r\n        this.setCaption(this.coreCaption, msg.status);\r\n        break;\r\n      case 3:\r\n        this.domeUpload = msg.status;\r\n        this.setCaption(this.domeCaption, msg.status);\r\n        break;\r\n    }\r\n\r\n    if (this.coreUpload > 1 && this.domeUpload > 1 && this.bodyUpload > 1) {\r\n      this.status = \"Upload Complete.\"\r\n      this.uploadInProgress = false;\r\n      if (this.coreUpload + this.domeUpload + this.bodyUpload >= 6) {\r\n        this.runDisabled = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  setCaption(caption: Caption, status: TransmissionStatus) {\r\n    switch (status) {\r\n      case TransmissionStatus.success:\r\n        caption.str = \"Success\"\r\n        break;\r\n      case TransmissionStatus.failed:\r\n        caption.str = \"Failed\"\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./script-test-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "WebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scriptService",
                        "type": "ScriptsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Script Test</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <span>{{status}}</span>\r\n            <div>\r\n                <span>Body: {{bodyCaption.str}}</span>\r\n            </div>\r\n            <div>\r\n                <span>Core: {{coreCaption.str}}</span>\r\n            </div>\r\n            <div>\r\n                <span>Dome: {{domeCaption.str}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"runClicked();\" [disabled]=\"runDisabled ? 'disabled' : null\">Run</button>\r\n            <button (click)=\"closeModal();\">Cancel</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ServoEventModalComponent",
            "id": "component-ServoEventModalComponent-897a4952e6e850eed65a2f835404b5d591b88f173ac915db591cbf29577ab0144ebe68963738ce73a3fed6c956be2e8a4f4e8775766ffe310f57311e9570c259",
            "file": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-servo-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./servo-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./servo-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "acceleration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "channelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class ServoEventModalResources {\r\n  public static servoId = 'servoId';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-servo-event-modal',\r\n    templateUrl: './servo-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './servo-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class ServoEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n\r\n  channelId!: number;\r\n  speed: number;\r\n  position: number;\r\n  acceleration: number;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.speed = 1;\r\n    this.position = 0;\r\n    this.acceleration = 0;\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.scriptEvent = this.resources.get(ServoEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    this.channelId = this.resources.get(ServoEventModalResources.servoId) as number;\r\n\r\n    if (this.scriptEvent.dataJson != ''){\r\n      console.log(this.scriptEvent.dataJson);\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.channelId = payload.channelId;\r\n      this.position = payload.position;\r\n      this.speed = payload.speed;\r\n      this.acceleration = payload.acceleration;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time / this.timeFactor;\r\n    this.eventTime = this.scriptEvent.time / this.timeFactor;\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime/this.timeFactor}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime * this.timeFactor;\r\n\r\n    //const data = new ServoEvent(+this.channelId, +this.position, +this.speed, +this.acceleration);\r\n    //this.scriptEvent.dataJson = JSON.stringify(data);\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime * this.timeFactor\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./servo-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Servo Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" \r\n                [ngModel]=\"eventTime | number : '1.0-1'\" (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Position (0 to 100%)</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"position\" type=\"number\" min=\"0\" max=\"100\"\r\n                (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\" \r\n                (change)= \"position < 0 ? position = 0 : position; position > 100 ? position = 100 : position;\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Speed (0 to 255, 0 is unlimited)</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"speed\" type=\"number\" min=\"0\" max=\"255\"\r\n                (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\" \r\n                (change)= \"speed < 0 ? speed = 0 : speed; speed > 255 ? speed = 255 : speed;\"/>\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Accel. (0 to 255, 0 is unlimited)</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"acceleration\" type=\"number\" min=\"0\" max=\"255\"\r\n                (keypress)=\"($event.charCode >= 48 && $event.charCode < 58)\" \r\n                (change)= \"acceleration < 0 ? acceleration = 0 : acceleration; acceleration > 255 ? acceleration = 255 : acceleration;\"/>\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ServoTestModalComponent",
            "id": "component-ServoTestModalComponent-e91905c810f4988980bf05e071521cf56bcc0c9f1dba16876567224feeebfb06d16009000c8d6d47c8bb17578e73935c5f6d54c5d1fd0b4d0638403716715ffa",
            "file": "src/app/components/modals/servo-test-modal/servo-test-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-servo-test-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./servo-test-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "controllerId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "disableSlider",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "servoId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "value",
                    "defaultValue": "1500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "enableTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSliderChange",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSlider"
                },
                {
                    "name": "MatSliderThumb"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseEventModalComponent } from '../scripting/base-event-modal/base-event-modal.component';\r\nimport { MatSlider, MatSliderThumb } from '@angular/material/slider';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ModalCallbackEvent } from '../modal-base/modal-base.component';\r\n\r\nexport class ServoTestModalResources {\r\n  public static servoId: string = 'servoId';\r\n  public static controllerId: string = 'controllerId';\r\n  public static sendServoMove: string = 'servoTest_servoMove';\r\n  public static closeEvent: string = 'servoTest_closeEvent';\r\n}\r\n\r\nexport interface ServoTestMessage {\r\n  controllerId: number;\r\n  servoId: number;\r\n  value: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-servo-test-modal',\r\n    templateUrl: './servo-test-modal.component.html',\r\n    styleUrl: './servo-test-modal.component.scss',\r\n    standalone: true,\r\n    imports: [MatSlider, MatSliderThumb, FormsModule]\r\n})\r\nexport class ServoTestModalComponent extends BaseEventModalComponent implements OnInit {\r\n   \r\n  servoId = 0;\r\n  controllerId = 0;\r\n  disableSlider = true;\r\n  value = 1500;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.servoId = this.resources.get(ServoTestModalResources.servoId) as number;\r\n    this.controllerId = this.resources.get(ServoTestModalResources.controllerId) as number;\r\n  }\r\n\r\n  onSliderChange(_: unknown) {\r\n    const evt = new ModalCallbackEvent(\r\n      ServoTestModalResources.sendServoMove,\r\n      {\r\n        controllerId: this.controllerId,\r\n        servoId: this.servoId,\r\n        value: this.value\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n\r\n  enableTest() {\r\n    this.disableSlider = false;\r\n  }\r\n\r\n  override closeModal(): void {\r\n    const evt = new ModalCallbackEvent(\r\n      ServoTestModalResources.closeEvent,\r\n      null\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n",
            "styleUrl": "./servo-test-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"servo-test-modal\">\r\n    <div class=\"modal-body\">\r\n        <div class=\"label\">Servo {{servoId}} Test</div>\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"label\">{{slider.value}}</div>\r\n        <mat-slider \r\n            min=\"500\" \r\n            max=\"2500\" \r\n            default=\"1500\"\r\n            step=\"1\"\r\n            [disabled]=\"disableSlider\"   \r\n        >\r\n            <input matSliderThumb (input)=\"onSliderChange($event)\" [(ngModel)]=\"value\" #slider>\r\n        </mat-slider>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>        \r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"enableTest();\">Enable Test</button>\r\n        </div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-9a7abc6306ea81af83bc55ecb46420a39c39ac76961897012482cf90ad7ae553a5cf1043137daf0a52bdaffc2d88cd3c2abfca8fb9df1b6eba0ea06b4272161a",
            "file": "src/app/pages/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [
                "./settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiKey",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "characters",
                    "defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "controllers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlModule[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "formatSD",
                    "args": [
                        {
                            "name": "val",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modalCallback",
                    "args": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "ModalCallbackResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popModal",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { KeyValue } from '@angular/common';\r\nimport { Component, ComponentRef, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { ModalCallbackResult, ModalService } from 'src/app/modal';\r\nimport { SettingsService } from 'src/app/services/settings/settings.service';\r\nimport { SnackbarService } from 'src/app/services/snackbar/snackbar.service';\r\nimport { ModalCallbackEvent, ModalResources } from 'src/app/shared/modal-resources';\r\nimport { FormatModalComponent } from './modals/format-modal/format-modal.component';\r\nimport { ControlModule } from 'astros-common';\r\nimport { ModalComponent } from '../../services/modal/modal.component';\r\n\r\n@Component({\r\n    selector: 'app-settings',\r\n    templateUrl: './settings.component.html',\r\n    styleUrls: ['./settings.component.scss'],\r\n    standalone: true,\r\n    imports: [ModalComponent]\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n  @ViewChild('modalContainer', { read: ViewContainerRef }) container!: ViewContainerRef;\r\n\r\n  apiKey = \"\";\r\n  private characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  private controllers: ControlModule[] = [];\r\n\r\n  constructor(private settingsService: SettingsService,\r\n    private snackBarService: SnackbarService,\r\n    private modalService: ModalService) { }\r\n\r\n  ngOnInit(): void {\r\n    const apiObs = {\r\n      next: (result: KeyValue<string, string>) => {\r\n        this.apiKey = result.value;\r\n      },\r\n      error: (err: unknown) => console.error(err)\r\n    };\r\n\r\n    this.settingsService.getSetting('apikey').subscribe(apiObs);\r\n\r\n    const ctrlObs = {\r\n      next: (result: ControlModule[]) => {\r\n        this.controllers = result;\r\n      },\r\n      error: (err: unknown) => console.error(err)\r\n    };\r\n\r\n    this.settingsService.getControllers().subscribe(ctrlObs);\r\n\r\n  }\r\n\r\n  generateApiKey() {\r\n    let result = '';\r\n    const charactersLength = this.characters.length;\r\n    for (let i = 0; i < 10; i++) {\r\n      result += this.characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n\r\n    this.apiKey = result;\r\n\r\n    const observer = {\r\n      next: (_: unknown) => {\r\n        console.log('API key saved');\r\n      },\r\n      error: (err: unknown) => {\r\n        console.error(err)\r\n        this.apiKey = \"Failed to save API key\"\r\n      }\r\n    };\r\n\r\n    this.settingsService.saveSetting({ key: 'apikey', value: result }).subscribe(observer);\r\n  }\r\n\r\n  modalCallback(evt: ModalCallbackResult) {\r\n\r\n    switch (evt.type) {\r\n      case FormatModalComponent.formatSdEvent:\r\n        this.formatSD(evt.value as unknown[]);\r\n        break;\r\n    }\r\n\r\n    this.modalService.close('scripts-modal');\r\n    this.container.clear();\r\n  }\r\n\r\n  popModal(val: string) {\r\n    this.container.clear();\r\n    const modalResources = new Map<string, unknown>();\r\n\r\n    let component: ComponentRef<FormatModalComponent>;\r\n\r\n    switch (val) {\r\n      case 'format':\r\n        modalResources.set(ModalResources.controllers, this.controllers);\r\n        component = this.container.createComponent(FormatModalComponent);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    component.instance.resources = modalResources;\r\n    component.instance.modalCallback.subscribe((evt: ModalCallbackResult) => {\r\n      this.modalCallback(evt);\r\n    });\r\n\r\n    this.modalService.open('scripts-modal');\r\n  }\r\n\r\n  formatSD(val: unknown[]) {\r\n    const observer = {\r\n      next: (_: unknown) => {\r\n        this.snackBarService.okToast('Format queued!');\r\n      },\r\n      error: (err: unknown) => {\r\n        this.snackBarService.okToast('Error requesting format. Check logs.');\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    this.settingsService.formatSD(val).subscribe(observer);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/styles/variables\";\r\n\r\n.container {\r\n        max-width: 800px;\r\n        margin: 0 auto;\r\n \r\n        .setting-row {\r\n\r\n            display: flex;\r\n            flex-direction: row;\r\n            flex-wrap: wrap;\r\n            border-bottom: 2px solid black;\r\n            margin: 20px;\r\n            .key {\r\n                font-size: x-large;\r\n                width: 180px;\r\n                margin: 10px;\r\n\r\n                border-right: 2px solid black;\r\n            }\r\n    \r\n            .value {\r\n                flex-grow: 1;\r\n                \r\n                .properties {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    flex-wrap: nowrap;\r\n\r\n                    .text {\r\n                        flex-grow: 1;\r\n                        font-size: x-large;\r\n                        margin: 10px;\r\n                    }\r\n\r\n                    .button{\r\n                        float: right;\r\n                        \r\n                        button {\r\n                            width: 140px;\r\n                            padding: 3px 20px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n}",
                    "styleUrl": "./settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"setting-row\">\r\n        <div class=\"key\">\r\n            API Key\r\n        </div>\r\n        <div class=\"value\">\r\n            <div class=\"properties\">\r\n                <div class=\"text\">{{apiKey}}</div>\r\n                <div class=\"button\">\r\n                    <button (click)=\"generateApiKey()\">Generate</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"setting-row\">\r\n        <div class=\"key\">\r\n            Format SD Card\r\n        </div>\r\n        <div class=\"value\"><div class=\"properties\">\r\n            <div class=\"text\"></div>\r\n            <div class=\"button\">\r\n                <button (click)=\"popModal('format')\">Format</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<app-astros-modal id=\"scripts-modal\" disableBackgroundClick=\"0\" style=\"display: none;\">\r\n    <ng-template #modalContainer></ng-template>\r\n</app-astros-modal>"
        },
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-e44f5fd042f45e3d143ef8762160f6fc7b895b3412446378897a387e335ec4b394824d1cbeb3f813e284a374d12e9d23d1869f4ce900111464225a4332630808",
            "file": "src/app/pages/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status",
            "styleUrls": [
                "./status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyDownEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'bodyDown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "bodyNotSyncedEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'bodyNotSynced', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreDownEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'coreDown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "coreNotSyncedEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'coreNotSynced', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "domeDownEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'domeDown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "domeNotSyncedEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'domeNotSynced', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "syncEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "downEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ControllerStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "syncEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "downEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Renderer2, ViewChild} from '@angular/core';\r\nimport { ControllerStatus } from 'astros-common';\r\nimport { StatusService } from 'src/app/services/status/status.service';\r\n\r\n@Component({\r\n    selector: 'app-status',\r\n    templateUrl: './status.component.html',\r\n    styleUrls: ['./status.component.scss'],\r\n    standalone: true\r\n})\r\nexport class StatusComponent implements AfterViewInit {\r\n\r\n  @ViewChild('coreDown', { static: false }) coreDownEl!: ElementRef;\r\n  @ViewChild('domeDown', { static: false }) domeDownEl!: ElementRef;\r\n  @ViewChild('bodyDown', { static: false }) bodyDownEl!: ElementRef;\r\n\r\n  @ViewChild('coreNotSynced', { static: false }) coreNotSyncedEl!: ElementRef;\r\n  @ViewChild('domeNotSynced', { static: false }) domeNotSyncedEl!: ElementRef;\r\n  @ViewChild('bodyNotSynced', { static: false }) bodyNotSyncedEl!: ElementRef;\r\n\r\n  constructor(private renderer: Renderer2, private status: StatusService ) {\r\n    \r\n    this.status.coreStateObserver.subscribe(value => this.handleStatus(value, this.coreNotSyncedEl, this.coreDownEl));\r\n    this.status.domeStateObserver.subscribe(value => this.handleStatus(value, this.domeNotSyncedEl, this.domeDownEl));\r\n    this.status.bodyStateObserver.subscribe(value => this.handleStatus(value, this.bodyNotSyncedEl, this.bodyDownEl));\r\n}\r\n  \r\n  ngAfterViewInit(): void {  \r\n    this.handleStatus(this.status.getCoreStatus(), this.coreNotSyncedEl, this.coreDownEl);\r\n    this.handleStatus(this.status.getDomeStatus(), this.domeNotSyncedEl, this.domeDownEl);\r\n    this.handleStatus(this.status.getBodyStatus(), this.bodyNotSyncedEl, this.bodyDownEl);\r\n\r\n  }\r\n\r\n  handleStatus(status: ControllerStatus, syncEl: ElementRef, downEl: ElementRef){\r\n    switch (status){\r\n      case ControllerStatus.up:\r\n        this.renderer.setStyle(syncEl.nativeElement, 'visibility', 'hidden');\r\n        this.renderer.setStyle(downEl.nativeElement, 'visibility', 'hidden');\r\n        break;\r\n      case ControllerStatus.needsSynced:\r\n        this.renderer.setStyle(syncEl.nativeElement, 'visibility', 'visible');\r\n        this.renderer.setStyle(downEl.nativeElement, 'visibility', 'hidden');\r\n        break;\r\n      case ControllerStatus.down:\r\n        this.renderer.setStyle(syncEl.nativeElement, 'visibility', 'hidden');\r\n        this.renderer.setStyle(downEl.nativeElement, 'visibility', 'visible');\r\n        break;\r\n    } \r\n  }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".img-container {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n\r\nimg {\r\n    max-width: 300px;\r\n\r\n}\r\n\r\n.bottom {\r\n    position: absolute;\r\n    z-index: 0;\r\n}\r\n\r\n.middle {\r\n    position: absolute;\r\n    z-index: 1;\r\n}\r\n\r\n.top {\r\n    position: absolute;\r\n    z-index: 2;\r\n}\r\n\r\n.hidden {\r\n    visibility: hidden;\r\n}\r\n\r\n.blink {\r\n    animation: blink 1s;\r\n    animation-iteration-count: infinite;\r\n}\r\n\r\n@keyframes blink {\r\n    0% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 480px){\r\n    img {\r\n        max-width: 60%;\r\n    }\r\n}",
                    "styleUrl": "./status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"img-container\">\r\n\r\n    <img class=\"bottom\" src=\"../../../assets/img/r2.png\" alt=\"Astromech\">\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/core.png\" alt=\"Astromech Core Down\" #coreDown>\r\n    <img class=\"middle blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/core_yellow.png\" alt=\"Astromech Core Not Synced\" #coreNotSynced>\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/dome.png\" alt=\"Astromech Dome Down\" #domeDown>\r\n    <img class=\"middle blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/dome_yellow.png\" alt=\"Astromech Dome Not Synced\" #domeNotSynced>\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/body.png\" alt=\"Astromech Body Down\" #bodyDown>\r\n    <img class=\"middle blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/body_yellow.png\" alt=\"Astromech Body Not Synced\" #bodyNotSynced>\r\n    <img class=\"top blink\" style=\"visibility: hidden;\" src=\"../../../assets/img/legs.png\" alt=\"Astromech Leg\" #legs>\r\n\r\n</div>"
        },
        {
            "name": "UartEventModalComponent",
            "id": "component-UartEventModalComponent-44f733fba9fee12ffe5bbbe1404250bfa36efc44d4059c9487074b4b56b89fb4e0c6c422a9d790bacd9e85bfb278f6191781a7b8cff47deac4b1b81d389c64cd",
            "file": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-uart-event-modal",
            "styleUrls": [
                "../base-event-modal/base-event-modal.component.scss",
                "./uart-event-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./uart-event-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "baudRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "eventValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "uartChannel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "callbackType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "eventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "maxTime",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "originalEventTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "scriptEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScriptEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "timeFactor",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                },
                {
                    "name": "removeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseEventModalComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { GenericSerialEvent, ScriptEvent } from 'astros-common';\r\nimport { BaseEventModalComponent, ScriptEventModalResources } from '../base-event-modal/base-event-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { ModalCallbackEvent } from '../../modal-base/modal-base.component';\r\n\r\nexport class UartEventModalResources {\r\n  public static channelId = 'channelId';\r\n  public static baudRate = 'baudRate';\r\n  public static scriptEvent = 'scriptEvent';\r\n}\r\n\r\n@Component({\r\n    selector: 'app-uart-event-modal',\r\n    templateUrl: './uart-event-modal.component.html',\r\n    styleUrls: ['../base-event-modal/base-event-modal.component.scss', './uart-event-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [FormsModule, DecimalPipe]\r\n})\r\nexport class UartEventModalComponent extends BaseEventModalComponent implements OnInit {\r\n   \r\n  uartChannel!: number;\r\n  baudRate!: number;\r\n  eventValue: string;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.originalEventTime = 0;\r\n    this.eventTime = 0;\r\n    this.eventValue = '';\r\n    this.errorMessage = '';\r\n    this.callbackType = ScriptEventModalResources.addEvent;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.resources.has(ScriptEventModalResources.callbackType)){\r\n      this.callbackType = this.resources.get(ScriptEventModalResources.callbackType) as string;\r\n    }\r\n\r\n    if (this.callbackType === ScriptEventModalResources.editEvent){\r\n      const element = document.getElementById(\"remove_button\");\r\n      element?.classList.remove(\"hidden\");\r\n    }\r\n\r\n    this.uartChannel = this.resources.get(UartEventModalResources.channelId) as number;\r\n    this.baudRate = this.resources.get(UartEventModalResources.baudRate) as number;\r\n\r\n    this.scriptEvent = this.resources.get(UartEventModalResources.scriptEvent) as ScriptEvent;\r\n    \r\n    if (this.scriptEvent.dataJson != ''){\r\n      const payload = JSON.parse(this.scriptEvent.dataJson);\r\n      this.eventValue = payload.value;\r\n    }\r\n    \r\n    this.originalEventTime = this.scriptEvent.time;\r\n    this.eventTime = this.scriptEvent.time;\r\n  }\r\n\r\n  addEvent(){\r\n\r\n    if (+this.eventTime > this.maxTime){\r\n      this.errorMessage = `Event time cannot be larger than ${this.maxTime}`;\r\n      return;\r\n    }\r\n   \r\n    this.scriptEvent.time = +this.eventTime;\r\n    this.scriptEvent.dataJson = JSON.stringify(new GenericSerialEvent(this.uartChannel, this.baudRate, this.eventValue,));\r\n\r\n    const evt = new ModalCallbackEvent(\r\n      this.callbackType,\r\n      {\r\n        scriptEvent: this.scriptEvent,\r\n        time: this.originalEventTime\r\n      }\r\n    );\r\n    this.modalCallback.emit(evt);\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".event-modal {\r\n\r\n    width: 400px;\r\n\r\n    select {\r\n      display: block;\r\n      font-size: large;\r\n      margin-top: 8px;\r\n      width: 300px;\r\n    }\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 300px;\r\n            display: inline;\r\n        }\r\n     \r\n        label {\r\n            display:block;\r\n            width: 300px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 300px;\r\n            height: 28px;\r\n            margin-bottom: 8px;\r\n            font-size: large;\r\n        }\r\n        .error {\r\n            text-align: center;\r\n            color: crimson;\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "../base-event-modal/base-event-modal.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./uart-event-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": [
                "BaseEventModalComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"event-modal\">\r\n    <h1>Serial Event</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <label for=\"time\">Event Time (seconds)</label>\r\n                <input name=\"time\" matInput placeholder=\"Time\" type=\"number\" step=\"0.1\"\r\n                    ng-pattern=\"/^[0-9]+(\\.[0-9]{1})?$/\" [ngModel]=\"eventTime | number : '1.0-1'\"\r\n                    (ngModelChange)=\"eventTime = $event\" />\r\n            </div>\r\n            <div>\r\n                <label for=\"value\">Serial Command</label>\r\n                <input name=\"value\" matInput placeholder=\"Value\" [(ngModel)]=\"eventValue\" />\r\n            </div>\r\n            <div class=\"error\">{{errorMessage}}</div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button (click)=\"addEvent();\">Save</button>\r\n            <button id=\"remove_button\" class=\"hidden\" (click)=\"removeEvent();\">Remove</button>\r\n            <button (click)=\"closeModal();\">Close</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "UartModuleComponent",
            "id": "component-UartModuleComponent-596f3db3b7898f52195cf71d155c2e67dbc31207f1dae98a6a83bbb6fefff3597212af9cbf1383dccfe436f25c084c26487415842baa7b86403020a2e8fcc7ff",
            "file": "src/app/pages/modules/uart-modules/uart-module/uart-module.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-uart-module",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./uart-module.component.html"
            ],
            "viewProviders": [
                {
                    "name": "MatExpansionPanel"
                }
            ],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatExpansionPanel"
                },
                {
                    "name": "MatExpansionPanelHeader"
                },
                {
                    "name": "MatExpansionPanelTitle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle } from '@angular/material/expansion';\r\n\r\n@Component({\n    selector: 'app-uart-module',\n    templateUrl: './uart-module.component.html',\n    styleUrl: './uart-module.component.scss',\n    viewProviders: [MatExpansionPanel],\n    standalone: true,\n    imports: [MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle]\n})\r\nexport class UartModuleComponent {\r\n\r\n}\r\n",
            "styleUrl": "./uart-module.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n        <mat-panel-title>Test</mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <div>Test</div>\r\n    <ng-template #uart2Container></ng-template>\r\n</mat-expansion-panel>\r\n"
        },
        {
            "name": "UploadModalComponent",
            "id": "component-UploadModalComponent-dd8d8ee13bc0e4917ac8851bbe385b26e6f789bfbd7ebf95603bae46e9788a948a9df16921cb6a4c262af11b1f6e8e8b7d3b88d511a18ffa4bc1acbb6873992a",
            "file": "src/app/pages/audio-files/upload-modal/upload-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upload-modal",
            "styleUrls": [
                "./upload-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upload-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | >",
                    "decorators": [],
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "modalCallback",
                    "defaultValue": "new EventEmitter<ModalCallbackEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "ModalBaseComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "faFiles",
                    "defaultValue": "faFileAudio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isUploading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "path",
                    "defaultValue": "'/api/audio/savefile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "uploadQueue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileUpload[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addToQueue",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "uploadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgStyle"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient, HttpEventType } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { faFileAudio, faTrash} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { ModalBaseComponent } from 'src/app/modal';\r\nimport { FileUpload } from 'src/app/models/upload-file';\r\nimport { ModalCallbackEvent } from 'src/app/shared/modal-resources';\r\nimport { NgFor, NgStyle, DecimalPipe } from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n    selector: 'app-upload-modal',\r\n    templateUrl: './upload-modal.component.html',\r\n    styleUrls: ['./upload-modal.component.scss'],\r\n    standalone: true,\r\n    imports: [NgFor, NgStyle, FontAwesomeModule, DecimalPipe]\r\n})\r\nexport class UploadModalComponent extends ModalBaseComponent {\r\n\r\n  faTrash = faTrash;\r\n  faFiles = faFileAudio;\r\n\r\n  uploadQueue: FileUpload[];\r\n  isUploading: boolean;\r\n\r\n  path = '/api/audio/savefile';\r\n\r\n  response: string;\r\n\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient) { \r\n    super();\r\n\r\n    this.response = '';\r\n    \r\n    this.token = localStorage.getItem('astros-token') || '';\r\n    this.uploadQueue = new Array<any>();\r\n    this.isUploading = false;\r\n  }\r\n\r\n  removeFile(name: string){\r\n    const idx = this.uploadQueue\r\n    .map((file) => { return file.fileData.name })\r\n    .indexOf(name);\r\n\r\n    this.uploadQueue.splice(idx, 1);\r\n  }\r\n\r\n  addToQueue(evt: any){\r\n    for (const file of evt.target.files){\r\n      this.uploadQueue.push(new FileUpload(file));\r\n    }\r\n  }\r\n  \r\n\r\n  uploadAll(){\r\n    this.isUploading = true;\r\n\r\n    for (const file of this.uploadQueue){\r\n      const formData = new FormData();\r\n      \r\n      formData.append('file', file.fileData);\r\n\r\n      \r\n     \r\n      file.subscription = this.http.post(this.path, formData, {\r\n          reportProgress: true,\r\n          observe: 'events'\r\n        }).subscribe( (evt) =>{\r\n          if (evt.type === HttpEventType.UploadProgress && evt.total){\r\n            file.uploadProgress = Math.round(100 * (evt.loaded / evt.total))\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  cancelAll(){\r\n    for (const file of this.uploadQueue){\r\n      file.subscription?.unsubscribe();\r\n    }\r\n    this.isUploading = true;\r\n  }\r\n\r\n  reset(){\r\n    for (const file of this.uploadQueue){\r\n      file.subscription?.unsubscribe();\r\n      file.subscription = undefined;\r\n      file.uploadProgress = undefined;\r\n    }\r\n\r\n    this.uploadQueue.splice(0, this.uploadQueue.length);\r\n    this.isUploading = false;\r\n  }\r\n\r\n  closeModal(){\r\n    this.modalCallback.emit({id: ModalCallbackEvent.refresh});\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".upload-modal {\r\n\r\n    width: 600px;\r\n  \r\n    .modal-body{\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        font-size: large;\r\n\r\n        .spacer {\r\n            flex-grow: 1;\r\n        }\r\n        \r\n        .content {\r\n            width: 500px;\r\n            overflow-wrap: break-word;\r\n            display: inline;\r\n\r\n            input[type='file'] {\r\n             display: none;\r\n            }\r\n            .upload-button{\r\n              border: 1px solid dimgray;\r\n              display: inline-block;\r\n              margin-top: 8px;\r\n              padding: 6px 12px;\r\n              cursor: pointer;\r\n            }\r\n\r\n            .upload-icon{\r\n              margin-right: 8px;\r\n              color: dimgray;\r\n            }\r\n\r\n            .file-list {\r\n                margin: 0;\r\n                padding: 0;\r\n                list-style-type: none;\r\n            \r\n                .file-line {\r\n                    display: flex;\r\n                    height: 40px;\r\n                    line-height: 40px;\r\n                    flex-direction: row;\r\n                    font-size: large;\r\n                    border-bottom: solid 2px black;\r\n            \r\n                    .name-section {\r\n                    \r\n                        flex-basis: 240px;\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                    }\r\n                    \r\n                    .size-section {\r\n                        flex-grow: 1;\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                        text-align: right;\r\n                        margin-right: 20px;\r\n                    }\r\n            \r\n\r\n                    .progress {\r\n                      width: 80px;\r\n                      height: 100%;\r\n                      margin-top: 4px;\r\n                    }\r\n\r\n                    .progress-background {\r\n                      width: 100%;\r\n                      margin-bottom: 0px;\r\n                      height: 80%;\r\n                      background: lightgrey;\r\n                      border-radius: 4px;\r\n                    }\r\n\r\n                    .progress-bar {\r\n                      width: 100%;\r\n                      height: 100%;\r\n                      float: right;\r\n                      background: green;\r\n                      border-radius: 4px;\r\n                    }\r\n\r\n                    button {\r\n                        font-size: large;\r\n                        padding: 0;\r\n                        margin: 0px 12px;\r\n                        border: none;\r\n                        background-color: transparent;\r\n                        color: dimgray;\r\n                        cursor: pointer;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  }\r\n  \r\n  .modal-buttons{\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .button-spacer {\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .button-grouper{\r\n    button{\r\n      width: 100px;\r\n      font-size: large;\r\n      padding: 5px 0px;\r\n      margin: 0px 5px;\r\n    }\r\n\r\n    .hidden {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  @media only screen and (max-width: 620px){\r\n  .scripter-modal {\r\n        width: 400px;\r\n    }\r\n  }",
                    "styleUrl": "./upload-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ModalBaseComponent"
            ],
            "templateData": "<div class=\"upload-modal\">\r\n    <h1>Upload Audio Files</h1>\r\n    <div class=\"modal-body\">\r\n        <div class=\"spacer\"></div>\r\n        <div class=\"content\">\r\n            <div>\r\n                <ul class=\"file-list\">\r\n                    <li *ngFor=\"let file of uploadQueue\">\r\n                        <div class=\"file-line\">\r\n                            <div class=\"name-section\">{{file?.fileData?.name}}</div>\r\n                            <div class=\"size-section\">{{file?.fileData?.size/1024/1024 | number:'.2' }} MB</div>\r\n                            <div class=\"progress\">\r\n                                <div class=\"progress-background\">\r\n                                    <div title=\"progress\" class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': file.uploadProgress + '%' }\"></div>\r\n                                </div>\r\n                            </div>\r\n                            <button title=\"Remove\" (click)=\"removeFile(file.fileData.name)\">\r\n                                <fa-icon [icon]=\"faTrash\"></fa-icon>\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <label for=\"file-upload\" class=\"upload-button\">\r\n                    <fa-icon class=\"upload-icon\" [icon]=\"faFiles\"></fa-icon>Choose Files\r\n                </label>\r\n                <input id=\"file-upload\" title=\"Upload File\" type=\"file\" (change)=\"addToQueue($event)\" multiple />\r\n            </div>\r\n        </div>\r\n        <div class=\"spacer\"></div>\r\n    </div>\r\n    <div class=\"modal-buttons\">\r\n        <div class=\"button-spacer\"></div>\r\n        <div class=\"button-grouper\">\r\n            <button [disabled]=\"isUploading || uploadQueue.length === 0\" (click)=\"uploadAll()\">Upload</button>\r\n            <button (click)=\"cancelAll()\">Abort</button>\r\n            <button (click)=\"cancelAll(); closeModal();\">Cancel</button>\r\n        </div>\r\n        <div class=\"button-spacer\"></div>\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-264b99969da5720c6749343a06ce8541b65c5b2a728f193a1cfbbfcc3a44e8c8410119016fa6425dbe3b841bd51a5986d1cce8e1b826dc65aced3e54bb938dc9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './auth.guard';\r\nimport { AudioFilesComponent } from './pages/audio-files/audio-files.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { ModulesComponent } from './pages/modules/modules.component';\r\nimport { RemoteConfigComponent } from './pages/remote-config/remote-config.component';\r\nimport { ScripterComponent } from './pages/scripter/scripter.component';\r\nimport { ScriptsComponent } from './pages/scripts/scripts.component';\r\nimport { SettingsComponent } from './pages/settings/settings.component';\r\nimport { StatusComponent } from './pages/status/status.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'status', component: StatusComponent, canActivate: [AuthGuard] },\r\n  { path: 'scripts', component: ScriptsComponent, canActivate: [AuthGuard] },\r\n  { path: 'modules', component: ModulesComponent, canActivate: [AuthGuard] },\r\n  { path: 'scripter/:id', component: ScripterComponent, canActivate: [AuthGuard] },\r\n  { path: 'audio-files', component: AudioFilesComponent, canActivate: [AuthGuard] },\r\n  { path: 'remote', component: RemoteConfigComponent, canActivate: [AuthGuard] },\r\n  { path: 'utility', component: SettingsComponent, canActivate: [AuthGuard] }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ScripterModal",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "UartEventModalComponent | KangarooEventModalComponent | I2cEventModalComponent | AudioEventModalComponent | GpioEventModalComponent | HumanCyborgModalComponent",
                "file": "src/app/pages/scripter/scripter.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/pages/scripter/scripter.component.ts": [
                {
                    "name": "ScripterModal",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "UartEventModalComponent | KangarooEventModalComponent | I2cEventModalComponent | AudioEventModalComponent | GpioEventModalComponent | HumanCyborgModalComponent",
                    "file": "src/app/pages/scripter/scripter.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/esp-submodule/esp-submodule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EspSubmoduleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/alert-modal/alert-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/alert-modal/alert-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AlertModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/confirm-modal/confirm-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfirmModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/loading-modal/loading-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/loading-modal/loading-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadingModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/loading-modal/loading-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadingModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modal-base/modal-base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modal-base/modal-base.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalCallbackEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/audio-event-modal/audio-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AudioEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScriptEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/base-event-modal/base-event-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScriptEventModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChannelTestModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChannelTestModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/channel-test-modal/channel-test-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChannelTestModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ControllerModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ControllerModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/controller-modal/controller-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ControllerModalResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GpioEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/gpio-event-modal/gpio-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GpioEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HumanCyborgModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/human-cyborg-modal/human-cyborg-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HcrModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "I2cEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/i2c-event-modal/i2c-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "I2cEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KangarooEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/kangaroo-event-modal/kangaroo-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "KangarooEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptTestModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScriptTestModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/script-test-modal/script-test-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Caption",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServoEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/servo-event-modal/servo-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServoEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UartEventModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/scripting/uart-event-modal/uart-event-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UartEventModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/servo-test-modal/servo-test-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServoTestModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/servo-test-modal/servo-test-modal.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServoTestModalResources",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modals/servo-test-modal/servo-test-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServoTestMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/script-resources.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChannelValue",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/script-resources.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LocationDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/script-resources.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScriptResources",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/models/upload-file.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileUpload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/audio-files/audio-files.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioFilesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/audio-files/upload-modal/upload-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/drive-module/drive-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DriveModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/esp-module/esp-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EspModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/modules.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModulesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/modules.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Caption",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/uart-modules/generic-serial-module/generic-serial-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericSerialModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/uart-modules/kangaroo-module/kangaroo-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KangarooModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/modules/uart-modules/uart-module/uart-module.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UartModuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/remote-config/m5-paper-config/m5-paper-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "M5PaperConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/remote-config/remote-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoteConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/helper/event-marker-helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventMarkerHelper",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/script-row/script-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/scripter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScripterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/scripter.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripter/scripter.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ScripterModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scripts/scripts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/settings/modals/format-modal/format-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormatModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/settings/modals/format-modal/format-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Controller",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/settings/modals/format-modal/format-modal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResourceController",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/audio/audio.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AudioService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenPayload",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetails",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/controllers/controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ControllerService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/remotes/remotes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RemotesService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scripts/scripts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScriptsService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/settings/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/snackbar/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/status/status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/websocket/websocket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebsocketService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}